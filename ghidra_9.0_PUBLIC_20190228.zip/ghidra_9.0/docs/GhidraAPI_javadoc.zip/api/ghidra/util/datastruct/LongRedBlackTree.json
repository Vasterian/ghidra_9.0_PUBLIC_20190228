{"implements":["java.io.Serializable"],"javadoc":"Container class for storing objects sorted on a long key. Uses the\n RedBlack Tree algorithm to store the objects.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"","static":false,"name":"<init>","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns the number keys in this set.","static":false,"name":"size","comment":"Returns the number keys in this set.","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"Returns true if the key is in the set.\n@param key the key whose presence is to be tested.","static":false,"name":"containsKey","comment":"Returns true if the key is in the set.","params":[{"type_long":"long","name":"key","comment":"the key whose presence is to be tested.","type_short":"long"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Returns the object value for the given key or null if the key\n is not in the tree set.\n@param key the key whose associated value is to be returned.","static":false,"name":"get","comment":"Returns the object value for the given key or null if the key\n is not in the tree set.","params":[{"type_long":"long","name":"key","comment":"the key whose associated value is to be returned.","type_short":"long"}],"throws":[],"return":{"type_long":"java.lang.Object","comment":"","type_short":"Object"}},{"javadoc":"Returns the value object for the smallest key in the set that is greater than\n or equal to the given key. Returns -1 if\n there are no keys greater than or equal to the given key.\n@param key the search key.","static":false,"name":"getAtOrAfter","comment":"Returns the value object for the smallest key in the set that is greater than\n or equal to the given key. Returns -1 if\n there are no keys greater than or equal to the given key.","params":[{"type_long":"long","name":"key","comment":"the search key.","type_short":"long"}],"throws":[],"return":{"type_long":"java.lang.Object","comment":"","type_short":"Object"}},{"javadoc":"Returns the value object for the largest key in the set that is less than\n or equal to the given key. Returns -1 if\n there are no keys less than or equal to the given key.\n@param key the search key.","static":false,"name":"getAtOrBefore","comment":"Returns the value object for the largest key in the set that is less than\n or equal to the given key. Returns -1 if\n there are no keys less than or equal to the given key.","params":[{"type_long":"long","name":"key","comment":"the search key.","type_short":"long"}],"throws":[],"return":{"type_long":"java.lang.Object","comment":"","type_short":"Object"}},{"javadoc":"Returns the first key in this set.\n@exception NoSuchIndexException thrown if no keys exist in this tree.","static":false,"name":"getFirst","comment":"Returns the first key in this set.","params":[],"throws":[{"type_long":"ghidra.util.datastruct.NoSuchIndexException","comment":"","type_short":"NoSuchIndexException"}],"return":{"type_long":"long","comment":"","type_short":"long"}},{"javadoc":"Returns the last key in this set.\n@exception NoSuchIndexException thrown if no keys exist in this tree.","static":false,"name":"getLast","comment":"Returns the last key in this set.","params":[],"throws":[{"type_long":"ghidra.util.datastruct.NoSuchIndexException","comment":"","type_short":"NoSuchIndexException"}],"return":{"type_long":"long","comment":"","type_short":"long"}},{"javadoc":"Returns the smallest key in the set that is greater than the given key.\n@param key the search key.\n@exception NoSuchIndexException thrown if no keys exist in this tree past\n the given key.","static":false,"name":"getNext","comment":"Returns the smallest key in the set that is greater than the given key.","params":[{"type_long":"long","name":"key","comment":"the search key.","type_short":"long"}],"throws":[{"type_long":"ghidra.util.datastruct.NoSuchIndexException","comment":"","type_short":"NoSuchIndexException"}],"return":{"type_long":"long","comment":"","type_short":"long"}},{"javadoc":"Returns the largest key in the set that is less than the given key. Returns -1 if\n there are not keys less than the given key.\n@param key the search key.\n@exception NoSuchIndexException thrown if no keys exist in this tree before\n the given key.","static":false,"name":"getPrevious","comment":"Returns the largest key in the set that is less than the given key. Returns -1 if\n there are not keys less than the given key.","params":[{"type_long":"long","name":"key","comment":"the search key.","type_short":"long"}],"throws":[{"type_long":"ghidra.util.datastruct.NoSuchIndexException","comment":"","type_short":"NoSuchIndexException"}],"return":{"type_long":"long","comment":"","type_short":"long"}},{"javadoc":"Adds the given key,value pair to this tree.\n@param key the key with which the object is to be associated.\n@param obj object to be associated with the specified key.","static":false,"name":"put","comment":"Adds the given key,value pair to this tree.","params":[{"type_long":"long","name":"key","comment":"the key with which the object is to be associated.","type_short":"long"},{"type_long":"java.lang.Object","name":"obj","comment":"object to be associated with the specified key.","type_short":"Object"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Removes the given key from the set.\n@param key key whose mapping is to be removed from the map.","static":false,"name":"remove","comment":"Removes the given key from the set.","params":[{"type_long":"long","name":"key","comment":"key whose mapping is to be removed from the map.","type_short":"long"}],"throws":[],"return":{"type_long":"java.lang.Object","comment":"","type_short":"Object"}},{"javadoc":"Removes all keys from the set.","static":false,"name":"removeAll","comment":"Removes all keys from the set.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Test if the set is empty.\n@return true if the set is empty.","static":false,"name":"isEmpty","comment":"Test if the set is empty.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if the set is empty.","type_short":"boolean"}},{"javadoc":"Returns an iterator over all the objects stored in this tree.","static":false,"name":"iterator","comment":"Returns an iterator over all the objects stored in this tree.","params":[],"throws":[],"return":{"type_long":"java.util.Iterator<?>","comment":"","type_short":"Iterator"}}],"name":"LongRedBlackTree","comment":"Container class for storing objects sorted on a long key. Uses the\n RedBlack Tree algorithm to store the objects.","fields":[]}
