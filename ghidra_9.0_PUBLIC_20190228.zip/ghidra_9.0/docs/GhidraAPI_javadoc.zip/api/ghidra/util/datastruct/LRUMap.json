{"implements":["java.util.Map"],"javadoc":"A LRU (Least Recently Used) map that maintains <i>access-order<\/i> (newest to oldest)\n  iteration over the elements.  \n This map is limited to the given size.  \n As new items are added, the older items will be removed from this map.\n <p>\n If you need to be notified of removals, then you can override \n  {@link #eldestEntryRemoved(java.util.Map.Entry)}.\n <p>\n If you don't want the eldest removed, override  \n  {@link #removeEldestEntry(java.util.Map.Entry)} and return false;\n <p>\n If you would like to have the iteration order of your LRU structure be based upon access, \n but want it to iterate from least recently used to most recently used, then you should see\n {@link FixedSizeHashMap}.\n@param <K> the key type\n@param <V> the value type\n@see LinkedHashMap\n@see FixedSizeHashMap","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"","static":false,"name":"<init>","comment":"","params":[{"type_long":"int","name":"cacheSize","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"size","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"isEmpty","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"containsKey","comment":"","params":[{"type_long":"java.lang.Object","name":"key","comment":"","type_short":"Object"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"containsValue","comment":"","params":[{"type_long":"java.lang.Object","name":"value","comment":"","type_short":"Object"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"get","comment":"","params":[{"type_long":"java.lang.Object","name":"key","comment":"","type_short":"Object"}],"throws":[],"return":{"type_long":"V","comment":"","type_short":"V"}},{"javadoc":"","static":false,"name":"put","comment":"","params":[{"type_long":"K","name":"key","comment":"","type_short":"K"},{"type_long":"V","name":"value","comment":"","type_short":"V"}],"throws":[],"return":{"type_long":"V","comment":"","type_short":"V"}},{"javadoc":"","static":false,"name":"remove","comment":"","params":[{"type_long":"java.lang.Object","name":"key","comment":"","type_short":"Object"}],"throws":[],"return":{"type_long":"V","comment":"","type_short":"V"}},{"javadoc":"","static":false,"name":"putAll","comment":"","params":[{"type_long":"java.util.Map<? extends K,? extends V>","name":"m","comment":"","type_short":"Map"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"clear","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"keySet","comment":"","params":[],"throws":[],"return":{"type_long":"java.util.Set<K>","comment":"","type_short":"Set"}},{"javadoc":"","static":false,"name":"values","comment":"","params":[],"throws":[],"return":{"type_long":"java.util.Collection<V>","comment":"","type_short":"Collection"}},{"javadoc":"","static":false,"name":"entrySet","comment":"","params":[],"throws":[],"return":{"type_long":"java.util.Set<java.util.Map.Entry<K,V>>","comment":"","type_short":"Set"}},{"javadoc":"","static":false,"name":"toString","comment":"","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}}],"name":"LRUMap","comment":"A LRU (Least Recently Used) map that maintains access-order (newest to oldest)\n  iteration over the elements.  \n This map is limited to the given size.  \n As new items are added, the older items will be removed from this map.\n \n If you need to be notified of removals, then you can override \n  #eldestEntryRemoved(java.util.Map.Entry).\n \n If you don't want the eldest removed, override  \n  #removeEldestEntry(java.util.Map.Entry) and return false;\n \n If you would like to have the iteration order of your LRU structure be based upon access, \n but want it to iterate from least recently used to most recently used, then you should see\n FixedSizeHashMap.","fields":[]}
