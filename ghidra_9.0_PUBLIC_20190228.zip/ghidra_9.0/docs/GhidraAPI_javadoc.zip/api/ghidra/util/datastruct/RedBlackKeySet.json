{"implements":["ghidra.util.datastruct.ShortKeySet","java.io.Serializable"],"javadoc":"A RedBlack Tree implementation of the ShortKeySet interface.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"Creates a new RedBlackKeySet that can store keys between 0 and n.\n@param n the maximum key for this set.","static":false,"name":"<init>","comment":"Creates a new RedBlackKeySet that can store keys between 0 and n.","params":[{"type_long":"short","name":"n","comment":"the maximum key for this set.","type_short":"short"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns the number keys in this set.","static":false,"name":"size","comment":"Returns the number keys in this set.","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"Returns true if the key is in the set.\n@param key the key whose presence is to be tested.\n@exception IndexOutOfBoundsException thrown if the given key is not\n in the range [0, maxKey].","static":false,"name":"containsKey","comment":"Returns true if the key is in the set.","params":[{"type_long":"short","name":"key","comment":"the key whose presence is to be tested.","type_short":"short"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Returns the first key in this set.","static":false,"name":"getFirst","comment":"Returns the first key in this set.","params":[],"throws":[],"return":{"type_long":"short","comment":"","type_short":"short"}},{"javadoc":"Returns the last key in this set.","static":false,"name":"getLast","comment":"Returns the last key in this set.","params":[],"throws":[],"return":{"type_long":"short","comment":"","type_short":"short"}},{"javadoc":"Returns the smallest key in the set that is greater than the given key.  Returns\n -1 if there are no keys greater than the given key.\n@param key the key for which to find the next key after.\n@exception IndexOutOfBoundsException thrown if the given key is not\n in the range [0, maxKey].","static":false,"name":"getNext","comment":"Returns the smallest key in the set that is greater than the given key.  Returns\n -1 if there are no keys greater than the given key.","params":[{"type_long":"short","name":"key","comment":"the key for which to find the next key after.","type_short":"short"}],"throws":[],"return":{"type_long":"short","comment":"","type_short":"short"}},{"javadoc":"Returns the largest key in the set that is less than the given key. Returns -1 if\n there are not keys less than the given key.\n@param key the key for which to find the previous key.\n@exception IndexOutOfBoundsException thrown if the given key is not\n in the range [0, maxKey].","static":false,"name":"getPrevious","comment":"Returns the largest key in the set that is less than the given key. Returns -1 if\n there are not keys less than the given key.","params":[{"type_long":"short","name":"key","comment":"the key for which to find the previous key.","type_short":"short"}],"throws":[],"return":{"type_long":"short","comment":"","type_short":"short"}},{"javadoc":"Adds the given key to the set.\n@param key the key to add to the set.\n@exception IndexOutOfBoundsException thrown if the given key is not\n in the range [0, maxKey].","static":false,"name":"put","comment":"Adds the given key to the set.","params":[{"type_long":"short","name":"key","comment":"the key to add to the set.","type_short":"short"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Removes the given key from the set.\n@param key the key to remove from the set.\n@exception IndexOutOfBoundsException thrown if the given key is not\n in the range [0, maxKey].","static":false,"name":"remove","comment":"Removes the given key from the set.","params":[{"type_long":"short","name":"key","comment":"the key to remove from the set.","type_short":"short"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Removes all keys from the set.","static":false,"name":"removeAll","comment":"Removes all keys from the set.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Test if the set is empty.\n@return true if the set is empty.","static":false,"name":"isEmpty","comment":"Test if the set is empty.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if the set is empty.","type_short":"boolean"}}],"name":"RedBlackKeySet","comment":"A RedBlack Tree implementation of the ShortKeySet interface.","fields":[{"type_long":"int","javadoc":"the number of bytes in a RedBlackKeySet node","static":true,"name":"NODESIZE","comment":"the number of bytes in a RedBlackKeySet node","type_short":"int","constant_value":"15"}]}
