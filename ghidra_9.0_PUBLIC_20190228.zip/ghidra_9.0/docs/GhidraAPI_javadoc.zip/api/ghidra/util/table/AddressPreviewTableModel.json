{"implements":[],"javadoc":"Table model that shows a location, label, and a preview column to\n show a preview of the code unit. The location can be in a memory address,\n a stack address, or a register address. The label is the primary symbol\n at the address, if one exists. Use this model when you have a list of\n addresses to build up dynamically.","static":false,"extends":"ghidra.util.table.AddressBasedTableModel","methods":[{"javadoc":"Sets the size of the selections generated by this model when asked to create \n program selections.  For example, some clients know that each table row represents\n a contiguous range of 4 addresses.  In this case, when the user makes a selection, \n that client wants the selection to be 4 addresses, starting at the address in \n the given table row.\n@param size the size of the selections generated by this model when asked to create \n \t\t\t   program selections.","static":false,"name":"setSelectionSize","comment":"Sets the size of the selections generated by this model when asked to create \n program selections.  For example, some clients know that each table row represents\n a contiguous range of 4 addresses.  In this case, when the user makes a selection, \n that client wants the selection to be 4 addresses, starting at the address in \n the given table row.","params":[{"type_long":"int","name":"size","comment":"the size of the selections generated by this model when asked to create \n \t\t\t   program selections.","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getAddress","comment":"","params":[{"type_long":"int","name":"row","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"ghidra.program.model.address.Address","comment":"","type_short":"Address"}},{"javadoc":"","static":false,"name":"getProgramSelection","comment":"","params":[{"type_long":"int[]","name":"rows","comment":"","type_short":"int[]"}],"throws":[],"return":{"type_long":"ghidra.program.util.ProgramSelection","comment":"","type_short":"ProgramSelection"}}],"name":"AddressPreviewTableModel","comment":"Table model that shows a location, label, and a preview column to\n show a preview of the code unit. The location can be in a memory address,\n a stack address, or a register address. The label is the primary symbol\n at the address, if one exists. Use this model when you have a list of\n addresses to build up dynamically.","fields":[]}
