{"implements":[],"javadoc":"","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"A constructor that does not use the source or destination data type managers.  In terms of\n the source data type manager, this means that all data type managers will be used when\n resolving data types.\n@param dataTypeManagerService\n@param allowedTypes","static":false,"name":"<init>","comment":"A constructor that does not use the source or destination data type managers.  In terms of\n the source data type manager, this means that all data type managers will be used when\n resolving data types.","params":[{"type_long":"ghidra.app.services.DataTypeManagerService","name":"dataTypeManagerService","comment":"","type_short":"DataTypeManagerService"},{"type_long":"ghidra.util.data.DataTypeParser.AllowedDataTypes","name":"allowedTypes","comment":"","type_short":"AllowedDataTypes"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Constructor\n@param sourceDataTypeManager preferred source data-type manager, or null\n@param destinationDataTypeManager target data-type manager, or null\n@param dataTypeManagerService data-type manager tool service, or null\n@param allowedTypes constrains which data-types may be parsed\n@see #DataTypeParser(DataTypeManagerService, AllowedDataTypes)","static":false,"name":"<init>","comment":"Constructor","params":[{"type_long":"ghidra.program.model.data.DataTypeManager","name":"sourceDataTypeManager","comment":"preferred source data-type manager, or null","type_short":"DataTypeManager"},{"type_long":"ghidra.program.model.data.DataTypeManager","name":"destinationDataTypeManager","comment":"target data-type manager, or null","type_short":"DataTypeManager"},{"type_long":"ghidra.app.services.DataTypeManagerService","name":"dataTypeManagerService","comment":"data-type manager tool service, or null","type_short":"DataTypeManagerService"},{"type_long":"ghidra.util.data.DataTypeParser.AllowedDataTypes","name":"allowedTypes","comment":"constrains which data-types may be parsed","type_short":"AllowedDataTypes"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Parse a data-type string specification\n@param dataTypeString a known data-type name followed by zero or more pointer\/array decorations.\n@return parsed data-type or null if not found\n@throws InvalidDataTypeException if data-type string is invalid or length exceeds specified maxSize","static":false,"name":"parse","comment":"Parse a data-type string specification","params":[{"type_long":"java.lang.String","name":"dataTypeString","comment":"a known data-type name followed by zero or more pointer\/array decorations.","type_short":"String"}],"throws":[{"type_long":"ghidra.program.model.data.InvalidDataTypeException","comment":"if data-type string is invalid or length exceeds specified maxSize","type_short":"InvalidDataTypeException"}],"return":{"type_long":"ghidra.program.model.data.DataType","comment":"parsed data-type or null if not found","type_short":"DataType"}},{"javadoc":"Parse a data-type string specification with category path.  If category is not null,\n the dataTypeManagerService will not be queried.\n@param dataTypeString a known data-type name followed by zero or more pointer\/array decorations.\n@param category known path of data-type or null if unknown\n@return parsed data-type or null if not found\n@throws InvalidDataTypeException if data-type string is invalid or length exceeds specified maxSize","static":false,"name":"parse","comment":"Parse a data-type string specification with category path.  If category is not null,\n the dataTypeManagerService will not be queried.","params":[{"type_long":"java.lang.String","name":"dataTypeString","comment":"a known data-type name followed by zero or more pointer\/array decorations.","type_short":"String"},{"type_long":"ghidra.program.model.data.CategoryPath","name":"category","comment":"known path of data-type or null if unknown","type_short":"CategoryPath"}],"throws":[{"type_long":"ghidra.program.model.data.InvalidDataTypeException","comment":"if data-type string is invalid or length exceeds specified maxSize","type_short":"InvalidDataTypeException"}],"return":{"type_long":"ghidra.program.model.data.DataType","comment":"parsed data-type or null if not found","type_short":"DataType"}},{"javadoc":"Parse a data-type string specification using the specified baseDatatype.\n@param suggestedBaseDataType base data-type (may be null), this will be used as the base data-type if\n its name matches the base name in the specified dataTypeString.\n@param dataTypeString a base data-type followed by a sequence of zero or more pointer\/array decorations to be applied.  \n The string may start with the baseDataType's name.\n@return parsed data-type or null if not found\n@throws InvalidDataTypeException if data-type string is invalid or length exceeds specified maxSize","static":false,"name":"parse","comment":"Parse a data-type string specification using the specified baseDatatype.","params":[{"type_long":"java.lang.String","name":"dataTypeString","comment":"a base data-type followed by a sequence of zero or more pointer\/array decorations to be applied.  \n The string may start with the baseDataType's name.","type_short":"String"},{"type_long":"ghidra.program.model.data.DataType","name":"suggestedBaseDataType","comment":"base data-type (may be null), this will be used as the base data-type if\n its name matches the base name in the specified dataTypeString.","type_short":"DataType"}],"throws":[{"type_long":"ghidra.program.model.data.InvalidDataTypeException","comment":"if data-type string is invalid or length exceeds specified maxSize","type_short":"InvalidDataTypeException"}],"return":{"type_long":"ghidra.program.model.data.DataType","comment":"parsed data-type or null if not found","type_short":"DataType"}},{"javadoc":"Validate the specified data-type dt against the specified allowedTypes.\n@param dt data-type\n@param allowedTypes\n@throws InvalidDataTypeException if dt violates the specified allowedTypes","static":true,"name":"checkAllowableType","comment":"Validate the specified data-type dt against the specified allowedTypes.","params":[{"type_long":"ghidra.program.model.data.DataType","name":"dt","comment":"data-type","type_short":"DataType"},{"type_long":"ghidra.util.data.DataTypeParser.AllowedDataTypes","name":"allowedTypes","comment":"","type_short":"AllowedDataTypes"}],"throws":[{"type_long":"ghidra.program.model.data.InvalidDataTypeException","comment":"if dt violates the specified allowedTypes","type_short":"InvalidDataTypeException"}],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"DataTypeParser","comment":"","fields":[]}
