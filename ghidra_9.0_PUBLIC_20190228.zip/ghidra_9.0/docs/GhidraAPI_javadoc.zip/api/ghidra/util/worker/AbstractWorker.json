{"implements":[],"javadoc":"Class that uses a single thread to execute scheduled jobs.\n <p>\n Subclasses provide the {@link BlockingQueue} implementation, which allows for controlling\n how jobs get scheduled (e.g., FIFO or priority-based).","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"","static":false,"name":"setTaskMonitor","comment":"","params":[{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Schedules the job for execution.  Jobs will be processed in priority order.  The\n highest priority jobs are those with the lowest value return by the job's getPriority()\n method. (i.e. the job with priority 0 will be processed before the job with priority 1)\n@param job the job to be executed.","static":false,"name":"schedule","comment":"Schedules the job for execution.  Jobs will be processed in priority order.  The\n highest priority jobs are those with the lowest value return by the job's getPriority()\n method. (i.e. the job with priority 0 will be processed before the job with priority 1)","params":[{"type_long":"T","name":"job","comment":"the job to be executed.","type_short":"T"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Clears any pending jobs and cancels any currently executing job.","static":false,"name":"clearAllJobs","comment":"Clears any pending jobs and cancels any currently executing job.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Clears any pending jobs and cancels any currently executing job.\n  <p>\n  <b>Warning: Calling this method may leave the program in a bad\n  state.  Thus, it is recommended that you only do so when you known that any job that\n  could possibly be scheduled does not manipulate sensitive parts of the program; for \n  example, opening file handles that should be closed before finishing.  \n  <p>\n  If you are unsure \n  about whether your jobs handle interrupt correctly, then don't use this method.\n  <\/b>","static":false,"name":"clearAllJobsWithInterrupt_IKnowTheRisks","comment":"Clears any pending jobs and cancels any currently executing job.\n  \n  Warning: Calling this method may leave the program in a bad\n  state.  Thus, it is recommended that you only do so when you known that any job that\n  could possibly be scheduled does not manipulate sensitive parts of the program; for \n  example, opening file handles that should be closed before finishing.  \n  \n  If you are unsure \n  about whether your jobs handle interrupt correctly, then don't use this method.\n  ","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Clears any jobs from the queue <b>that have not yet been run<\/b>.  This does not cancel \n the currently running job.","static":false,"name":"clearPendingJobs","comment":"Clears any jobs from the queue that have not yet been run.  This does not cancel \n the currently running job.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Disposes this worker and terminates its thread.","static":false,"name":"dispose","comment":"Disposes this worker and terminates its thread.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"isDisposed","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"setBusyListener","comment":"","params":[{"type_long":"ghidra.util.task.BusyListener","name":"listener","comment":"","type_short":"BusyListener"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"isBusy","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"This method will block until there are no scheduled jobs in this worker. This\n method assumes that all jobs have a priority less than Long.MAX_VALUE.   \n <p>\n For a non-priority\n queue, this call will not wait for jobs that are scheduled after this call was made.","static":false,"name":"waitUntilNoJobsScheduled","comment":"This method will block until there are no scheduled jobs in this worker. This\n method assumes that all jobs have a priority less than Long.MAX_VALUE.   \n \n For a non-priority\n queue, this call will not wait for jobs that are scheduled after this call was made.","params":[{"type_long":"int","name":"maxWait","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"AbstractWorker","comment":"Class that uses a single thread to execute scheduled jobs.\n \n Subclasses provide the BlockingQueue implementation, which allows for controlling\n how jobs get scheduled (e.g., FIFO or priority-based).","fields":[]}
