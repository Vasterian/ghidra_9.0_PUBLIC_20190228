{"implements":[],"javadoc":"A builder object that allows clients to launch tasks in the background, with a progress\n dialog representing the task.\n \n <P>Using this class obviates the need for clients to create full class objects to implement\n the {@link Task} interface, which means less boiler-plate code.\n \n <P>An example of usage:\n <pre>\n \t\tMonitoredRunnable r = \n\t\t\tmonitor -> doWork(parameter, monitor);\n\t\tnew TaskBuilder(\"Task Title\", r)\n\t\t\t.setHasProgress(true)\n\t\t\t.setCanCancel(true)\n\t\t\t.setStatusTextAlignment(SwingConstants.LEADING)\n\t\t\t.launchModal();\t\t\n <\/pre>","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"Constructor.\n@param title the required title for your task.  This will appear as the title of the\n        task dialog\n@param runnable the runnable that will be called when the task is run","static":false,"name":"<init>","comment":"Constructor.","params":[{"type_long":"java.lang.String","name":"title","comment":"the required title for your task.  This will appear as the title of the\n        task dialog","type_short":"String"},{"type_long":"ghidra.util.task.MonitoredRunnable","name":"runnable","comment":"the runnable that will be called when the task is run","type_short":"MonitoredRunnable"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Sets whether this task reports progress.   The default is <tt>true<\/tt>.\n@param hasProgress true if the task reports progress\n@return this builder","static":false,"name":"setHasProgress","comment":"Sets whether this task reports progress.   The default is true.","params":[{"type_long":"boolean","name":"hasProgress","comment":"true if the task reports progress","type_short":"boolean"}],"throws":[],"return":{"type_long":"ghidra.util.task.TaskBuilder","comment":"this builder","type_short":"TaskBuilder"}},{"javadoc":"Sets whether the task can be cancelled.  The default is <tt>true<\/tt>.\n@param canCancel true if the task can be cancelled.\n@return this builder","static":false,"name":"setCanCancel","comment":"Sets whether the task can be cancelled.  The default is true.","params":[{"type_long":"boolean","name":"canCancel","comment":"true if the task can be cancelled.","type_short":"boolean"}],"throws":[],"return":{"type_long":"ghidra.util.task.TaskBuilder","comment":"this builder","type_short":"TaskBuilder"}},{"javadoc":"Sets the component over which the task dialog will be shown.  The default is <tt>null<\/tt>,\n which shows the dialog over the active window.\n@param parent the parent\n@return this builder","static":false,"name":"setParent","comment":"Sets the component over which the task dialog will be shown.  The default is null,\n which shows the dialog over the active window.","params":[{"type_long":"java.awt.Component","name":"parent","comment":"the parent","type_short":"Component"}],"throws":[],"return":{"type_long":"ghidra.util.task.TaskBuilder","comment":"this builder","type_short":"TaskBuilder"}},{"javadoc":"Sets the amount of time that will pass before showing the dialog.  The default is\n {@link TaskLauncher#INITIAL_DELAY} for non-modal tasks and \n {@link TaskLauncher#INITIAL_MODAL_DELAY} for modal tasks.\n@param delay the delay time\n@return this builder","static":false,"name":"setLaunchDelay","comment":"Sets the amount of time that will pass before showing the dialog.  The default is\n TaskLauncher#INITIAL_DELAY for non-modal tasks and \n TaskLauncher#INITIAL_MODAL_DELAY for modal tasks.","params":[{"type_long":"int","name":"delay","comment":"the delay time","type_short":"int"}],"throws":[],"return":{"type_long":"ghidra.util.task.TaskBuilder","comment":"this builder","type_short":"TaskBuilder"}},{"javadoc":"The desired width of the dialog.  The default is {@link TaskDialog#DEFAULT_WIDTH}.\n@param width the width\n@return this builder","static":false,"name":"setDialogWidth","comment":"The desired width of the dialog.  The default is TaskDialog#DEFAULT_WIDTH.","params":[{"type_long":"int","name":"width","comment":"the width","type_short":"int"}],"throws":[],"return":{"type_long":"ghidra.util.task.TaskBuilder","comment":"this builder","type_short":"TaskBuilder"}},{"javadoc":"Sets the horizontal text alignment of messages shown in the task dialog.  The \n default is {@link SwingConstants#CENTER}.  Valid values are {@link SwingConstants}\n LEADING, CENTER and TRAILING.\n@param alignment the alignment\n@return this builder","static":false,"name":"setStatusTextAlignment","comment":"Sets the horizontal text alignment of messages shown in the task dialog.  The \n default is SwingConstants#CENTER.  Valid values are SwingConstants\n LEADING, CENTER and TRAILING.","params":[{"type_long":"int","name":"alignment","comment":"the alignment","type_short":"int"}],"throws":[],"return":{"type_long":"ghidra.util.task.TaskBuilder","comment":"this builder","type_short":"TaskBuilder"}},{"javadoc":"Launches the task built by this builder, using a blocking modal dialog.","static":false,"name":"launchModal","comment":"Launches the task built by this builder, using a blocking modal dialog.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Launches the task built by this builder, using a non-blocking dialog.\n@return the launcher that launched the task","static":false,"name":"launchNonModal","comment":"Launches the task built by this builder, using a non-blocking dialog.","params":[],"throws":[],"return":{"type_long":"ghidra.util.task.TaskLauncher","comment":"the launcher that launched the task","type_short":"TaskLauncher"}}],"name":"TaskBuilder","comment":"A builder object that allows clients to launch tasks in the background, with a progress\n dialog representing the task.\n \n Using this class obviates the need for clients to create full class objects to implement\n the Task interface, which means less boiler-plate code.\n \n An example of usage:\n \n \t\tMonitoredRunnable r = \n\t\t\tmonitor - doWork(parameter, monitor);\n\t\tnew TaskBuilder(\"Task Title\", r)\n\t\t\t.setHasProgress(true)\n\t\t\t.setCanCancel(true)\n\t\t\t.setStatusTextAlignment(SwingConstants.LEADING)\n\t\t\t.launchModal();\t\t\n ","fields":[]}
