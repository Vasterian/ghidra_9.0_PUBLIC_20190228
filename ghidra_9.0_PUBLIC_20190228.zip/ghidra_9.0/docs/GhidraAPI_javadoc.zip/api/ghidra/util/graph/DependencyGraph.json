{"implements":[],"javadoc":"Class for managing the visiting (processing)  of a set of values where some values depend\n on other values being process before them.  In other words, an acyclic directed graph will\n be formed where the vertexes are the values and the edges represent dependencies.  Values can\n only be removed if they have no dependencies.  Since the graph is acyclic, as values are removed\n that have no dependencies, other nodes that depend on those nodes will become eligible for \n processing and removal.  If cycles are introduced, they will eventually cause an IllegalState\n exception to occur when removing and processing values.  There is also a hasCycles() method\n that can be called before processing to find cycle problems up front without wasting time \n processing values.\n@param <T> the type of value.  This class uses the values as keys in HashSets, so the value\n type must be meet the equals() and hashCode() requirements for hashing.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"","static":false,"name":"<init>","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Copy constructor\n@param other the other DependencyGraph to copy","static":false,"name":"<init>","comment":"Copy constructor","params":[{"type_long":"ghidra.util.graph.DependencyGraph<T>","name":"other","comment":"the other DependencyGraph to copy","type_short":"DependencyGraph"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Adds the value to this graph.\n@param value the value to add","static":false,"name":"addValue","comment":"Adds the value to this graph.","params":[{"type_long":"T","name":"value","comment":"the value to add","type_short":"T"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns the number of values in this graph.\n@return the number of values in this graph.","static":false,"name":"size","comment":"Returns the number of values in this graph.","params":[],"throws":[],"return":{"type_long":"int","comment":"the number of values in this graph.","type_short":"int"}},{"javadoc":"Returns true if the graph has no values;\n@return true if the graph has no values;","static":false,"name":"isEmpty","comment":"Returns true if the graph has no values;","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if the graph has no values;","type_short":"boolean"}},{"javadoc":"Returns true if this graph has the given key.\n@param value the value to check if its in this graph\n@return true if this graph has the given key.","static":false,"name":"contains","comment":"Returns true if this graph has the given key.","params":[{"type_long":"T","name":"value","comment":"the value to check if its in this graph","type_short":"T"}],"throws":[],"return":{"type_long":"boolean","comment":"true if this graph has the given key.","type_short":"boolean"}},{"javadoc":"Returns the set of values in this graph.\n@return the set of values in this graph.","static":false,"name":"getValues","comment":"Returns the set of values in this graph.","params":[],"throws":[],"return":{"type_long":"java.util.Set<T>","comment":"the set of values in this graph.","type_short":"Set"}},{"javadoc":"Returns a copy of this graph.\n@return a copy of this graph.","static":false,"name":"copy","comment":"Returns a copy of this graph.","params":[],"throws":[],"return":{"type_long":"ghidra.util.graph.DependencyGraph<T>","comment":"a copy of this graph.","type_short":"DependencyGraph"}},{"javadoc":"Add a dependency such that value1 depends on value2.  Both value1 and value2 will be\n added to the graph if they are not already in the graph.\n@param value1 the value that depends on value2\n@param value2 the value that value1 is depending on","static":false,"name":"addDependency","comment":"Add a dependency such that value1 depends on value2.  Both value1 and value2 will be\n added to the graph if they are not already in the graph.","params":[{"type_long":"T","name":"value1","comment":"the value that depends on value2","type_short":"T"},{"type_long":"T","name":"value2","comment":"the value that value1 is depending on","type_short":"T"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns true if there are unvisited values ready (no dependencies) for processing.\n@return true if there are unvisited values ready for processing.\n@exception IllegalStateException is thrown if the graph is not empty and there are no nodes\n without dependency which indicates there is a cycle in the graph.","static":false,"name":"hasUnVisitedIndependentValues","comment":"Returns true if there are unvisited values ready (no dependencies) for processing.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if there are unvisited values ready for processing.","type_short":"boolean"}},{"javadoc":"Removes and returns a value that has no dependencies from the graph.  If the graph is empty\n or all the nodes without dependencies are currently visited, then null will be returned.\n NOTE: If the getUnvisitedIndependentValues() method has been called(), this method may\n return null until all those \"visited\" nodes are removed from the graph.\n@return return an arbitrary value that has no dependencies and hasn't been visited or null.","static":false,"name":"pop","comment":"Removes and returns a value that has no dependencies from the graph.  If the graph is empty\n or all the nodes without dependencies are currently visited, then null will be returned.\n NOTE: If the getUnvisitedIndependentValues() method has been called(), this method may\n return null until all those \"visited\" nodes are removed from the graph.","params":[],"throws":[],"return":{"type_long":"T","comment":"return an arbitrary value that has no dependencies and hasn't been visited or null.","type_short":"T"}},{"javadoc":"Checks if this graph has cycles.  Normal processing of this graph will eventually reveal\n a cycle and throw an exception at the time it is detected.  This method allows for a \n \"fail fast\" way to detect cycles.\n@return true if cycles exist in the graph.","static":false,"name":"hasCycles","comment":"Checks if this graph has cycles.  Normal processing of this graph will eventually reveal\n a cycle and throw an exception at the time it is detected.  This method allows for a \n \"fail fast\" way to detect cycles.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if cycles exist in the graph.","type_short":"boolean"}},{"javadoc":"Returns a set of all values that have no dependencies.  As values are removed from the\n graph, dependencies will be removed and additional values will be eligible to be returned\n by this method.  Once a value has been retrieved using this method, it will be considered\n \"visited\" and future calls to this method will not include those values.  To continue\n processing the values in the graph, all values return from this method should eventually\n be deleted from the graph to \"free up\" other values.  NOTE: values retrieved by this method\n will no longer be eligible for return by the pop() method.\n@return the set of values without dependencies that have never been returned by this method \n before.","static":false,"name":"getUnvisitedIndependentValues","comment":"Returns a set of all values that have no dependencies.  As values are removed from the\n graph, dependencies will be removed and additional values will be eligible to be returned\n by this method.  Once a value has been retrieved using this method, it will be considered\n \"visited\" and future calls to this method will not include those values.  To continue\n processing the values in the graph, all values return from this method should eventually\n be deleted from the graph to \"free up\" other values.  NOTE: values retrieved by this method\n will no longer be eligible for return by the pop() method.","params":[],"throws":[],"return":{"type_long":"java.util.Set<T>","comment":"the set of values without dependencies that have never been returned by this method \n before.","type_short":"Set"}},{"javadoc":"Returns the set of all values that have no dependencies regardless of whether or not\n they have been \"visited\" (by the getUnvisitedIndependentValues() method.\n@return return the set of all values that have no dependencies.","static":false,"name":"getAllIndependentValues","comment":"Returns the set of all values that have no dependencies regardless of whether or not\n they have been \"visited\" (by the getUnvisitedIndependentValues() method.","params":[],"throws":[],"return":{"type_long":"java.util.Set<T>","comment":"return the set of all values that have no dependencies.","type_short":"Set"}},{"javadoc":"Removes the value from the graph.  Any dependency from this node to another will be removed,\n possible allowing nodes that depend on this node to be eligible for processing.\n@param value the value to remove from the graph.","static":false,"name":"remove","comment":"Removes the value from the graph.  Any dependency from this node to another will be removed,\n possible allowing nodes that depend on this node to be eligible for processing.","params":[{"type_long":"T","name":"value","comment":"the value to remove from the graph.","type_short":"T"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns a set of values that depend on the given value.\n@param value the value that other values may depend on.\n@return a set of values that depend on the given value.","static":false,"name":"getDependentValues","comment":"Returns a set of values that depend on the given value.","params":[{"type_long":"T","name":"value","comment":"the value that other values may depend on.","type_short":"T"}],"throws":[],"return":{"type_long":"java.util.Set<T>","comment":"a set of values that depend on the given value.","type_short":"Set"}}],"name":"DependencyGraph","comment":"Class for managing the visiting (processing)  of a set of values where some values depend\n on other values being process before them.  In other words, an acyclic directed graph will\n be formed where the vertexes are the values and the edges represent dependencies.  Values can\n only be removed if they have no dependencies.  Since the graph is acyclic, as values are removed\n that have no dependencies, other nodes that depend on those nodes will become eligible for \n processing and removal.  If cycles are introduced, they will eventually cause an IllegalState\n exception to occur when removing and processing values.  There is also a hasCycles() method\n that can be called before processing to find cycle problems up front without wasting time \n processing values.","fields":[]}
