{"implements":[],"javadoc":"","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"Constructs an empty state.\n@param pcodeEntry instruction identifies the instruction entry point for this context state.\n A pcodeIndex of 0 is assumed.  Initial state utilizes the program's stored context.\n@param program","static":false,"name":"<init>","comment":"Constructs an empty state.","params":[{"type_long":"ghidra.program.model.address.Address","name":"entryPt","comment":"","type_short":"Address"},{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"","type_short":"Program"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Constructs an empty state.\n@param pcodeEntry instruction identifies the instruction entry point for this context state.\n A pcodeIndex of 0 is assumed.\n@param programCtx initial program context or null\n@param program","static":false,"name":"<init>","comment":"Constructs an empty state.","params":[{"type_long":"ghidra.program.model.address.Address","name":"entryPt","comment":"","type_short":"Address"},{"type_long":"ghidra.program.model.listing.ProgramContext","name":"programCtx","comment":"initial program context or null","type_short":"ProgramContext"},{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"","type_short":"Program"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Derive a new context state from an initial state\n@param instructionAddr instruction identifies the instruction entry point for this context state.\n@param pcodeIndex pcode identifies the pcode entry point for this context state.\n@param previousState previous context state flowing into the specified pcode location","static":false,"name":"<init>","comment":"Derive a new context state from an initial state","params":[{"type_long":"ghidra.program.model.pcode.SequenceNumber","name":"pcodeEntry","comment":"","type_short":"SequenceNumber"},{"type_long":"ghidra.util.state.ContextState","name":"previousState","comment":"previous context state flowing into the specified pcode location","type_short":"ContextState"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns program associated with this context state","static":false,"name":"getProgram","comment":"Returns program associated with this context state","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.listing.Program","comment":"","type_short":"Program"}},{"javadoc":"Returns previous ContextState which flowed into this one.","static":false,"name":"getPreviousContextState","comment":"Returns previous ContextState which flowed into this one.","params":[],"throws":[],"return":{"type_long":"ghidra.util.state.ContextState","comment":"","type_short":"ContextState"}},{"javadoc":"","static":false,"name":"isFlowFrom","comment":"","params":[{"type_long":"ghidra.program.model.pcode.SequenceNumber","name":"seq","comment":"","type_short":"SequenceNumber"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"getFlowFroms","comment":"","params":[],"throws":[],"return":{"type_long":"java.util.Set<ghidra.program.model.pcode.SequenceNumber>","comment":"","type_short":"Set"}},{"javadoc":"","static":false,"name":"getExitPoint","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.pcode.SequenceNumber","comment":"","type_short":"SequenceNumber"}},{"javadoc":"","static":false,"name":"getSequenceRange","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.util.state.SequenceRange","comment":"","type_short":"SequenceRange"}},{"javadoc":"Set a varnode to be debugged.  This will be passed to any states \n derived from this state.\n@param varnode varnode to be debugged","static":false,"name":"setDebugVarnod","comment":"Set a varnode to be debugged.  This will be passed to any states \n derived from this state.","params":[{"type_long":"ghidra.program.model.pcode.Varnode","name":"varnode","comment":"varnode to be debugged","type_short":"Varnode"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Branch the current state.  The current state should be associated with\n branch target, the returned state should be used for the fall-through flow.\n@return ","static":false,"name":"branchState","comment":"Branch the current state.  The current state should be associated with\n branch target, the returned state should be used for the fall-through flow.","params":[{"type_long":"ghidra.program.model.pcode.SequenceNumber","name":"pcodeEntry","comment":"","type_short":"SequenceNumber"}],"throws":[],"return":{"type_long":"ghidra.util.state.ContextState","comment":"","type_short":"ContextState"}},{"javadoc":"Returns the point at which the state was instantiated.","static":false,"name":"getEntryPoint","comment":"Returns the point at which the state was instantiated.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.pcode.SequenceNumber","comment":"","type_short":"SequenceNumber"}},{"javadoc":"When done processing a particular instruction, this method should be invoked to \n clear any unique Varnode state.\n@return previous unique state","static":false,"name":"clearUniqueState","comment":"When done processing a particular instruction, this method should be invoked to \n clear any unique Varnode state.","params":[],"throws":[],"return":{"type_long":"java.util.HashMap<java.lang.Long,ghidra.program.model.pcode.Varnode>","comment":"previous unique state","type_short":"HashMap"}},{"javadoc":"When no longer updating this state, this method should be invoked to\n cleanup resources no longer needed (e.g., uniqueState no longer \n maintained).","static":false,"name":"lock","comment":"When no longer updating this state, this method should be invoked to\n cleanup resources no longer needed (e.g., uniqueState no longer \n maintained).","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"store","comment":"","params":[{"type_long":"int","name":"spaceID","comment":"","type_short":"int"},{"type_long":"ghidra.program.model.pcode.Varnode","name":"offsetValue","comment":"","type_short":"Varnode"},{"type_long":"ghidra.program.model.pcode.Varnode","name":"storedValue","comment":"","type_short":"Varnode"},{"type_long":"int","name":"size","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Store a value.  Unique varnodes not permitted once locked.\n@param addressVarnode identifies storage (address, register or unique)\n@param storedValue constant or OperationVarnode","static":false,"name":"store","comment":"Store a value.  Unique varnodes not permitted once locked.","params":[{"type_long":"ghidra.program.model.pcode.Varnode","name":"addressVarnode","comment":"identifies storage (address, register or unique)","type_short":"Varnode"},{"type_long":"ghidra.program.model.pcode.Varnode","name":"storedValue","comment":"constant or OperationVarnode","type_short":"Varnode"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Retrieve the value\/operation stored within the specified space using an offset\n identified by a value\/operation.\n@param spaceID\n@param offsetValue\n@param size\n@return stored value\/operation or null or DUMMY_BYTE_VARNODE","static":false,"name":"get","comment":"Retrieve the value\/operation stored within the specified space using an offset\n identified by a value\/operation.","params":[{"type_long":"int","name":"spaceID","comment":"","type_short":"int"},{"type_long":"ghidra.program.model.pcode.Varnode","name":"offsetValue","comment":"","type_short":"Varnode"},{"type_long":"int","name":"size","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"ghidra.program.model.pcode.Varnode","comment":"stored value\/operation or null or DUMMY_BYTE_VARNODE","type_short":"Varnode"}},{"javadoc":"Retrieve the value\/operation stored within the specified space using an offset\n identified by a value\/operation.\n@param spaceID\n@param offsetValue\n@param size\n@return stored value\/operation or null or DUMMY_BYTE_VARNODE","static":false,"name":"get","comment":"Retrieve the value\/operation stored within the specified space using an offset\n identified by a value\/operation.","params":[{"type_long":"int","name":"spaceID","comment":"","type_short":"int"},{"type_long":"ghidra.program.model.pcode.Varnode","name":"offsetValue","comment":"","type_short":"Varnode"},{"type_long":"int","name":"size","comment":"","type_short":"int"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"ghidra.program.model.pcode.Varnode","comment":"stored value\/operation or null or DUMMY_BYTE_VARNODE","type_short":"Varnode"}},{"javadoc":"Retrieve the value\/operation stored in the specified addressable location (address or register varnode).\n If varnode is a constant, the input argument will be returned.\n Unique varnodes not permitted once locked.\n@param varnode identifies constant or storage (constant, address, register or unique), if VarnodeOperation\n specified null will always be returned.\n@return stored value\/operation","static":false,"name":"get","comment":"Retrieve the value\/operation stored in the specified addressable location (address or register varnode).\n If varnode is a constant, the input argument will be returned.\n Unique varnodes not permitted once locked.","params":[{"type_long":"ghidra.program.model.pcode.Varnode","name":"varnode","comment":"identifies constant or storage (constant, address, register or unique), if VarnodeOperation\n specified null will always be returned.","type_short":"Varnode"}],"throws":[],"return":{"type_long":"ghidra.program.model.pcode.Varnode","comment":"stored value\/operation","type_short":"Varnode"}},{"javadoc":"Retrieve the value\/operation stored in the specified addressable location (address or register varnode).\n If varnode is a constant, the input argument will be returned.\n Unique varnodes not permitted once locked.\n@param varnode identifies constant or storage (constant, address, register or unique), if VarnodeOperation\n specified null will always be returned.\n@return stored value\/operation","static":false,"name":"get","comment":"Retrieve the value\/operation stored in the specified addressable location (address or register varnode).\n If varnode is a constant, the input argument will be returned.\n Unique varnodes not permitted once locked.","params":[{"type_long":"ghidra.program.model.pcode.Varnode","name":"varnode","comment":"identifies constant or storage (constant, address, register or unique), if VarnodeOperation\n specified null will always be returned.","type_short":"Varnode"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"ghidra.program.model.pcode.Varnode","comment":"stored value\/operation","type_short":"Varnode"}},{"javadoc":"","static":false,"name":"getDifferingRegisters","comment":"","params":[{"type_long":"ghidra.util.state.ContextState","name":"other","comment":"","type_short":"ContextState"}],"throws":[],"return":{"type_long":"java.util.List<ghidra.program.model.lang.Register>","comment":"","type_short":"List"}},{"javadoc":"","static":false,"name":"hasDifferingRegisters","comment":"","params":[{"type_long":"ghidra.util.state.ContextState","name":"other","comment":"","type_short":"ContextState"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}}],"name":"ContextState","comment":"","fields":[]}
