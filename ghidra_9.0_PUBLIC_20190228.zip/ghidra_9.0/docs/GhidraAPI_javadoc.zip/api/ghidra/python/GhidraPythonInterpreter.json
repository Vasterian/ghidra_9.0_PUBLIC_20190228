{"implements":[],"javadoc":"A python interpreter meant for Ghidra's use.  Each interpreter you get will have its own\n variable space so they should not interfere with each other.\n <p>\n There is no longer a way to reset an interpreter...it was too complicated to get right.\n Instead, you should {@link #cleanup()} your old interpreter and make a new one.","static":false,"extends":"org.python.util.InteractiveInterpreter","methods":[{"javadoc":"Gets a new GhidraPythonInterpreter instance.\n@return A new GhidraPythonInterpreter. Could be null if it failed to be created.","static":true,"name":"get","comment":"Gets a new GhidraPythonInterpreter instance.","params":[],"throws":[],"return":{"type_long":"ghidra.python.GhidraPythonInterpreter","comment":"A new GhidraPythonInterpreter. Could be null if it failed to be created.","type_short":"GhidraPythonInterpreter"}},{"javadoc":"Pushes (executes) a line of Python to the interpreter.\n@param line the line of Python to push to the interpreter\n@param script a PythonScript from which we load state (or null)\n@return true if more input is needed before execution can occur\n@throws PyException if an unhandled exception occurred while executing the line of python\n@throws IllegalStateException if this interpreter has been cleaned up.","static":false,"name":"push","comment":"Pushes (executes) a line of Python to the interpreter.","params":[{"type_long":"java.lang.String","name":"line","comment":"the line of Python to push to the interpreter","type_short":"String"},{"type_long":"ghidra.python.PythonScript","name":"script","comment":"a PythonScript from which we load state (or null)","type_short":"PythonScript"}],"throws":[{"type_long":"org.python.core.PyException","comment":"if an unhandled exception occurred while executing the line of python","type_short":"PyException"},{"type_long":"java.lang.IllegalStateException","comment":"if this interpreter has been cleaned up.","type_short":"IllegalStateException"}],"return":{"type_long":"boolean","comment":"true if more input is needed before execution can occur","type_short":"boolean"}},{"javadoc":"Execute a python file using this interpreter.\n@param file The python file to execute.\n@param script A PythonScript from which we load state (or null).\n@throws IllegalStateException if this interpreter has been cleaned up.","static":false,"name":"execFile","comment":"Execute a python file using this interpreter.","params":[{"type_long":"generic.jar.ResourceFile","name":"file","comment":"The python file to execute.","type_short":"ResourceFile"},{"type_long":"ghidra.python.PythonScript","name":"script","comment":"A PythonScript from which we load state (or null).","type_short":"PythonScript"}],"throws":[{"type_long":"java.lang.IllegalStateException","comment":"if this interpreter has been cleaned up.","type_short":"IllegalStateException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"cleanup","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"GhidraPythonInterpreter","comment":"A python interpreter meant for Ghidra's use.  Each interpreter you get will have its own\n variable space so they should not interfere with each other.\n \n There is no longer a way to reset an interpreter...it was too complicated to get right.\n Instead, you should #cleanup() your old interpreter and make a new one.","fields":[]}
