{"implements":[],"javadoc":"<code>IndexedLocalFileSystem<\/code> implements a case-sensitive indexed filesystem\n which uses a shallow storage hierarchy with no restriction on file name or path \n length.  This filesystem is identified by the existence of an index file (~index.dat) \n and recovery journal (~index.jrn).","static":false,"extends":"ghidra.framework.store.local.LocalFileSystem","methods":[{"javadoc":"","static":false,"name":"getMaxNameLength","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"dispose","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getIndexImplementationVersion","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":true,"name":"readIndexVersion","comment":"","params":[{"type_long":"java.lang.String","name":"rootPath","comment":"","type_short":"String"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"getItemCount","comment":"","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"getFolderNames","comment":"","params":[{"type_long":"java.lang.String","name":"folderPath","comment":"","type_short":"String"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"java.lang.String[]","comment":"","type_short":"java.lang.String[]"}},{"javadoc":"","static":false,"name":"createFolder","comment":"","params":[{"type_long":"java.lang.String","name":"parentPath","comment":"","type_short":"String"},{"type_long":"java.lang.String","name":"folderName","comment":"","type_short":"String"}],"throws":[{"type_long":"ghidra.util.InvalidNameException","comment":"","type_short":"InvalidNameException"},{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"deleteFolder","comment":"","params":[{"type_long":"java.lang.String","name":"folderPath","comment":"","type_short":"String"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"moveItem","comment":"","params":[{"type_long":"java.lang.String","name":"folderPath","comment":"","type_short":"String"},{"type_long":"java.lang.String","name":"name","comment":"","type_short":"String"},{"type_long":"java.lang.String","name":"newFolderPath","comment":"","type_short":"String"},{"type_long":"java.lang.String","name":"newName","comment":"","type_short":"String"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"},{"type_long":"ghidra.util.InvalidNameException","comment":"","type_short":"InvalidNameException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"moveFolder","comment":"","params":[{"type_long":"java.lang.String","name":"parentPath","comment":"","type_short":"String"},{"type_long":"java.lang.String","name":"folderName","comment":"","type_short":"String"},{"type_long":"java.lang.String","name":"newParentPath","comment":"","type_short":"String"}],"throws":[{"type_long":"ghidra.util.InvalidNameException","comment":"","type_short":"InvalidNameException"},{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"renameFolder","comment":"","params":[{"type_long":"java.lang.String","name":"parentPath","comment":"","type_short":"String"},{"type_long":"java.lang.String","name":"folderName","comment":"","type_short":"String"},{"type_long":"java.lang.String","name":"newFolderName","comment":"","type_short":"String"}],"throws":[{"type_long":"ghidra.util.InvalidNameException","comment":"","type_short":"InvalidNameException"},{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"folderExists","comment":"","params":[{"type_long":"java.lang.String","name":"folderPath","comment":"","type_short":"String"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Determine if the specified directory corresponds to an \n indexed filesystem.\n@param rootPath filesystem root\n@return true if filesystem contains an index (not mangled)","static":true,"name":"isIndexed","comment":"Determine if the specified directory corresponds to an \n indexed filesystem.","params":[{"type_long":"java.lang.String","name":"rootPath","comment":"filesystem root","type_short":"String"}],"throws":[],"return":{"type_long":"boolean","comment":"true if filesystem contains an index (not mangled)","type_short":"boolean"}},{"javadoc":"Determine if the specified directory contains a likely \n indexed filesystem.\n@param rootPath filesystem root\n@return true if filesystem appears to be indexed (not mangled)","static":true,"name":"hasIndexedStructure","comment":"Determine if the specified directory contains a likely \n indexed filesystem.","params":[{"type_long":"java.lang.String","name":"rootPath","comment":"filesystem root","type_short":"String"}],"throws":[],"return":{"type_long":"boolean","comment":"true if filesystem appears to be indexed (not mangled)","type_short":"boolean"}},{"javadoc":"Completely rebuild filesystem index using item information contained\n within indexed property files.  Empty folders will be lost.\n@param rootDir\n@throws IOException","static":true,"name":"rebuild","comment":"Completely rebuild filesystem index using item information contained\n within indexed property files.  Empty folders will be lost.","params":[{"type_long":"java.io.File","name":"rootDir","comment":"","type_short":"File"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}}],"name":"IndexedLocalFileSystem","comment":"IndexedLocalFileSystem implements a case-sensitive indexed filesystem\n which uses a shallow storage hierarchy with no restriction on file name or path \n length.  This filesystem is identified by the existence of an index file (~index.dat) \n and recovery journal (~index.jrn).","fields":[{"type_long":"int","javadoc":"","static":true,"name":"LATEST_INDEX_VERSION","comment":"","type_short":"int","constant_value":"1"}]}
