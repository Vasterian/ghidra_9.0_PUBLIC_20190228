{"implements":[],"javadoc":"Provides for the creation and management of a named lock file. Keep in mind\n that if a lock expires it may be removed without notice.  Care should be\n taken to renew a lock file in a timely manner.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"Constructor.\n@param dir directory containing lock file\n@param name unmangled name of entity which this lock is associated with.","static":false,"name":"<init>","comment":"Constructor.","params":[{"type_long":"java.io.File","name":"dir","comment":"directory containing lock file","type_short":"File"},{"type_long":"java.lang.String","name":"name","comment":"unmangled name of entity which this lock is associated with.","type_short":"String"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Constructor.\n@param dir directory containing lock file\n@param name unmangled name of entity which this lock is associated with.\n@param lockType unique lock identifier (may not contain a '.')","static":false,"name":"<init>","comment":"Constructor.","params":[{"type_long":"java.io.File","name":"dir","comment":"directory containing lock file","type_short":"File"},{"type_long":"java.lang.String","name":"name","comment":"unmangled name of entity which this lock is associated with.","type_short":"String"},{"type_long":"java.lang.String","name":"lockType","comment":"unique lock identifier (may not contain a '.')","type_short":"String"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Constructor.\n@param file file whose lock state will be controlled with this lock file.","static":false,"name":"<init>","comment":"Constructor.","params":[{"type_long":"java.io.File","name":"file","comment":"file whose lock state will be controlled with this lock file.","type_short":"File"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"@param dir directory containing lock file\n@param name of entity which this lock is associated with.\n@return true if any lock exists within dir for the given entity name.","static":true,"name":"isLocked","comment":"","params":[{"type_long":"java.io.File","name":"dir","comment":"directory containing lock file","type_short":"File"},{"type_long":"java.lang.String","name":"name","comment":"of entity which this lock is associated with.","type_short":"String"}],"throws":[],"return":{"type_long":"boolean","comment":"true if any lock exists within dir for the given entity name.","type_short":"boolean"}},{"javadoc":"@param file file whose lock state is controlled with this lock file.\n@return true if any lock exists within dir for the given entity name.","static":true,"name":"isLocked","comment":"","params":[{"type_long":"java.io.File","name":"file","comment":"file whose lock state is controlled with this lock file.","type_short":"File"}],"throws":[],"return":{"type_long":"boolean","comment":"true if any lock exists within dir for the given entity name.","type_short":"boolean"}},{"javadoc":"","static":true,"name":"containsLock","comment":"","params":[{"type_long":"java.io.File","name":"dir","comment":"","type_short":"File"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Determine if lock file was successfully created by this instance.\n This does not quarentee that the lock is still present if more\n than MAX_LOCK_LEASE_PERIOD has lapsed since lock was created.\n@return true if lock has been created, otherwise false.","static":false,"name":"haveLock","comment":"Determine if lock file was successfully created by this instance.\n This does not quarentee that the lock is still present if more\n than MAX_LOCK_LEASE_PERIOD has lapsed since lock was created.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if lock has been created, otherwise false.","type_short":"boolean"}},{"javadoc":"Determine if lock is still in place.\n Verifying the lock may be necessary when slow processes are holding \n the lock without timely renewals.\n@return true if lock is still in place, otherwise false.","static":false,"name":"haveLock","comment":"Determine if lock is still in place.\n Verifying the lock may be necessary when slow processes are holding \n the lock without timely renewals.","params":[{"type_long":"boolean","name":"verify","comment":"","type_short":"boolean"}],"throws":[],"return":{"type_long":"boolean","comment":"true if lock is still in place, otherwise false.","type_short":"boolean"}},{"javadoc":"Return the name of the current lock owner\n or \"<Unknown>\" if not locked or could not be determined.","static":false,"name":"getLockOwner","comment":"Return the name of the current lock owner\n or \"\" if not locked or could not be determined.","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"","static":false,"name":"toString","comment":"","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"Remove the lock file.\n This method should be invoked when the corresponding transaction is complete.","static":false,"name":"removeLock","comment":"Remove the lock file.\n This method should be invoked when the corresponding transaction is complete.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Create the lock file using the default timeout.\n Lock is guaranteed for MAX_LOCK_LEASE_PERIOD seconds.\n@param timeout maximum time in seconds to wait for lock.\n@return true if lock creation was successful.","static":false,"name":"createLock","comment":"Create the lock file using the default timeout.\n Lock is guaranteed for MAX_LOCK_LEASE_PERIOD seconds.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if lock creation was successful.","type_short":"boolean"}},{"javadoc":"Create the lock file.\n If another lock file already exists, wait for it to expire\n within the specified timeout period.  Method will block\n until either the lock is obtained or the timeout period lapses.\n@param timeout maximum time in milliseconds to wait for lock.\n@param hold if true the lock will be held and maintained until\n removed, otherwise it is only guaranteed for MAX_LOCK_LEASE_PERIOD seconds.\n@return true if lock creation was successful.","static":false,"name":"createLock","comment":"Create the lock file.\n If another lock file already exists, wait for it to expire\n within the specified timeout period.  Method will block\n until either the lock is obtained or the timeout period lapses.","params":[{"type_long":"int","name":"timeout","comment":"maximum time in milliseconds to wait for lock.","type_short":"int"},{"type_long":"boolean","name":"hold","comment":"if true the lock will be held and maintained until\n removed, otherwise it is only guaranteed for MAX_LOCK_LEASE_PERIOD seconds.","type_short":"boolean"}],"throws":[],"return":{"type_long":"boolean","comment":"true if lock creation was successful.","type_short":"boolean"}},{"javadoc":"Cleanup lock resources and tasks.\n Invoking this method could prevent stale locks from being removed\n if createLock was invoked with a very short timeout.\n Use of dispose is optional - the associated wait task should \n stop by it self allowing the LockFile object to be finalized.","static":false,"name":"dispose","comment":"Cleanup lock resources and tasks.\n Invoking this method could prevent stale locks from being removed\n if createLock was invoked with a very short timeout.\n Use of dispose is optional - the associated wait task should \n stop by it self allowing the LockFile object to be finalized.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"LockFile","comment":"Provides for the creation and management of a named lock file. Keep in mind\n that if a lock expires it may be removed without notice.  Care should be\n taken to renew a lock file in a timely manner.","fields":[{"type_long":"int","javadoc":"","static":true,"name":"nextInstanceId","comment":"","type_short":"int","constant_value":null}]}
