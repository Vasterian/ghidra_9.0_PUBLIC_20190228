{"implements":["java.util.Observer"],"javadoc":"UI for viewing the contents of very large files efficiently. Pieces of a file are read in using\n the {@link ChunkReader}, which are then displayed line-by-line in {@link FVTable}.  As\n users scroll up\/down, new sections of the file are swapped in as appropriate.\n\n Notes:\n 1. The viewer consists of a simple JTable and a custom JSlider. The table displays lines of\n    text described by {@link Chunk} objects. The number of chunks visible at any given time\n    is restricted by the {@link Chunk#MAX_VISIBLE_CHUNKS} property.\n\n 2. Because only part of the file is loaded into the viewable table at any given time, the\n    built-in scrollbar associated with the scrollpane cannot be used. We want the scroll bar\n    maximum size to reflect the total size of the file, not just what's in view at the time. So\n    we use our own slider implementation ({@link FVSlider}) and manage the\n    size\/position ourselves. If you're asking why a JSlider is used instead of a JScrollPane,\n    it's because the former is more easily configuration for what we need.\n\n 3. Communication between modules (the table, the slider, the viewport utility, etc...) is done\n    almost exclusively via events, using the custom {@link FVEvent} framework.","static":false,"extends":"javax.swing.JPanel","methods":[{"javadoc":"Constructor. Sets up the UI elements and subscribes to events.\n@param reader\n@param model\n@param eventListener\n@throws IOException\n@throws FileNotFoundException","static":false,"name":"<init>","comment":"Constructor. Sets up the UI elements and subscribes to events.","params":[{"type_long":"ghidra.framework.main.logviewer.model.ChunkReader","name":"reader","comment":"","type_short":"ChunkReader"},{"type_long":"ghidra.framework.main.logviewer.model.ChunkModel","name":"model","comment":"","type_short":"ChunkModel"},{"type_long":"ghidra.framework.main.logviewer.event.FVEventListener","name":"eventListener","comment":"","type_short":"FVEventListener"}],"throws":[{"type_long":"java.io.FileNotFoundException","comment":"","type_short":"FileNotFoundException"},{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Part of the Java {@link Observer} pattern. This class is a subscriber to all\n {@link FVEventListener} events, so when those are fired, they will be received here.\n\n Note: this method invokes the {@link #handleFVEvent(FVEvent)} method on the Swing\n thread to ensure that we will make all UI updates on the EDT.\n@param o\n@param arg","static":false,"name":"update","comment":"Part of the Java Observer pattern. This class is a subscriber to all\n FVEventListener events, so when those are fired, they will be received here.\n\n Note: this method invokes the #handleFVEvent(FVEvent) method on the Swing\n thread to ensure that we will make all UI updates on the EDT.","params":[{"type_long":"java.util.Observable","name":"o","comment":"","type_short":"Observable"},{"type_long":"java.lang.Object","name":"arg","comment":"","type_short":"Object"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"FileViewer","comment":"UI for viewing the contents of very large files efficiently. Pieces of a file are read in using\n the ChunkReader, which are then displayed line-by-line in FVTable.  As\n users scroll up\/down, new sections of the file are swapped in as appropriate.\n\n Notes:\n 1. The viewer consists of a simple JTable and a custom JSlider. The table displays lines of\n    text described by Chunk objects. The number of chunks visible at any given time\n    is restricted by the Chunk#MAX_VISIBLE_CHUNKS property.\n\n 2. Because only part of the file is loaded into the viewable table at any given time, the\n    built-in scrollbar associated with the scrollpane cannot be used. We want the scroll bar\n    maximum size to reflect the total size of the file, not just what's in view at the time. So\n    we use our own slider implementation (FVSlider) and manage the\n    size\/position ourselves. If you're asking why a JSlider is used instead of a JScrollPane,\n    it's because the former is more easily configuration for what we need.\n\n 3. Communication between modules (the table, the slider, the viewport utility, etc...) is done\n    almost exclusively via events, using the custom FVEvent framework.","fields":[]}
