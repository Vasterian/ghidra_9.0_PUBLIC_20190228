{"implements":[],"javadoc":"A helper class used by GFilesystem implementors to track mappings between GFile\n instances and the underlying container filesystem's native file objects.\n <p>\n Threadsafe after initial use of {@link #storeFile(String, int, boolean, long, Object) storeFile()}\n by the owning filesystem.\n <p>\n This class also provides filename 'unique-ifying' (per directory) where an auto-incrementing\n number will be added to a file's filename if it is not unique in the directory.\n <p>\n@param <METADATATYPE> the filesystem specific native file object that the user of this\n class wants to be able to correlate with Ghidra {@link GFile} instances.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"Creates a new {@link FileSystemIndexHelper} for the specified {@link GFileSystem}.\n <p>\n A \"root\" directory GFile will be auto-created for the filesystem.\n <p>\n@param fs the {@link GFileSystem} that this index will be for.\n@param fsFSRL the {@link FSRLRoot fsrl} of the filesystem itself.\n (this parameter is explicitly passed here so there is no possibility of trying to call\n back to the fs's {@link GFileSystem#getFSRL()} on a half-constructed filesystem.)","static":false,"name":"<init>","comment":"Creates a new FileSystemIndexHelper for the specified GFileSystem.\n \n A \"root\" directory GFile will be auto-created for the filesystem.\n ","params":[{"type_long":"ghidra.formats.gfilesystem.GFileSystem","name":"fs","comment":"the GFileSystem that this index will be for.","type_short":"GFileSystem"},{"type_long":"ghidra.formats.gfilesystem.FSRLRoot","name":"fsFSRL","comment":"the FSRLRoot of the filesystem itself.\n (this parameter is explicitly passed here so there is no possibility of trying to call\n back to the fs's GFileSystem#getFSRL() on a half-constructed filesystem.)","type_short":"FSRLRoot"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Gets the root {@link GFile} object for this filesystem index.\n@return root {@link GFile} object.","static":false,"name":"getRootDir","comment":"Gets the root GFile object for this filesystem index.","params":[],"throws":[],"return":{"type_long":"ghidra.formats.gfilesystem.GFile","comment":"root GFile object.","type_short":"GFile"}},{"javadoc":"Removes all file info from this index.","static":false,"name":"clear","comment":"Removes all file info from this index.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Number of files in this index.\n@return number of file in this index.","static":false,"name":"getFileCount","comment":"Number of files in this index.","params":[],"throws":[],"return":{"type_long":"int","comment":"number of file in this index.","type_short":"int"}},{"javadoc":"Gets the opaque filesystem specific blob that was associated with the specified file.\n@param f {@link GFile} to look for.\n@return Filesystem specific blob associated with the specified file, or null if not found.","static":false,"name":"getMetadata","comment":"Gets the opaque filesystem specific blob that was associated with the specified file.","params":[{"type_long":"ghidra.formats.gfilesystem.GFile","name":"f","comment":"GFile to look for.","type_short":"GFile"}],"throws":[],"return":{"type_long":"METADATATYPE","comment":"Filesystem specific blob associated with the specified file, or null if not found.","type_short":"METADATATYPE"}},{"javadoc":"Mirror's {@link GFileSystem#getListing(GFile)} interface.\n@param directory {@link GFile} directory to get the list of child files that have been\n added to this index, null means root directory.\n@return {@link List} of GFile files that are in the specified directory, never null.","static":false,"name":"getListing","comment":"Mirror's GFileSystem#getListing(GFile) interface.","params":[{"type_long":"ghidra.formats.gfilesystem.GFile","name":"directory","comment":"GFile directory to get the list of child files that have been\n added to this index, null means root directory.","type_short":"GFile"}],"throws":[],"return":{"type_long":"java.util.List<ghidra.formats.gfilesystem.GFile>","comment":"List of GFile files that are in the specified directory, never null.","type_short":"List"}},{"javadoc":"Mirror's {@link GFileSystem#lookup(String)} interface.\n@param path path and filename of a file to find.\n@return {@link GFile} instance or null if no file was added to the index at that path.","static":false,"name":"lookup","comment":"Mirror's GFileSystem#lookup(String) interface.","params":[{"type_long":"java.lang.String","name":"path","comment":"path and filename of a file to find.","type_short":"String"}],"throws":[],"return":{"type_long":"ghidra.formats.gfilesystem.GFile","comment":"GFile instance or null if no file was added to the index at that path.","type_short":"GFile"}},{"javadoc":"Creates and stores a file entry into in-memory indexes.\n <p>\n The string path will be normalized to forward slashes before being split into\n directory components.\n <p>\n Filenames that are not unique in their directory will have a \"[nnn]\"\n suffix added to the resultant GFile name, where nnn is the file's\n order of occurrence in the container file.\n <p>\n@param path string path and filename of the file being added to the index.  Back\n slashes are normalized to forward slashes.\n@param fileIndex the filesystem specific unique index for this file, or -1\n if not available.\n@param isDirectory boolean true if the new file is a directory\n@param length number of bytes in the file or -1 if not known or directory.\n@param fileInfo opaque blob that will be stored and associated with the new\n GFile instance.\n@return new GFile instance.","static":false,"name":"storeFile","comment":"Creates and stores a file entry into in-memory indexes.\n \n The string path will be normalized to forward slashes before being split into\n directory components.\n \n Filenames that are not unique in their directory will have a \"[nnn]\"\n suffix added to the resultant GFile name, where nnn is the file's\n order of occurrence in the container file.\n ","params":[{"type_long":"java.lang.String","name":"path","comment":"string path and filename of the file being added to the index.  Back\n slashes are normalized to forward slashes.","type_short":"String"},{"type_long":"int","name":"fileIndex","comment":"the filesystem specific unique index for this file, or -1\n if not available.","type_short":"int"},{"type_long":"boolean","name":"isDirectory","comment":"boolean true if the new file is a directory","type_short":"boolean"},{"type_long":"long","name":"length","comment":"number of bytes in the file or -1 if not known or directory.","type_short":"long"},{"type_long":"METADATATYPE","name":"fileInfo","comment":"opaque blob that will be stored and associated with the new\n GFile instance.","type_short":"METADATATYPE"}],"throws":[],"return":{"type_long":"ghidra.formats.gfilesystem.GFileImpl","comment":"new GFile instance.","type_short":"GFileImpl"}},{"javadoc":"Creates and stores a file entry into in-memory indexes.\n <p>\n Use this when you already know the parent directory GFile object.\n <p>\n Filenames that are not unique in their directory will have a \"[nnn]\"\n suffix added to the resultant GFile name, where nnn is the file's\n order of occurrence in the container file.\n <p>\n@param filename the new file's name\n@param parent the new file's parent directory\n@param fileIndex the filesystem specific unique index for this file, or -1\n if not available.\n@param isDirectory boolean true if the new file is a directory\n@param length number of bytes in the file or -1 if not known or directory.\n@param fileInfo opaque blob that will be stored and associated with the new\n GFile instance.\n@return new GFile instance.","static":false,"name":"storeFileWithParent","comment":"Creates and stores a file entry into in-memory indexes.\n \n Use this when you already know the parent directory GFile object.\n \n Filenames that are not unique in their directory will have a \"[nnn]\"\n suffix added to the resultant GFile name, where nnn is the file's\n order of occurrence in the container file.\n ","params":[{"type_long":"java.lang.String","name":"filename","comment":"the new file's name","type_short":"String"},{"type_long":"ghidra.formats.gfilesystem.GFile","name":"parent","comment":"the new file's parent directory","type_short":"GFile"},{"type_long":"int","name":"fileIndex","comment":"the filesystem specific unique index for this file, or -1\n if not available.","type_short":"int"},{"type_long":"boolean","name":"isDirectory","comment":"boolean true if the new file is a directory","type_short":"boolean"},{"type_long":"long","name":"length","comment":"number of bytes in the file or -1 if not known or directory.","type_short":"long"},{"type_long":"METADATATYPE","name":"fileInfo","comment":"opaque blob that will be stored and associated with the new\n GFile instance.","type_short":"METADATATYPE"}],"throws":[],"return":{"type_long":"ghidra.formats.gfilesystem.GFile","comment":"new GFile instance.","type_short":"GFile"}},{"javadoc":"","static":false,"name":"toString","comment":"","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}}],"name":"FileSystemIndexHelper","comment":"A helper class used by GFilesystem implementors to track mappings between GFile\n instances and the underlying container filesystem's native file objects.\n \n Threadsafe after initial use of #storeFile(String, int, boolean, long, Object)\n by the owning filesystem.\n \n This class also provides filename 'unique-ifying' (per directory) where an auto-incrementing\n number will be added to a file's filename if it is not unique in the directory.\n ","fields":[]}
