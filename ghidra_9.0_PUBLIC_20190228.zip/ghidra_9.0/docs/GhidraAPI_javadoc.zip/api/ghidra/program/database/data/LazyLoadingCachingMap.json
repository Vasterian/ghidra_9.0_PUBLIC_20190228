{"implements":[],"javadoc":"Instances of this class will provide a simple map interface to a cached set of key,value\n pairs.  This class requires that the map can be generated from scratch at any time and\n that adding\/removing items from this map is just a mirroring of those changes elsewhere.\n This map is lazy in that it won't load the data until needed and it will use a soft reference\n to maintain the map until such time as the java garbage collector decides to reclaim it.\n <p>\n This class uses a ghidra Lock object to coordinate threaded access when loading the\n underlying map data.  It manages both the lock and its own synchronization to avoid\n race conditions and deadlocks.\n@param <K> the key type.\n@param <V> the value type.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"Adds the key,value pair to the map.  If the map is not loaded, this method will do nothing.\n@param key the key\n@param value the value that is associated with the key.","static":false,"name":"put","comment":"Adds the key,value pair to the map.  If the map is not loaded, this method will do nothing.","params":[{"type_long":"K","name":"key","comment":"the key","type_short":"K"},{"type_long":"V","name":"value","comment":"the value that is associated with the key.","type_short":"V"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Removes the key,value pair from the map as specified by the given key.  If the map is\n currently not loaded, this method will do nothing.\n@param key the key to remove from the map.","static":false,"name":"remove","comment":"Removes the key,value pair from the map as specified by the given key.  If the map is\n currently not loaded, this method will do nothing.","params":[{"type_long":"K","name":"key","comment":"the key to remove from the map.","type_short":"K"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Removes any cached map of values and restores the map to its initial state.","static":false,"name":"clear","comment":"Removes any cached map of values and restores the map to its initial state.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Retrieves the value for the given key.  This will currently load the map if not already\n loaded.\n@param key the key for whose value to retrieve.\n@return the value for the given key.","static":false,"name":"get","comment":"Retrieves the value for the given key.  This will currently load the map if not already\n loaded.","params":[{"type_long":"K","name":"key","comment":"the key for whose value to retrieve.","type_short":"K"}],"throws":[],"return":{"type_long":"V","comment":"the value for the given key.","type_short":"V"}},{"javadoc":"","static":false,"name":"valuesToArray","comment":"","params":[],"throws":[],"return":{"type_long":"V[]","comment":"","type_short":"V[]"}}],"name":"LazyLoadingCachingMap","comment":"Instances of this class will provide a simple map interface to a cached set of key,value\n pairs.  This class requires that the map can be generated from scratch at any time and\n that adding\/removing items from this map is just a mirroring of those changes elsewhere.\n This map is lazy in that it won't load the data until needed and it will use a soft reference\n to maintain the map until such time as the java garbage collector decides to reclaim it.\n \n This class uses a ghidra Lock object to coordinate threaded access when loading the\n underlying map data.  It manages both the lock and its own synchronization to avoid\n race conditions and deadlocks.","fields":[]}
