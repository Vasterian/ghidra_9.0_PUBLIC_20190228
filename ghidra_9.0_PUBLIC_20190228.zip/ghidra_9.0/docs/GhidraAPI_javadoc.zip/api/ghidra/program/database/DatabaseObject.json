{"implements":[],"javadoc":"Base class for an cached object in the database. Database objects have keys.  They are marked\n as invalid when a database cache is cleared and can be revived on a refresh as long\n as they haven't been deleted.  Instantiating an object will cause it to be added\n immediately to the associated cache.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"Constructs a new DatabaseObject and adds it to the specified cache.\n@param cache to be used for this object or null if object will not be cached\n@param key database key to uniquely identify this object","static":false,"name":"<init>","comment":"Constructs a new DatabaseObject and adds it to the specified cache.","params":[{"type_long":"ghidra.program.database.DBObjectCache","name":"cache","comment":"to be used for this object or null if object will not be cached","type_short":"DBObjectCache"},{"type_long":"long","name":"key","comment":"database key to uniquely identify this object","type_short":"long"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Get the database key for this object.","static":false,"name":"getKey","comment":"Get the database key for this object.","params":[],"throws":[],"return":{"type_long":"long","comment":"","type_short":"long"}},{"javadoc":"Returns true if this object has been deleted.  Note: once an object has been deleted,\n it will never be \"refreshed\".  For example, if an object is ever deleted and is\n resurrected via an \"undo\", you will have get a fresh instance of the object.\n@return true if this object has been deleted.","static":false,"name":"isDeleted","comment":"Returns true if this object has been deleted.  Note: once an object has been deleted,\n it will never be \"refreshed\".  For example, if an object is ever deleted and is\n resurrected via an \"undo\", you will have get a fresh instance of the object.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if this object has been deleted.","type_short":"boolean"}},{"javadoc":"Invalidate this object. This does not necessarily mean that this object can\n never be used again.  If the object can refresh itself, it may still be useable.","static":false,"name":"setInvalid","comment":"Invalidate this object. This does not necessarily mean that this object can\n never be used again.  If the object can refresh itself, it may still be useable.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns true if object is currently invalid.  Calling checkIsValid may\n successfully refresh object making it valid.\n@see #checkIsValid()","static":false,"name":"isInvalid","comment":"Returns true if object is currently invalid.  Calling checkIsValid may\n successfully refresh object making it valid.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Checks if this object has been deleted, in which case any use of the object is\n not allowed.\n@throws ConcurrentModificationException if the object has been deleted from the database.","static":false,"name":"checkDeleted","comment":"Checks if this object has been deleted, in which case any use of the object is\n not allowed.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Check whether this object is still valid. If the object is invalid, the object will\n attempt to refresh itself.  If the refresh fails, the object will be marked as deleted.\n@return true if the object is valid.","static":false,"name":"checkIsValid","comment":"Check whether this object is still valid. If the object is invalid, the object will\n attempt to refresh itself.  If the refresh fails, the object will be marked as deleted.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if the object is valid.","type_short":"boolean"}},{"javadoc":"Check whether this object is still valid. If the object is invalid, the object will\n attempt to refresh itself using the specified record.  If the refresh fails, the\n object will be marked as deleted and removed from cache.  If this object is already\n marked as deleted, the record can not be used to refresh the object.\n@param record optional record which may be used to refresh invalid object\n@return true if the object is valid.","static":false,"name":"checkIsValid","comment":"Check whether this object is still valid. If the object is invalid, the object will\n attempt to refresh itself using the specified record.  If the refresh fails, the\n object will be marked as deleted and removed from cache.  If this object is already\n marked as deleted, the record can not be used to refresh the object.","params":[{"type_long":"db.Record","name":"record","comment":"optional record which may be used to refresh invalid object","type_short":"Record"}],"throws":[],"return":{"type_long":"boolean","comment":"true if the object is valid.","type_short":"boolean"}},{"javadoc":"This method provides a cheap (lock free) way to test if an object is valid.  If\n this object is invalid, then the lock will be used to refresh as needed.\n@param lock the lock that will be used if the object needs to be refreshed.","static":false,"name":"validate","comment":"This method provides a cheap (lock free) way to test if an object is valid.  If\n this object is invalid, then the lock will be used to refresh as needed.","params":[{"type_long":"ghidra.util.Lock","name":"lock","comment":"the lock that will be used if the object needs to be refreshed.","type_short":"Lock"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"DatabaseObject","comment":"Base class for an cached object in the database. Database objects have keys.  They are marked\n as invalid when a database cache is cleared and can be revived on a refresh as long\n as they haven't been deleted.  Instantiating an object will cause it to be added\n immediately to the associated cache.","fields":[]}
