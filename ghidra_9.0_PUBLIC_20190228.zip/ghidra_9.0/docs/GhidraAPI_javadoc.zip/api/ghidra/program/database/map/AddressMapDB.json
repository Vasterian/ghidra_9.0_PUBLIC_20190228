{"implements":["ghidra.program.database.map.AddressMap"],"javadoc":"Class used to map addresses to longs and longs to addresses. Several different encodings\n are depending on the nature of the address to be converted.\n The upper 4 bits in the long are used to specify the encoding used. Currently the encoding are:\n 0 - use the original ghidra encoding - used for backwards compatibility.\n 1 - absolute encoding - ignores the image base - used only by the memory map.\n 2 - relocatable - most common encoding - allows address to move with the image base.\n 3 - register - used to encode register addresses\n 4 - stack - used to encode stack addresses (includes namespace information to make them unique between functions)\n 5 - external - used to encode addresses in another program\n 15 - no address - used to represent the null address or a meaningless address.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"Constructs a new AddressMapDB object\n@param handle the handle to the database\n@param openMode the mode that program was opened.\n@param factory the address factory containing all the address spaces for the program.\n@param baseImageOffset the current image base offset.\n@param monitor the progress monitory used for upgrading.\n@throws IOException thrown if a dabase io error occurs.\n@throws VersionException if the database version does not match the expected version.","static":false,"name":"<init>","comment":"Constructs a new AddressMapDB object","params":[{"type_long":"db.DBHandle","name":"handle","comment":"the handle to the database","type_short":"DBHandle"},{"type_long":"int","name":"openMode","comment":"the mode that program was opened.","type_short":"int"},{"type_long":"ghidra.program.model.address.AddressFactory","name":"factory","comment":"the address factory containing all the address spaces for the program.","type_short":"AddressFactory"},{"type_long":"long","name":"baseImageOffset","comment":"the current image base offset.","type_short":"long"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"the progress monitory used for upgrading.","type_short":"TaskMonitor"}],"throws":[{"type_long":"java.io.IOException","comment":"thrown if a dabase io error occurs.","type_short":"IOException"},{"type_long":"ghidra.util.exception.VersionException","comment":"if the database version does not match the expected version.","type_short":"VersionException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Notification when the memory map changes.  If we are segemented, we need to update our\n list of address ranges used for address normalization.\n@param memory","static":false,"name":"memoryMapChanged","comment":"Notification when the memory map changes.  If we are segemented, we need to update our\n list of address ranges used for address normalization.","params":[{"type_long":"ghidra.program.database.mem.MemoryMapDB","name":"mem","comment":"","type_short":"MemoryMapDB"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"invalidateCache","comment":"","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns an address map which may be used during the upgrade of old address\n encodings.  If the address map is up-to-date, then this method will return\n this instance of AddressMapDB.","static":false,"name":"getOldAddressMap","comment":"Returns an address map which may be used during the upgrade of old address\n encodings.  If the address map is up-to-date, then this method will return\n this instance of AddressMapDB.","params":[],"throws":[],"return":{"type_long":"ghidra.program.database.map.AddressMap","comment":"","type_short":"AddressMap"}},{"javadoc":"@see ghidra.program.database.map.AddressMap#isUpgraded()","static":false,"name":"isUpgraded","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"@see ghidra.program.database.map.AddressMap#getKey(ghidra.program.model.address.Address, boolean)","static":false,"name":"getKey","comment":"","params":[{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"","type_short":"Address"},{"type_long":"boolean","name":"create","comment":"","type_short":"boolean"}],"throws":[],"return":{"type_long":"long","comment":"","type_short":"long"}},{"javadoc":"@see ghidra.program.database.map.AddressMap#getAbsoluteEncoding(ghidra.program.model.address.Address, boolean)","static":false,"name":"getAbsoluteEncoding","comment":"","params":[{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"","type_short":"Address"},{"type_long":"boolean","name":"create","comment":"","type_short":"boolean"}],"throws":[],"return":{"type_long":"long","comment":"","type_short":"long"}},{"javadoc":"@see ghidra.program.model.address.AddressMap#decodeAddress(long)","static":false,"name":"decodeAddress","comment":"","params":[{"type_long":"long","name":"value","comment":"","type_short":"long"}],"throws":[],"return":{"type_long":"ghidra.program.model.address.Address","comment":"","type_short":"Address"}},{"javadoc":"Returns the address that was used to generate the given long key. (If the image base was\n moved, then a different address is returned unless the value was encoded using the\n \"absoluteEncoding\" method\n@param value the long value to convert to an address.\n@param useMemorySegmentation if true and the program's default address space is segmented (i.e., SegmentedAddressSpace).\n the address returned will be normalized to defined segmented memory blocks if possible.  This parameter should \n generally always be true except when used by the Memory map objects to avoid recursion problems.","static":false,"name":"decodeAddress","comment":"Returns the address that was used to generate the given long key. (If the image base was\n moved, then a different address is returned unless the value was encoded using the\n \"absoluteEncoding\" method","params":[{"type_long":"long","name":"value","comment":"the long value to convert to an address.","type_short":"long"},{"type_long":"boolean","name":"useMemorySegmentation","comment":"if true and the program's default address space is segmented (i.e., SegmentedAddressSpace).\n the address returned will be normalized to defined segmented memory blocks if possible.  This parameter should \n generally always be true except when used by the Memory map objects to avoid recursion problems.","type_short":"boolean"}],"throws":[],"return":{"type_long":"ghidra.program.model.address.Address","comment":"","type_short":"Address"}},{"javadoc":"","static":false,"name":"hasSameKeyBase","comment":"","params":[{"type_long":"long","name":"addrKey1","comment":"","type_short":"long"},{"type_long":"long","name":"addrKey2","comment":"","type_short":"long"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"isKeyRangeMax","comment":"","params":[{"type_long":"long","name":"addrKey","comment":"","type_short":"long"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"isKeyRangeMin","comment":"","params":[{"type_long":"long","name":"addrKey","comment":"","type_short":"long"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"@see ghidra.program.model.address.AddressMap#getAddressFactory()","static":false,"name":"getAddressFactory","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.address.AddressFactory","comment":"","type_short":"AddressFactory"}},{"javadoc":"@see ghidra.program.database.map.AddressMap#setImageBase(ghidra.program.model.address.Address)","static":false,"name":"setImageBase","comment":"","params":[{"type_long":"ghidra.program.model.address.Address","name":"base","comment":"","type_short":"Address"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"@see ghidra.program.database.map.AddressMap#getModCount()","static":false,"name":"getModCount","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"@see ghidra.program.model.address.AddressMap#findKeyRange(java.util.List, ghidra.program.model.address.Address)","static":false,"name":"findKeyRange","comment":"","params":[{"type_long":"java.util.List<ghidra.program.model.address.KeyRange>","name":"keyRangeList","comment":"","type_short":"List"},{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"","type_short":"Address"}],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"@see ghidra.program.database.map.AddressMap#getKeyRanges(ghidra.program.model.address.Address, ghidra.program.model.address.Address, boolean)","static":false,"name":"getKeyRanges","comment":"","params":[{"type_long":"ghidra.program.model.address.Address","name":"start","comment":"","type_short":"Address"},{"type_long":"ghidra.program.model.address.Address","name":"end","comment":"","type_short":"Address"},{"type_long":"boolean","name":"create","comment":"","type_short":"boolean"}],"throws":[],"return":{"type_long":"java.util.List<ghidra.program.model.address.KeyRange>","comment":"","type_short":"List"}},{"javadoc":"@see ghidra.program.database.map.AddressMap#getKeyRanges(ghidra.program.model.address.AddressSetView, boolean)","static":false,"name":"getKeyRanges","comment":"","params":[{"type_long":"ghidra.program.model.address.AddressSetView","name":"set","comment":"","type_short":"AddressSetView"},{"type_long":"boolean","name":"create","comment":"","type_short":"boolean"}],"throws":[],"return":{"type_long":"java.util.List<ghidra.program.model.address.KeyRange>","comment":"","type_short":"List"}},{"javadoc":"@see ghidra.program.database.map.AddressMap#getKeyRanges(ghidra.program.model.address.Address, ghidra.program.model.address.Address, boolean, boolean)","static":false,"name":"getKeyRanges","comment":"","params":[{"type_long":"ghidra.program.model.address.Address","name":"start","comment":"","type_short":"Address"},{"type_long":"ghidra.program.model.address.Address","name":"end","comment":"","type_short":"Address"},{"type_long":"boolean","name":"absolute","comment":"","type_short":"boolean"},{"type_long":"boolean","name":"create","comment":"","type_short":"boolean"}],"throws":[],"return":{"type_long":"java.util.List<ghidra.program.model.address.KeyRange>","comment":"","type_short":"List"}},{"javadoc":"@see ghidra.program.database.map.AddressMap#getKeyRanges(ghidra.program.model.address.AddressSetView, boolean, boolean)","static":false,"name":"getKeyRanges","comment":"","params":[{"type_long":"ghidra.program.model.address.AddressSetView","name":"set","comment":"","type_short":"AddressSetView"},{"type_long":"boolean","name":"absolute","comment":"","type_short":"boolean"},{"type_long":"boolean","name":"create","comment":"","type_short":"boolean"}],"throws":[],"return":{"type_long":"java.util.List<ghidra.program.model.address.KeyRange>","comment":"","type_short":"List"}},{"javadoc":"@see ghidra.program.database.map.AddressMap#getImageBase()","static":false,"name":"getImageBase","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.address.Address","comment":"","type_short":"Address"}},{"javadoc":"","static":false,"name":"setLanguage","comment":"","params":[{"type_long":"ghidra.program.model.lang.Language","name":"newLanguage","comment":"","type_short":"Language"},{"type_long":"ghidra.program.model.address.AddressFactory","name":"addrFactory","comment":"","type_short":"AddressFactory"},{"type_long":"ghidra.program.util.LanguageTranslator","name":"translator","comment":"","type_short":"LanguageTranslator"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"renameOverlaySpace","comment":"","params":[{"type_long":"java.lang.String","name":"oldName","comment":"","type_short":"String"},{"type_long":"java.lang.String","name":"newName","comment":"","type_short":"String"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"deleteOverlaySpace","comment":"","params":[{"type_long":"java.lang.String","name":"name","comment":"","type_short":"String"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"AddressMapDB","comment":"Class used to map addresses to longs and longs to addresses. Several different encodings\n are depending on the nature of the address to be converted.\n The upper 4 bits in the long are used to specify the encoding used. Currently the encoding are:\n 0 - use the original ghidra encoding - used for backwards compatibility.\n 1 - absolute encoding - ignores the image base - used only by the memory map.\n 2 - relocatable - most common encoding - allows address to move with the image base.\n 3 - register - used to encode register addresses\n 4 - stack - used to encode stack addresses (includes namespace information to make them unique between functions)\n 5 - external - used to encode addresses in another program\n 15 - no address - used to represent the null address or a meaningless address.","fields":[]}
