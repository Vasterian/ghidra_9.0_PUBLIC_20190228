{"implements":[],"javadoc":"<code>LanguageTranslatorFactory<\/code> manages all language translators within Ghidra.  \n Language translators support either a version translation for a single language, or a \n language transition from one language to another.  The following types of translators \n are supported:\n <ul>\n <li>Simple translators are established based upon a translator XML specification file (*.trans).<\/li>\n <li>Explicit translators are class implementations of the LanguageTranslator interface.\n The abstract LanguageTranslatorAdapter has been supplied for this purpose so that \n default mappings can be used if needed.  Such custom translator classes should not be \n created within the 'ghidra.program.util' package since they will be ignored by the factory.<\/li>\n <li>Default translators can be instantiated for languages whose address spaces map to one-another.\n Such default translations may be lossy with register mappings and could result in lost register \n variables and references.<\/li> \n <\/ul>","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"","static":true,"name":"registerLanguageTranslatorFactoryMinion","comment":"","params":[{"type_long":"ghidra.program.util.LanguageTranslatorFactoryMinion","name":"minion","comment":"","type_short":"LanguageTranslatorFactoryMinion"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns the single instance of the OldLanguageFactory.","static":true,"name":"getLanguageTranslatorFactory","comment":"Returns the single instance of the OldLanguageFactory.","params":[],"throws":[],"return":{"type_long":"ghidra.program.util.LanguageTranslatorFactory","comment":"","type_short":"LanguageTranslatorFactory"}},{"javadoc":"Returns a language translator for the transition from an oldLanguage to a newLanguage.\n The toLanguage may be a different language or a newer version of fromLanguage.\n@param fromLanguage old language\n@param toLanguage new language\n@return language translator if transition is supported, otherwise null is returned.","static":false,"name":"getLanguageTranslator","comment":"Returns a language translator for the transition from an oldLanguage to a newLanguage.\n The toLanguage may be a different language or a newer version of fromLanguage.","params":[{"type_long":"ghidra.program.model.lang.Language","name":"fromLanguage","comment":"old language","type_short":"Language"},{"type_long":"ghidra.program.model.lang.Language","name":"toLanguage","comment":"new language","type_short":"Language"}],"throws":[],"return":{"type_long":"ghidra.program.util.LanguageTranslator","comment":"language translator if transition is supported, otherwise null is returned.","type_short":"LanguageTranslator"}},{"javadoc":"Returns a language translation for a language version which is no longer supported.\n@param languageName old unsupported language name\n@param majorVersion language major version within program\n@return language translator if one can be determined, otherwise null is returned.","static":false,"name":"getLanguageTranslator","comment":"Returns a language translation for a language version which is no longer supported.","params":[{"type_long":"ghidra.program.model.lang.LanguageID","name":"languageName","comment":"old unsupported language name","type_short":"LanguageID"},{"type_long":"int","name":"majorVersion","comment":"language major version within program","type_short":"int"}],"throws":[],"return":{"type_long":"ghidra.program.util.LanguageTranslator","comment":"language translator if one can be determined, otherwise null is returned.","type_short":"LanguageTranslator"}}],"name":"LanguageTranslatorFactory","comment":"LanguageTranslatorFactory manages all language translators within Ghidra.  \n Language translators support either a version translation for a single language, or a \n language transition from one language to another.  The following types of translators \n are supported:\n \n Simple translators are established based upon a translator XML specification file (*.trans).\n Explicit translators are class implementations of the LanguageTranslator interface.\n The abstract LanguageTranslatorAdapter has been supplied for this purpose so that \n default mappings can be used if needed.  Such custom translator classes should not be \n created within the 'ghidra.program.util' package since they will be ignored by the factory.\n Default translators can be instantiated for languages whose address spaces map to one-another.\n Such default translations may be lossy with register mappings and could result in lost register \n variables and references. \n ","fields":[{"type_long":"java.lang.String","javadoc":"","static":true,"name":"LANGUAGE_TRANSLATOR_FILE_EXT","comment":"","type_short":"String","constant_value":"\".trans\""}]}
