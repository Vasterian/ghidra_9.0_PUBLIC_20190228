{"implements":[],"javadoc":"<CODE>ProgramDiff<\/CODE> is a class for comparing two programs and\n determining where there are differences between them.\n <P>\n Currently, the differences can be determined if the two programs have\n equivalent address spaces. If the programs have different program context\n registers, the Diff can still occur but will not determine program context\n differences.\n <P>\n@see ghidra.program.util.ProgramDiffFilter","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"<CODE>ProgramDiff<\/CODE> is used to determine the addresses where\n there are differences between two programs.\n Possible differences are:\n the actual bytes at an address, comments, labels, mnemonics,\n references, equates, properties, functions, program context.\n <P>Currently, the differences can be determined only if the address\n spaces match between the programs.\n@param program1 the first program\n@param program2 the second program\n@throws ProgramConflictException indicates that programs\n couldn't be compared to determine the differences.\n <P>For example,\n <P>the two programs have different address spaces.\n@throws IllegalArgumentException if one of the programs is null.","static":false,"name":"<init>","comment":"ProgramDiff is used to determine the addresses where\n there are differences between two programs.\n Possible differences are:\n the actual bytes at an address, comments, labels, mnemonics,\n references, equates, properties, functions, program context.\n Currently, the differences can be determined only if the address\n spaces match between the programs.","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program1","comment":"the first program","type_short":"Program"},{"type_long":"ghidra.program.model.listing.Program","name":"program2","comment":"the second program","type_short":"Program"}],"throws":[{"type_long":"ghidra.program.util.ProgramConflictException","comment":"indicates that programs\n couldn't be compared to determine the differences.\n For example,\n the two programs have different address spaces.","type_short":"ProgramConflictException"},{"type_long":"java.lang.IllegalArgumentException","comment":"if one of the programs is null.","type_short":"IllegalArgumentException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"<CODE>ProgramDiff<\/CODE> is used to determine the addresses where\n there are differences between two programs.\n Possible differences are:\n the actual bytes at an address, comments, labels, mnemonics,\n references, equates, properties, functions, program context.\n <P>Currently, the differences can be determined only if the address\n spaces match between the programs.\n@param program1 the first program\n@param program2 the second program\n@param checkAddressSet the address set to be used to constrain where\n differences are found.\n The addresses in this address set should be derived from program1.\n@throws ProgramConflictException indicates that programs\n couldn't be compared to determine the differences.\n <P>For example,\n <P>the two programs have different address spaces.\n between the two programs, do not match.\n@throws IllegalArgumentException if one of the programs is null.","static":false,"name":"<init>","comment":"ProgramDiff is used to determine the addresses where\n there are differences between two programs.\n Possible differences are:\n the actual bytes at an address, comments, labels, mnemonics,\n references, equates, properties, functions, program context.\n Currently, the differences can be determined only if the address\n spaces match between the programs.","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program1","comment":"the first program","type_short":"Program"},{"type_long":"ghidra.program.model.listing.Program","name":"program2","comment":"the second program","type_short":"Program"},{"type_long":"ghidra.program.model.address.AddressSetView","name":"checkAddressSet","comment":"the address set to be used to constrain where\n differences are found.\n The addresses in this address set should be derived from program1.","type_short":"AddressSetView"}],"throws":[{"type_long":"ghidra.program.util.ProgramConflictException","comment":"indicates that programs\n couldn't be compared to determine the differences.\n For example,\n the two programs have different address spaces.\n between the two programs, do not match.","type_short":"ProgramConflictException"},{"type_long":"java.lang.IllegalArgumentException","comment":"if one of the programs is null.","type_short":"IllegalArgumentException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Return true if the programs to compare have matching memory maps.","static":false,"name":"memoryMatches","comment":"Return true if the programs to compare have matching memory maps.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Get a message indicating any warnings about this PRogramDiff. For example,\n if the program context registers don't match between the programs, the\n string is a message indicating this.\n@return the warning message string. null if no warnings.","static":false,"name":"getWarnings","comment":"Get a message indicating any warnings about this PRogramDiff. For example,\n if the program context registers don't match between the programs, the\n string is a message indicating this.","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"the warning message string. null if no warnings.","type_short":"String"}},{"javadoc":"Returns a new ProgramDiffFilter equal to the one in this program diff.\n The filter indicates which types of differences are to be determined.\n@return a copy of the program diff filter currently in use.","static":false,"name":"getFilter","comment":"Returns a new ProgramDiffFilter equal to the one in this program diff.\n The filter indicates which types of differences are to be determined.","params":[],"throws":[],"return":{"type_long":"ghidra.program.util.ProgramDiffFilter","comment":"a copy of the program diff filter currently in use.","type_short":"ProgramDiffFilter"}},{"javadoc":"Sets the ProgramDiffFilter for this program diff. The filter indicates\n which types of differences are to be determined.\n@param filter the program diff filter","static":false,"name":"setFilter","comment":"Sets the ProgramDiffFilter for this program diff. The filter indicates\n which types of differences are to be determined.","params":[{"type_long":"ghidra.program.util.ProgramDiffFilter","name":"filter","comment":"the program diff filter","type_short":"ProgramDiffFilter"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Gets the first program being compared by the ProgramDiff.\n@return program1.","static":false,"name":"getProgramOne","comment":"Gets the first program being compared by the ProgramDiff.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.listing.Program","comment":"program1.","type_short":"Program"}},{"javadoc":"Gets the second program being compared by the ProgramDiff.\n@return program2.","static":false,"name":"getProgramTwo","comment":"Gets the second program being compared by the ProgramDiff.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.listing.Program","comment":"program2.","type_short":"Program"}},{"javadoc":"Returns the addresses from combining the address sets in program1 and program2.\n@return the addresses for both program1 and program2.\n The addresses in this address set are derived from program1.","static":false,"name":"getCombinedAddresses","comment":"Returns the addresses from combining the address sets in program1 and program2.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.address.AddressSetView","comment":"the addresses for both program1 and program2.\n The addresses in this address set are derived from program1.","type_short":"AddressSetView"}},{"javadoc":"Returns the initialized memory addresses in common between\n program1 and program2.\n@return the initialized memory addresses in common between\n program1 and program2.\n The addresses in the this set are derived from program1.","static":false,"name":"getInitializedInCommon","comment":"Returns the initialized memory addresses in common between\n program1 and program2.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.address.AddressSet","comment":"the initialized memory addresses in common between\n program1 and program2.\n The addresses in the this set are derived from program1.","type_short":"AddressSet"}},{"javadoc":"Returns the addresses in common between program1 and program2.\n@return the addresses in common between program1 and program2.\n The addresses in this address set are derived from program1.","static":false,"name":"getAddressesInCommon","comment":"Returns the addresses in common between program1 and program2.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.address.AddressSet","comment":"the addresses in common between program1 and program2.\n The addresses in this address set are derived from program1.","type_short":"AddressSet"}},{"javadoc":"Returns the addresses that are in program1, but not in program2.\n@return the addresses that are in program1, but not in program2.\n The addresses in this address set are derived from program1.","static":false,"name":"getAddressesOnlyInOne","comment":"Returns the addresses that are in program1, but not in program2.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.address.AddressSet","comment":"the addresses that are in program1, but not in program2.\n The addresses in this address set are derived from program1.","type_short":"AddressSet"}},{"javadoc":"Returns the addresses that are in program2, but not in program1.\n@return the addresses that are in program2, but not in program1.\n The addresses in this address set are derived from program2.","static":false,"name":"getAddressesOnlyInTwo","comment":"Returns the addresses that are in program2, but not in program1.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.address.AddressSet","comment":"the addresses that are in program2, but not in program1.\n The addresses in this address set are derived from program2.","type_short":"AddressSet"}},{"javadoc":"<CODE>getDifferences<\/CODE> is used to determine\n the addresses where there are differences between two programs using\n the current filter. This\n method only indicates that there is a difference at the address, not what\n type of difference it is. Possible differences are:\n the actual bytes at an address, comments, labels, code units,\n references, equates, properties, and program context register values.\n@param monitor the task monitor for indicating the progress of\n determining differences. This monitor also allows the user to cancel if\n the diff takes too long. If no monitor is desired, use null.\n@return an address set of where differences were found between the two\n programs based on the current filter setting.\n The addresses in this address set are derived from program1.\n@throws CancelledException if the user cancelled the Diff.","static":false,"name":"getDifferences","comment":"getDifferences is used to determine\n the addresses where there are differences between two programs using\n the current filter. This\n method only indicates that there is a difference at the address, not what\n type of difference it is. Possible differences are:\n the actual bytes at an address, comments, labels, code units,\n references, equates, properties, and program context register values.","params":[{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"the task monitor for indicating the progress of\n determining differences. This monitor also allows the user to cancel if\n the diff takes too long. If no monitor is desired, use null.","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"if the user cancelled the Diff.","type_short":"CancelledException"}],"return":{"type_long":"ghidra.program.model.address.AddressSetView","comment":"an address set of where differences were found between the two\n programs based on the current filter setting.\n The addresses in this address set are derived from program1.","type_short":"AddressSetView"}},{"javadoc":"<CODE>getDifferences<\/CODE> is used to determine\n the addresses where there are differences between two programs. This\n method only indicates that there is a difference at the address, not what\n type of difference it is. Possible differences are:\n the actual bytes at an address, comments, labels, code units,\n references, equates, properties, tags and program context register values.\n <P>The specified filter will become the new current filter.\n@param filter the filter to use instead of the current filter defined for\n this ProgramDiff.\n@param monitor the task monitor for indicating the progress of\n determining differences. This monitor also allows the user to cancel if\n the diff takes too long. If no monitor is desired, use null.\n@return an address set of where differences were found between the two\n programs based on the specified filter setting.\n The addresses in this address set are derived from program1.\n@throws CancelledException if the user cancelled the Diff.","static":false,"name":"getDifferences","comment":"getDifferences is used to determine\n the addresses where there are differences between two programs. This\n method only indicates that there is a difference at the address, not what\n type of difference it is. Possible differences are:\n the actual bytes at an address, comments, labels, code units,\n references, equates, properties, tags and program context register values.\n The specified filter will become the new current filter.","params":[{"type_long":"ghidra.program.util.ProgramDiffFilter","name":"filter","comment":"the filter to use instead of the current filter defined for\n this ProgramDiff.","type_short":"ProgramDiffFilter"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"the task monitor for indicating the progress of\n determining differences. This monitor also allows the user to cancel if\n the diff takes too long. If no monitor is desired, use null.","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"if the user cancelled the Diff.","type_short":"CancelledException"}],"return":{"type_long":"ghidra.program.model.address.AddressSetView","comment":"an address set of where differences were found between the two\n programs based on the specified filter setting.\n The addresses in this address set are derived from program1.","type_short":"AddressSetView"}},{"javadoc":"Returns an address set indicating where the user defined property differs\n between the Diff's two programs within the specified address set.\n@param property the user defined property\n@param addrs the address set for limiting checking.\n The addresses in this address set should be derived from program1.\n@param monitor the progress monitor.\n@return the address set indicating where the property differs.\n The addresses in this address set are derived from program1.\n@throws CancelledException if the user cancelled the Diff.","static":false,"name":"getUserDefinedDiffs","comment":"Returns an address set indicating where the user defined property differs\n between the Diff's two programs within the specified address set.","params":[{"type_long":"java.lang.String","name":"property","comment":"the user defined property","type_short":"String"},{"type_long":"ghidra.program.model.address.AddressSetView","name":"addrs","comment":"the address set for limiting checking.\n The addresses in this address set should be derived from program1.","type_short":"AddressSetView"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"the progress monitor.","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"if the user cancelled the Diff.","type_short":"CancelledException"}],"return":{"type_long":"ghidra.program.model.address.AddressSetView","comment":"the address set indicating where the property differs.\n The addresses in this address set are derived from program1.","type_short":"AddressSetView"}},{"javadoc":"Creates an address set indicating the differences between program1 and\n program2 of the specified type.\n@param diffType the type of difference to look for between the programs.\n@param addrs the addresses to check for differences.\n The addresses in this address set should be derived from program1.\n@param monitor the task monitor for indicating the progress of\n determining differences. This monitor reports the progress to the user.\n@return the address set indicating the differences.\n The addresses in this address set are derived from program1.\n@throws CancelledException if the user cancelled the Diff.","static":false,"name":"getTypeDiffs","comment":"Creates an address set indicating the differences between program1 and\n program2 of the specified type.","params":[{"type_long":"int","name":"diffType","comment":"the type of difference to look for between the programs.","type_short":"int"},{"type_long":"ghidra.program.model.address.AddressSetView","name":"addrs","comment":"the addresses to check for differences.\n The addresses in this address set should be derived from program1.","type_short":"AddressSetView"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"the task monitor for indicating the progress of\n determining differences. This monitor reports the progress to the user.","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.program.util.ProgramConflictException","comment":"","type_short":"ProgramConflictException"},{"type_long":"ghidra.util.exception.CancelledException","comment":"if the user cancelled the Diff.","type_short":"CancelledException"}],"return":{"type_long":"ghidra.program.model.address.AddressSetView","comment":"the address set indicating the differences.\n The addresses in this address set are derived from program1.","type_short":"AddressSetView"}},{"javadoc":"Get the address set that the diff process is limited to when checking for differences.\n Returns null if the diff is not limited (i.e. the entire program is being diffed).\n The addresses in the returned address set are derived from program1.","static":false,"name":"getLimitedAddressSet","comment":"Get the address set that the diff process is limited to when checking for differences.\n Returns null if the diff is not limited (i.e. the entire program is being diffed).\n The addresses in the returned address set are derived from program1.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.address.AddressSetView","comment":"","type_short":"AddressSetView"}},{"javadoc":"Get the address set that the getDifferences method results are restricted to.\n null indicates no current restrictions.\n The addresses in the returned address set are derived from program1.","static":false,"name":"getRestrictedAddressSet","comment":"Get the address set that the getDifferences method results are restricted to.\n null indicates no current restrictions.\n The addresses in the returned address set are derived from program1.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.address.AddressSetView","comment":"","type_short":"AddressSetView"}},{"javadoc":"Get the address set that contains addresses that should not be indicated as\n having any differences.\n The addresses in this address set are derived from program1.","static":false,"name":"getIgnoreAddressSet","comment":"Get the address set that contains addresses that should not be indicated as\n having any differences.\n The addresses in this address set are derived from program1.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.address.AddressSetView","comment":"","type_short":"AddressSetView"}},{"javadoc":"Set the indicated additional addresses that should not report any\n differences that are found at them.\n@param addrs the set of addresses to add to the current ignore set.\n The addresses in this address set should be derived from program1.","static":false,"name":"ignore","comment":"Set the indicated additional addresses that should not report any\n differences that are found at them.","params":[{"type_long":"ghidra.program.model.address.AddressSetView","name":"addrs","comment":"the set of addresses to add to the current ignore set.\n The addresses in this address set should be derived from program1.","type_short":"AddressSetView"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns whether the last <CODE>getDifferences<\/CODE> call was cancelled.\n If a TaskMonitor displays a progress dialog to the user, then the cancel\n button could have been pressed.\n@return true if the last <CODE>getDifferences<\/CODE> call was cancelled.","static":false,"name":"isCancelled","comment":"Returns whether the last getDifferences call was cancelled.\n If a TaskMonitor displays a progress dialog to the user, then the cancel\n button could have been pressed.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if the last getDifferences call was cancelled.","type_short":"boolean"}},{"javadoc":"Checks the task associated with the indicated monitor to determine if it has\n been canceled.\n@param monitor the task monitor, associated with getting differences from this Diff,\n to be checked\n@throws CancelledException if the getDifferences() task has been canceled by the user.","static":false,"name":"checkCancelled","comment":"Checks the task associated with the indicated monitor to determine if it has\n been canceled.","params":[{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"the task monitor, associated with getting differences from this Diff,\n to be checked","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"if the getDifferences() task has been canceled by the user.","type_short":"CancelledException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Print the differences that have been found so far by calls to\n <CODE>getDifferences<\/CODE>.","static":false,"name":"printDifferences","comment":"Print the differences that have been found so far by calls to\n getDifferences.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Print the differences matching the types indicated that were found thus\n far by all calls to <CODE>getDifferences<\/CODE>.\n@param type the type(s) of differences we want to see.\n Valid types are: BYTE_DIFFS, CODE_UNIT_DIFFS,\n COMMENT_DIFFS, REFERENCE_DIFFS, USER_DEFINED_DIFFS,\n SYMBOL_DIFFS, EQUATE_DIFFS, PROGRAM_CONTEXT_DIFFS.","static":false,"name":"printKnownDifferences","comment":"Print the differences matching the types indicated that were found thus\n far by all calls to getDifferences.","params":[{"type_long":"int","name":"type","comment":"the type(s) of differences we want to see.\n Valid types are: BYTE_DIFFS, CODE_UNIT_DIFFS,\n COMMENT_DIFFS, REFERENCE_DIFFS, USER_DEFINED_DIFFS,\n SYMBOL_DIFFS, EQUATE_DIFFS, PROGRAM_CONTEXT_DIFFS.","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Print the differences matching the types indicated that were found thus\n far by all calls to getDifferences. The differences are grouped by\n each of the primary difference types.\n@param type the type(s) of differences we want to see.\n Valid types are: BYTE_DIFFS, CODE_UNIT_DIFFS,\n COMMENT_DIFFS, REFERENCE_DIFFS, USER_DEFINED_DIFFS,\n SYMBOL_DIFFS, EQUATE_DIFFS, PROGRAM_CONTEXT_DIFFS.","static":false,"name":"printKnownDifferencesByType","comment":"Print the differences matching the types indicated that were found thus\n far by all calls to getDifferences. The differences are grouped by\n each of the primary difference types.","params":[{"type_long":"int","name":"type","comment":"the type(s) of differences we want to see.\n Valid types are: BYTE_DIFFS, CODE_UNIT_DIFFS,\n COMMENT_DIFFS, REFERENCE_DIFFS, USER_DEFINED_DIFFS,\n SYMBOL_DIFFS, EQUATE_DIFFS, PROGRAM_CONTEXT_DIFFS.","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Determines if the two programs have the same equates specified at\n the indicated address and operand\n@param address the address\n This address should be derived from program1.\n@param opIndex the operand index\n@return true if both programs have the same operands.","static":false,"name":"isSameOperandEquates","comment":"Determines if the two programs have the same equates specified at\n the indicated address and operand","params":[{"type_long":"ghidra.program.model.address.Address","name":"address","comment":"the address\n This address should be derived from program1.","type_short":"Address"},{"type_long":"int","name":"opIndex","comment":"the operand index","type_short":"int"}],"throws":[],"return":{"type_long":"boolean","comment":"true if both programs have the same operands.","type_short":"boolean"}},{"javadoc":"","static":true,"name":"equivalentFunctions","comment":"","params":[{"type_long":"ghidra.program.model.listing.Function","name":"f1","comment":"","type_short":"Function"},{"type_long":"ghidra.program.model.listing.Function","name":"f2","comment":"","type_short":"Function"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":true,"name":"equivalentFunctions","comment":"","params":[{"type_long":"ghidra.program.model.listing.Function","name":"f1","comment":"","type_short":"Function"},{"type_long":"ghidra.program.model.listing.Function","name":"f2","comment":"","type_short":"Function"},{"type_long":"boolean","name":"ignoreName","comment":"","type_short":"boolean"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Compares two thunk functions from different programs to determine if they are \n equivalent to each other (effectively the same thunk function in the other program).\n@param thunkFunction1 the first thunk function\n@param thunkFunction2 the second thunk function\n@return true if the functions are equivalent thunk functions.","static":true,"name":"isEquivalentThunk","comment":"Compares two thunk functions from different programs to determine if they are \n equivalent to each other (effectively the same thunk function in the other program).","params":[{"type_long":"ghidra.program.model.listing.Function","name":"thunkFunction1","comment":"the first thunk function","type_short":"Function"},{"type_long":"ghidra.program.model.listing.Function","name":"thunkFunction2","comment":"the second thunk function","type_short":"Function"}],"throws":[],"return":{"type_long":"boolean","comment":"true if the functions are equivalent thunk functions.","type_short":"boolean"}},{"javadoc":"","static":true,"name":"sameFunctionNames","comment":"","params":[{"type_long":"ghidra.program.model.listing.Function","name":"f1","comment":"","type_short":"Function"},{"type_long":"ghidra.program.model.listing.Function","name":"f2","comment":"","type_short":"Function"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Compares an array of references from program1 with an array of references from program2 to see if they are equivalent.\n@param refs1 program1 array of references\n@param refs2 program2 array of references\n@return true if the arrays of references are equal.","static":false,"name":"equalRefArrays","comment":"Compares an array of references from program1 with an array of references from program2 to see if they are equivalent.","params":[{"type_long":"ghidra.program.model.symbol.Reference[]","name":"refs1","comment":"program1 array of references","type_short":"ghidra.program.model.symbol.Reference[]"},{"type_long":"ghidra.program.model.symbol.Reference[]","name":"refs2","comment":"program2 array of references","type_short":"ghidra.program.model.symbol.Reference[]"}],"throws":[],"return":{"type_long":"boolean","comment":"true if the arrays of references are equal.","type_short":"boolean"}},{"javadoc":"Compares reference from program1 with reference from program2 to see if they are equivalent.\n@param ref1 program1 reference\n@param ref2 program2 reference\n@return true if they are equivalent","static":false,"name":"equalRefs","comment":"Compares reference from program1 with reference from program2 to see if they are equivalent.","params":[{"type_long":"ghidra.program.model.symbol.Reference","name":"ref1","comment":"program1 reference","type_short":"Reference"},{"type_long":"ghidra.program.model.symbol.Reference","name":"ref2","comment":"program2 reference","type_short":"Reference"}],"throws":[],"return":{"type_long":"boolean","comment":"true if they are equivalent","type_short":"boolean"}},{"javadoc":"Gets the references that need to be checked for differences from those that are handed\n to it via the refs parameter.\n@param refs the references before removing those that we don't want to diff.\n@return only the references that should be part of the diff.","static":true,"name":"getDiffRefs","comment":"Gets the references that need to be checked for differences from those that are handed\n to it via the refs parameter.","params":[{"type_long":"ghidra.program.model.symbol.Reference[]","name":"refs","comment":"the references before removing those that we don't want to diff.","type_short":"ghidra.program.model.symbol.Reference[]"}],"throws":[],"return":{"type_long":"ghidra.program.model.symbol.Reference[]","comment":"only the references that should be part of the diff.","type_short":"ghidra.program.model.symbol.Reference[]"}}],"name":"ProgramDiff","comment":"ProgramDiff is a class for comparing two programs and\n determining where there are differences between them.\n \n Currently, the differences can be determined if the two programs have\n equivalent address spaces. If the programs have different program context\n registers, the Diff can still occur but will not determine program context\n differences.\n ","fields":[]}
