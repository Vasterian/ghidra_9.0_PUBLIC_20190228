{"implements":[],"javadoc":"","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"Construct a VariableStorageConflicts object for the variables contained within two\n functions.\n@param variablesList1\n@param variablesList2\n@param ignoreParamToParamConflicts if true param-to-param overlaps will be ignored unless\n a param-to-local overlap occurs in which case all params will be pulled in to the\n overlap.  If true, it is assumed that the current overlap iteration was initiated by\n a parameter overlap check.\n@param monitor\n@throws CancelledException","static":false,"name":"<init>","comment":"Construct a VariableStorageConflicts object for the variables contained within two\n functions.","params":[{"type_long":"java.util.List<ghidra.program.model.listing.Variable>","name":"variablesList1","comment":"","type_short":"List"},{"type_long":"java.util.List<ghidra.program.model.listing.Variable>","name":"variablesList2","comment":"","type_short":"List"},{"type_long":"boolean","name":"ignoreParamToParamConflicts","comment":"if true param-to-param overlaps will be ignored unless\n a param-to-local overlap occurs in which case all params will be pulled in to the\n overlap.  If true, it is assumed that the current overlap iteration was initiated by\n a parameter overlap check.","type_short":"boolean"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getOverlappingVariables","comment":"","params":[],"throws":[],"return":{"type_long":"java.util.List<generic.stl.Pair<java.util.List<ghidra.program.model.listing.Variable>,java.util.List<ghidra.program.model.listing.Variable>>>","comment":"","type_short":"List"}},{"javadoc":"","static":false,"name":"hasOverlapConflict","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"hasParameterConflict","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Check to see if either var1 or var2 is contained within the conflicted\/overlapping\n set of variables.  In general, one of the specified variables should be null.\n@param var1 a variable which corresponds to function1 at time of construction or null\n@param var2 a variable which corresponds to function2 at time of construction or null\n@return true if either variable is contained within the conflicted\/overlapping\n set of variables.","static":false,"name":"isConflicted","comment":"Check to see if either var1 or var2 is contained within the conflicted\/overlapping\n set of variables.  In general, one of the specified variables should be null.","params":[{"type_long":"ghidra.program.model.listing.Variable","name":"var1","comment":"a variable which corresponds to function1 at time of construction or null","type_short":"Variable"},{"type_long":"ghidra.program.model.listing.Variable","name":"var2","comment":"a variable which corresponds to function2 at time of construction or null","type_short":"Variable"}],"throws":[],"return":{"type_long":"boolean","comment":"true if either variable is contained within the conflicted\/overlapping\n set of variables.","type_short":"boolean"}}],"name":"VariableStorageConflicts","comment":"","fields":[]}
