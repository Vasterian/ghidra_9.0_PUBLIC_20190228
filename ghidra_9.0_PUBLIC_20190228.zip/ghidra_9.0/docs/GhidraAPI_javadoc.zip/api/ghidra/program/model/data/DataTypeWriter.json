{"implements":[],"javadoc":"A class used to convert data types into ANSI-C.\n \n The ANSI-C code should compile on most platforms.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"Constructs a new instance of this class using the\n given writer. The default annotation handler is used.\n@param dtm data-type manager corresponding to target program or null\n for default\n@param writer the writer to use when writing data types\n@throws IOException","static":false,"name":"<init>","comment":"Constructs a new instance of this class using the\n given writer. The default annotation handler is used.","params":[{"type_long":"ghidra.program.model.data.DataTypeManager","name":"dtm","comment":"data-type manager corresponding to target program or null\n for default","type_short":"DataTypeManager"},{"type_long":"java.io.Writer","name":"writer","comment":"the writer to use when writing data types","type_short":"Writer"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Constructs a new instance of this class using the\n given writer. The default annotation handler is used.\n@param dtm data-type manager corresponding to target program or null\n for default\n@param writer the writer to use when writing data types\n@param cppStyleComments whether to use C++ style comments\n@throws IOException","static":false,"name":"<init>","comment":"Constructs a new instance of this class using the\n given writer. The default annotation handler is used.","params":[{"type_long":"ghidra.program.model.data.DataTypeManager","name":"dtm","comment":"data-type manager corresponding to target program or null\n for default","type_short":"DataTypeManager"},{"type_long":"java.io.Writer","name":"writer","comment":"the writer to use when writing data types","type_short":"Writer"},{"type_long":"boolean","name":"cppStyleComments","comment":"whether to use C++ style comments","type_short":"boolean"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Constructs a new instance of this class using the\n given writer and annotation handler\n@param dtm data-type manager corresponding to target program or null\n for default\n@param writer the writer to use when writing data types\n@param annotator the annotation handler to use to annotate the data types\n@throws IOException","static":false,"name":"<init>","comment":"Constructs a new instance of this class using the\n given writer and annotation handler","params":[{"type_long":"ghidra.program.model.data.DataTypeManager","name":"dtm","comment":"data-type manager corresponding to target program or null\n for default","type_short":"DataTypeManager"},{"type_long":"java.io.Writer","name":"writer","comment":"the writer to use when writing data types","type_short":"Writer"},{"type_long":"ghidra.program.model.data.AnnotationHandler","name":"annotator","comment":"the annotation handler to use to annotate the data types","type_short":"AnnotationHandler"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Constructs a new instance of this class using the\n given writer and annotation handler\n@param dtm data-type manager corresponding to target program or null\n for default\n@param writer the writer to use when writing data types\n@param annotator the annotation handler to use to annotate the data types\n@param cppStyleComments whether to use C++ style comments\n@throws IOException","static":false,"name":"<init>","comment":"Constructs a new instance of this class using the\n given writer and annotation handler","params":[{"type_long":"ghidra.program.model.data.DataTypeManager","name":"dtm","comment":"data-type manager corresponding to target program or null\n for default","type_short":"DataTypeManager"},{"type_long":"java.io.Writer","name":"writer","comment":"the writer to use when writing data types","type_short":"Writer"},{"type_long":"ghidra.program.model.data.AnnotationHandler","name":"annotator","comment":"the annotation handler to use to annotate the data types","type_short":"AnnotationHandler"},{"type_long":"boolean","name":"cppStyleComments","comment":"whether to use C++ style comments","type_short":"boolean"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Converts all data types in the data type manager into ANSI-C code.\n@param writer to writer to write the ANSI-C code\n@param monitor the task monitor\n@throws IOException if an I\/O error occurs when writing the data types to the specified writer\n@throws CancelledException","static":false,"name":"write","comment":"Converts all data types in the data type manager into ANSI-C code.","params":[{"type_long":"ghidra.program.model.data.DataTypeManager","name":"dataTypeManager","comment":"","type_short":"DataTypeManager"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"the task monitor","type_short":"TaskMonitor"}],"throws":[{"type_long":"java.io.IOException","comment":"if an I\/O error occurs when writing the data types to the specified writer","type_short":"IOException"},{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Converts all data types in the category into ANSI-C code.\n@param writer to writer to write the ANSI-C code\n@param monitor the task monitor\n@throws IOException if an I\/O error occurs when writing the data types to the specified writer\n@throws CancelledException","static":false,"name":"write","comment":"Converts all data types in the category into ANSI-C code.","params":[{"type_long":"ghidra.program.model.data.Category","name":"category","comment":"","type_short":"Category"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"the task monitor","type_short":"TaskMonitor"}],"throws":[{"type_long":"java.io.IOException","comment":"if an I\/O error occurs when writing the data types to the specified writer","type_short":"IOException"},{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Converts all data types in the array into ANSI-C code.\n@param writer to writer to write the C code\n@param monitor the task monitor\n@throws IOException if an I\/O error occurs when writing the data types to the specified writer\n@throws CancelledException","static":false,"name":"write","comment":"Converts all data types in the array into ANSI-C code.","params":[{"type_long":"ghidra.program.model.data.DataType[]","name":"dataTypes","comment":"","type_short":"ghidra.program.model.data.DataType[]"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"the task monitor","type_short":"TaskMonitor"}],"throws":[{"type_long":"java.io.IOException","comment":"if an I\/O error occurs when writing the data types to the specified writer","type_short":"IOException"},{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Converts all data types in the list into ANSI-C code.\n@param writer to writer to write the ANSI-C code\n@param monitor the task monitor\n@throws IOException if an I\/O error occurs when writing the data types to the specified writer\n@throws CancelledException","static":false,"name":"write","comment":"Converts all data types in the list into ANSI-C code.","params":[{"type_long":"java.util.List<ghidra.program.model.data.DataType>","name":"dataTypes","comment":"","type_short":"List"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"the task monitor","type_short":"TaskMonitor"}],"throws":[{"type_long":"java.io.IOException","comment":"if an I\/O error occurs when writing the data types to the specified writer","type_short":"IOException"},{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"write","comment":"","params":[{"type_long":"java.util.List<ghidra.program.model.data.DataType>","name":"dataTypes","comment":"","type_short":"List"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"},{"type_long":"boolean","name":"throwExceptionOnInvalidType","comment":"","type_short":"boolean"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"},{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"DataTypeWriter","comment":"A class used to convert data types into ANSI-C.\n \n The ANSI-C code should compile on most platforms.","fields":[]}
