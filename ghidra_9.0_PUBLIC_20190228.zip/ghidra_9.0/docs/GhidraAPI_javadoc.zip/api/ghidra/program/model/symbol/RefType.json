{"implements":[],"javadoc":"Class to define reference types.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"Get the int value for this RefType object.","static":false,"name":"getValue","comment":"Get the int value for this RefType object.","params":[],"throws":[],"return":{"type_long":"byte","comment":"","type_short":"byte"}},{"javadoc":"Returns true if the reference is to data","static":false,"name":"isData","comment":"Returns true if the reference is to data","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Returns true if the reference is a read.","static":false,"name":"isRead","comment":"Returns true if the reference is a read.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Returns true if the reference is a write.","static":false,"name":"isWrite","comment":"Returns true if the reference is a write.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Returns true if the reference is indirect","static":false,"name":"isIndirect","comment":"Returns true if the reference is indirect","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Returns true if the reference is an instruction flow reference.","static":false,"name":"isFlow","comment":"Returns true if the reference is an instruction flow reference.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Return true if this flow type is one that does not cause\n a break in control flow.","static":false,"name":"isFallthrough","comment":"Return true if this flow type is one that does not cause\n a break in control flow.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Returns true if this flow type can fall through.","static":false,"name":"hasFallthrough","comment":"Returns true if this flow type can fall through.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Returns true if the flow is call","static":false,"name":"isCall","comment":"Returns true if the flow is call","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Returns true if the flow is jump","static":false,"name":"isJump","comment":"Returns true if the flow is jump","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Returns true if the flow is an unconditional call or jump.","static":false,"name":"isUnConditional","comment":"Returns true if the flow is an unconditional call or jump.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Returns true if the flow is a conditiona call or jump.","static":false,"name":"isConditional","comment":"Returns true if the flow is a conditiona call or jump.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Returns true if the flow is a computed call or compute jump.","static":false,"name":"isComputed","comment":"Returns true if the flow is a computed call or compute jump.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"returns true if this instruction terminates.","static":false,"name":"isTerminal","comment":"returns true if this instruction terminates.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"@see java.lang.Object#equals(java.lang.Object)","static":false,"name":"equals","comment":"","params":[{"type_long":"java.lang.Object","name":"obj","comment":"","type_short":"Object"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"@see java.lang.Object#hashCode()","static":false,"name":"hashCode","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"@see java.lang.Object#toString()","static":false,"name":"toString","comment":"","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"Returns name of ref-type","static":false,"name":"getName","comment":"Returns name of ref-type","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}}],"name":"RefType","comment":"Class to define reference types.","fields":[{"type_long":"ghidra.program.model.symbol.FlowType","javadoc":"","static":true,"name":"INVALID","comment":"","type_short":"FlowType","constant_value":null},{"type_long":"ghidra.program.model.symbol.FlowType","javadoc":"","static":true,"name":"FLOW","comment":"","type_short":"FlowType","constant_value":null},{"type_long":"ghidra.program.model.symbol.FlowType","javadoc":"","static":true,"name":"FALL_THROUGH","comment":"","type_short":"FlowType","constant_value":null},{"type_long":"ghidra.program.model.symbol.FlowType","javadoc":"","static":true,"name":"UNCONDITIONAL_JUMP","comment":"","type_short":"FlowType","constant_value":null},{"type_long":"ghidra.program.model.symbol.FlowType","javadoc":"","static":true,"name":"CONDITIONAL_JUMP","comment":"","type_short":"FlowType","constant_value":null},{"type_long":"ghidra.program.model.symbol.FlowType","javadoc":"","static":true,"name":"UNCONDITIONAL_CALL","comment":"","type_short":"FlowType","constant_value":null},{"type_long":"ghidra.program.model.symbol.FlowType","javadoc":"","static":true,"name":"CONDITIONAL_CALL","comment":"","type_short":"FlowType","constant_value":null},{"type_long":"ghidra.program.model.symbol.FlowType","javadoc":"","static":true,"name":"TERMINATOR","comment":"","type_short":"FlowType","constant_value":null},{"type_long":"ghidra.program.model.symbol.FlowType","javadoc":"","static":true,"name":"COMPUTED_JUMP","comment":"","type_short":"FlowType","constant_value":null},{"type_long":"ghidra.program.model.symbol.FlowType","javadoc":"","static":true,"name":"CONDITIONAL_TERMINATOR","comment":"","type_short":"FlowType","constant_value":null},{"type_long":"ghidra.program.model.symbol.FlowType","javadoc":"","static":true,"name":"COMPUTED_CALL","comment":"","type_short":"FlowType","constant_value":null},{"type_long":"ghidra.program.model.symbol.FlowType","javadoc":"","static":true,"name":"CALL_TERMINATOR","comment":"","type_short":"FlowType","constant_value":null},{"type_long":"ghidra.program.model.symbol.FlowType","javadoc":"","static":true,"name":"COMPUTED_CALL_TERMINATOR","comment":"","type_short":"FlowType","constant_value":null},{"type_long":"ghidra.program.model.symbol.FlowType","javadoc":"","static":true,"name":"CONDITIONAL_CALL_TERMINATOR","comment":"","type_short":"FlowType","constant_value":null},{"type_long":"ghidra.program.model.symbol.FlowType","javadoc":"","static":true,"name":"CONDITIONAL_COMPUTED_CALL","comment":"","type_short":"FlowType","constant_value":null},{"type_long":"ghidra.program.model.symbol.FlowType","javadoc":"","static":true,"name":"CONDITIONAL_COMPUTED_JUMP","comment":"","type_short":"FlowType","constant_value":null},{"type_long":"ghidra.program.model.symbol.FlowType","javadoc":"","static":true,"name":"JUMP_TERMINATOR","comment":"","type_short":"FlowType","constant_value":null},{"type_long":"ghidra.program.model.symbol.FlowType","javadoc":"","static":true,"name":"INDIRECTION","comment":"","type_short":"FlowType","constant_value":null},{"type_long":"ghidra.program.model.symbol.RefType","javadoc":"Reference type is unknown.","static":true,"name":"THUNK","comment":"Reference type is unknown.","type_short":"RefType","constant_value":null},{"type_long":"ghidra.program.model.symbol.RefType","javadoc":"Reference type assigned when data access is unknown.","static":true,"name":"DATA","comment":"Reference type assigned when data access is unknown.","type_short":"RefType","constant_value":null},{"type_long":"ghidra.program.model.symbol.RefType","javadoc":"Reference type assigned when data (constant or pointer) is passed to a function","static":true,"name":"PARAM","comment":"Reference type assigned when data (constant or pointer) is passed to a function","type_short":"RefType","constant_value":null},{"type_long":"ghidra.program.model.symbol.RefType","javadoc":"","static":true,"name":"DATA_IND","comment":"","type_short":"RefType","constant_value":null},{"type_long":"ghidra.program.model.symbol.RefType","javadoc":"Reference type assigned when data is being read.","static":true,"name":"READ","comment":"Reference type assigned when data is being read.","type_short":"RefType","constant_value":null},{"type_long":"ghidra.program.model.symbol.RefType","javadoc":"Reference type assigned when data is being written.","static":true,"name":"WRITE","comment":"Reference type assigned when data is being written.","type_short":"RefType","constant_value":null},{"type_long":"ghidra.program.model.symbol.RefType","javadoc":"Reference type assigned when data is read and written.","static":true,"name":"READ_WRITE","comment":"Reference type assigned when data is read and written.","type_short":"RefType","constant_value":null},{"type_long":"ghidra.program.model.symbol.RefType","javadoc":"Reference type assigned when data is being read.","static":true,"name":"READ_IND","comment":"Reference type assigned when data is being read.","type_short":"RefType","constant_value":null},{"type_long":"ghidra.program.model.symbol.RefType","javadoc":"Reference type assigned when data is being written.","static":true,"name":"WRITE_IND","comment":"Reference type assigned when data is being written.","type_short":"RefType","constant_value":null},{"type_long":"ghidra.program.model.symbol.RefType","javadoc":"Reference type assigned when data is read and written.","static":true,"name":"READ_WRITE_IND","comment":"Reference type assigned when data is read and written.","type_short":"RefType","constant_value":null},{"type_long":"ghidra.program.model.symbol.RefType","javadoc":"Reference type assigned for stack variable being read.\n@deprecated use {@link RefType#READ} instead","static":true,"name":"STACK_READ","comment":"Reference type assigned for stack variable being read.","type_short":"RefType","constant_value":null},{"type_long":"ghidra.program.model.symbol.RefType","javadoc":"Reference type assigned for stack variable being written.\n@deprecated use {@link RefType#WRITE} instead","static":true,"name":"STACK_WRITE","comment":"Reference type assigned for stack variable being written.","type_short":"RefType","constant_value":null},{"type_long":"ghidra.program.model.symbol.RefType","javadoc":"Reference type used internally to identify external entry points.  \n The use of this RefType for references to external library data or functions \n is deprecated and should not be used for that purpose.","static":true,"name":"EXTERNAL_REF","comment":"Reference type used internally to identify external entry points.  \n The use of this RefType for references to external library data or functions \n is deprecated and should not be used for that purpose.","type_short":"RefType","constant_value":null}]}
