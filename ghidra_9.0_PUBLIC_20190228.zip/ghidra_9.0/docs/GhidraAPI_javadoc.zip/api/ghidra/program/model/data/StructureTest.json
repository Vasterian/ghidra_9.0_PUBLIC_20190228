{"implements":[],"javadoc":"","static":false,"extends":"generic.test.AbstractGTest","methods":[{"javadoc":"@param arg0","static":false,"name":"<init>","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"setUp","comment":"","params":[],"throws":[{"type_long":"java.lang.Exception","comment":"","type_short":"Exception"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"testAdd","comment":"","params":[],"throws":[{"type_long":"java.lang.Exception","comment":"","type_short":"Exception"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"testAdd2","comment":"","params":[],"throws":[{"type_long":"java.lang.Exception","comment":"","type_short":"Exception"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"testInsert_beginning","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"testInsert_end","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"testInsert_middle","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"testInsertWithEmptySpace","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"testInsertAtOffset","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"testInsertAtOffset1","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"testInsertAtOffset2","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"testInsertAtOffsetPastEnd","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"testClearComponent","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"testClearComponent1","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"testReplace","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"testReplace1","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"testReplace2","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"testReplace3","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"testDelete","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"testDeleteAtOffset","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"testDeleteAll","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"testGetComponents","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"testGetDefinedComponents","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"testGetComponentAt","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"testGetDataTypeAt","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"testReplaceWith","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Test that a structure can't ... ???","static":false,"name":"testCyclingProblem","comment":"Test that a structure can't ... ???","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Test that a structure can't be added to itself.","static":false,"name":"testCyclicDependencyProblem1","comment":"Test that a structure can't be added to itself.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Test that a structure array can't be added to the same structure.","static":false,"name":"testCyclicDependencyProblem2","comment":"Test that a structure array can't be added to the same structure.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Test that a typedef of a structure can't be added to the structure.","static":false,"name":"testCyclicDependencyProblem3","comment":"Test that a typedef of a structure can't be added to the structure.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Test that a structure can't contain another structure that contains it.","static":false,"name":"testCyclicDependencyProblem4","comment":"Test that a structure can't contain another structure that contains it.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Test that a structure can't contain another structure that contains a typedef to it.","static":false,"name":"testCyclicDependencyProblem5","comment":"Test that a structure can't contain another structure that contains a typedef to it.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Test that a structure can't contain a union that contains that structure.","static":false,"name":"testCyclicDependencyProblem6","comment":"Test that a structure can't contain a union that contains that structure.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Test that a structure can't contain a typedef of a union that contains that structure.","static":false,"name":"testCyclicDependencyProblem7","comment":"Test that a structure can't contain a typedef of a union that contains that structure.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Test that a structure can contain a pointer in it to the same structure.","static":false,"name":"testNoCyclicDependencyProblemForStructurePointer","comment":"Test that a structure can contain a pointer in it to the same structure.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Test that a structure can contain a pointer in it to a typedef of the same structure.","static":false,"name":"testNoCyclicDependencyProblemForTypedefPointer","comment":"Test that a structure can contain a pointer in it to a typedef of the same structure.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Test that a structure can contain a pointer in it to a typedef of the same structure.","static":false,"name":"testNoCyclicDependencyProblemForArrayPointer","comment":"Test that a structure can contain a pointer in it to a typedef of the same structure.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"StructureTest","comment":"","fields":[]}
