{"implements":[],"javadoc":"","static":false,"extends":"generic.test.AbstractGenericTest","methods":[{"javadoc":"Constructor for UnionTest.\n@param arg0","static":false,"name":"<init>","comment":"Constructor for UnionTest.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"setUp","comment":"","params":[],"throws":[{"type_long":"java.lang.Exception","comment":"","type_short":"Exception"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"tearDown","comment":"","params":[],"throws":[{"type_long":"java.lang.Exception","comment":"","type_short":"Exception"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"testAdd","comment":"","params":[],"throws":[{"type_long":"java.lang.Exception","comment":"","type_short":"Exception"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"testAdd2","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"testGetComponent","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"testGetComponents","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"testInsert","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"testGetName","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"testCloneRetainIdentity","comment":"","params":[],"throws":[{"type_long":"java.lang.Exception","comment":"","type_short":"Exception"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"testCopyDontRetain","comment":"","params":[],"throws":[{"type_long":"java.lang.Exception","comment":"","type_short":"Exception"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"testDelete","comment":"","params":[],"throws":[{"type_long":"java.lang.Exception","comment":"","type_short":"Exception"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"testIsPartOf","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"testReplaceWith","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"testCyclingProblem","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Test that a structure can't be added to itself.","static":false,"name":"testCyclicDependencyProblem1","comment":"Test that a structure can't be added to itself.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Test that a structure array can't be added to the same structure.","static":false,"name":"testCyclicDependencyProblem2","comment":"Test that a structure array can't be added to the same structure.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Test that a typedef of a union can't be added to the union.","static":false,"name":"testCyclicDependencyProblem3","comment":"Test that a typedef of a union can't be added to the union.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Test that a union can't contain another union that contains it.","static":false,"name":"testCyclicDependencyProblem4","comment":"Test that a union can't contain another union that contains it.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Test that a union can't contain another union that contains a typedef to it.","static":false,"name":"testCyclicDependencyProblem5","comment":"Test that a union can't contain another union that contains a typedef to it.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Test that a union can't contain a structure that contains that union.","static":false,"name":"testCyclicDependencyProblem6","comment":"Test that a union can't contain a structure that contains that union.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Test that a structure can't contain a typedef of a union that contains that structure.","static":false,"name":"testCyclicDependencyProblem7","comment":"Test that a structure can't contain a typedef of a union that contains that structure.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Test that a structure can contain a pointer in it to the same structure.","static":false,"name":"testNoCyclicDependencyProblemForStructurePointer","comment":"Test that a structure can contain a pointer in it to the same structure.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Test that a union can contain a pointer in it to a typedef of the same union.","static":false,"name":"testNoCyclicDependencyProblemForTypedefPointer","comment":"Test that a union can contain a pointer in it to a typedef of the same union.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Test that a union can contain a pointer in it to a typedef of the same union.","static":false,"name":"testNoCyclicDependencyProblemForArrayPointer","comment":"Test that a union can contain a pointer in it to a typedef of the same union.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"UnionTest","comment":"","fields":[]}
