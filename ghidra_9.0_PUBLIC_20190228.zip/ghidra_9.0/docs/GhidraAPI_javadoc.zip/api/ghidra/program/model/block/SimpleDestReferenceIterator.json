{"implements":["ghidra.program.model.block.CodeBlockReferenceIterator"],"javadoc":"This iterator is implemented by getting the flows from the instruction\n  and iterating over those flows (plus the fallthrough).  This is probably\n  not the most efficient method.  An linked-list of references has to be created each\n  time we want to get the destinations from a block.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"Construct an Iterator over Destination blocks for a CodeBlock.\n External references are ignored.\n@param block block to get destination blocks for.  This should be a\n block obtained from SimpleBlockModel.\n@param followIndirectFlows indirect references will only be included if true\n@param monitor task monitor which allows user to cancel operation.\n@throws CancelledException if the monitor cancels the operation.","static":false,"name":"<init>","comment":"Construct an Iterator over Destination blocks for a CodeBlock.\n External references are ignored.","params":[{"type_long":"ghidra.program.model.block.CodeBlock","name":"block","comment":"block to get destination blocks for.  This should be a\n block obtained from SimpleBlockModel.","type_short":"CodeBlock"},{"type_long":"boolean","name":"followIndirectFlows","comment":"indirect references will only be included if true","type_short":"boolean"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"task monitor which allows user to cancel operation.","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"if the monitor cancels the operation.","type_short":"CancelledException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"@see ghidra.program.model.block.CodeBlockReferenceIterator#next()","static":false,"name":"next","comment":"","params":[],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"ghidra.program.model.block.CodeBlockReference","comment":"","type_short":"CodeBlockReference"}},{"javadoc":"@see ghidra.program.model.block.CodeBlockReferenceIterator#hasNext()","static":false,"name":"hasNext","comment":"","params":[],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Get number of destination references flowing out of this block.\n All Calls from this block, and all external FlowType block references\n from this block are ignored.\n@param block code block to get the number of destination references from.\n@param followIndirectFlows indirect references will only be included if true\n@param monitor task monitor which allows user to cancel operation.\n@throws CancelledException if the monitor cancels the operation.\n@deprecated this method should be avoided since it repeats the work of the iterator","static":true,"name":"getNumDestinations","comment":"Get number of destination references flowing out of this block.\n All Calls from this block, and all external FlowType block references\n from this block are ignored.","params":[{"type_long":"ghidra.program.model.block.CodeBlock","name":"block","comment":"code block to get the number of destination references from.","type_short":"CodeBlock"},{"type_long":"boolean","name":"followIndirectFlows","comment":"indirect references will only be included if true","type_short":"boolean"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"task monitor which allows user to cancel operation.","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"if the monitor cancels the operation.","type_short":"CancelledException"}],"return":{"type_long":"int","comment":"","type_short":"int"}}],"name":"SimpleDestReferenceIterator","comment":"This iterator is implemented by getting the flows from the instruction\n  and iterating over those flows (plus the fallthrough).  This is probably\n  not the most efficient method.  An linked-list of references has to be created each\n  time we want to get the destinations from a block.","fields":[]}
