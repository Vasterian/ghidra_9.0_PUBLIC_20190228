{"implements":[],"javadoc":"High-level prototype of a function based on Varnodes, describing the inputs and outputs\n of this function.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"Construct a FunctionPrototype backed by a local symbolmap\n@param ls is the LocalSymbolMap backing the prototype\n@param func is the function using the symbolmap","static":false,"name":"<init>","comment":"Construct a FunctionPrototype backed by a local symbolmap","params":[{"type_long":"ghidra.program.model.pcode.LocalSymbolMap","name":"ls","comment":"is the LocalSymbolMap backing the prototype","type_short":"LocalSymbolMap"},{"type_long":"ghidra.program.model.listing.Function","name":"func","comment":"is the function using the symbolmap","type_short":"Function"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Construct an internally backed prototype based on a FunctionSignature prototype\n@param proto is the FunctionSignature used to internally back input parameters\n@param cspec is the compiler spec used to pick prototype model\n@param voidimpliesdotdotdot set to true if a void prototype is interpreted as varargs","static":false,"name":"<init>","comment":"Construct an internally backed prototype based on a FunctionSignature prototype","params":[{"type_long":"ghidra.program.model.listing.FunctionSignature","name":"proto","comment":"is the FunctionSignature used to internally back input parameters","type_short":"FunctionSignature"},{"type_long":"ghidra.program.model.lang.CompilerSpec","name":"cspec","comment":"is the compiler spec used to pick prototype model","type_short":"CompilerSpec"},{"type_long":"boolean","name":"voidimpliesdotdotdot","comment":"set to true if a void prototype is interpreted as varargs","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"@return the number of defined parameters for this function prototype","static":false,"name":"getNumParams","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"the number of defined parameters for this function prototype","type_short":"int"}},{"javadoc":"@param i i'th parameter index\n@return the i'th HighParam to this function prototype or null\n if this prototype is not backed by a LocalSymbolMap","static":false,"name":"getParam","comment":"","params":[{"type_long":"int","name":"i","comment":"i'th parameter index","type_short":"int"}],"throws":[],"return":{"type_long":"ghidra.program.model.pcode.HighParam","comment":"the i'th HighParam to this function prototype or null\n if this prototype is not backed by a LocalSymbolMap","type_short":"HighParam"}},{"javadoc":"@return parameter definitions if prototype was produced\n from a FunctionSignature or null if backed by a \n LocalSymbolMap","static":false,"name":"getParameterDefinitions","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.data.ParameterDefinition[]","comment":"parameter definitions if prototype was produced\n from a FunctionSignature or null if backed by a \n LocalSymbolMap","type_short":"ghidra.program.model.data.ParameterDefinition[]"}},{"javadoc":"@return true if this prototype is backed by a LocalSymbolMap, or \n false if generated from a FunctionSignature.","static":false,"name":"isBackedByLocalSymbolMap","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if this prototype is backed by a LocalSymbolMap, or \n false if generated from a FunctionSignature.","type_short":"boolean"}},{"javadoc":"@return the return type for the function","static":false,"name":"getReturnType","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.data.DataType","comment":"the return type for the function","type_short":"DataType"}},{"javadoc":"@return the return storage for the function","static":false,"name":"getReturnStorage","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.listing.VariableStorage","comment":"the return storage for the function","type_short":"VariableStorage"}},{"javadoc":"@return the number of extra bytes popped off by this functions return","static":false,"name":"getExtraPop","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"the number of extra bytes popped off by this functions return","type_short":"int"}},{"javadoc":"@return true if this function has variable arguments","static":false,"name":"isVarArg","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if this function has variable arguments","type_short":"boolean"}},{"javadoc":"@return true if this function should be inlined by the decompile","static":false,"name":"isInline","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if this function should be inlined by the decompile","type_short":"boolean"}},{"javadoc":"@return true if calls to this function do not return","static":false,"name":"hasNoReturn","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if calls to this function do not return","type_short":"boolean"}},{"javadoc":"@return true if this function is a method taking a 'this' pointer as a parameter","static":false,"name":"hasThisPointer","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if this function is a method taking a 'this' pointer as a parameter","type_short":"boolean"}},{"javadoc":"@return true if this function is an (object-oriented) constructor","static":false,"name":"isConstructor","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if this function is an (object-oriented) constructor","type_short":"boolean"}},{"javadoc":"@return true if this function is an (object-oriented) destructor","static":false,"name":"isDestructor","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if this function is an (object-oriented) destructor","type_short":"boolean"}},{"javadoc":"@return calling convention model name specific to the associated compiler spec","static":false,"name":"getModelName","comment":"","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"calling convention model name specific to the associated compiler spec","type_short":"String"}},{"javadoc":"@return generic calling convention","static":false,"name":"getGenericCallingConvention","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.data.GenericCallingConvention","comment":"generic calling convention","type_short":"GenericCallingConvention"}},{"javadoc":"append an XML string representing this function prototype","static":false,"name":"buildPrototypeXML","comment":"append an XML string representing this function prototype","params":[{"type_long":"java.lang.StringBuilder","name":"res","comment":"","type_short":"StringBuilder"},{"type_long":"ghidra.program.model.pcode.PcodeDataTypeManager","name":"dtmanage","comment":"","type_short":"PcodeDataTypeManager"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Parse the function prototype from an XML tree node.\n@param node XML tree node from a parsing of a larger XML document\n@throws PcodeXMLException","static":false,"name":"readPrototypeXML","comment":"Parse the function prototype from an XML tree node.","params":[{"type_long":"ghidra.xml.XmlPullParser","name":"parser","comment":"","type_short":"XmlPullParser"},{"type_long":"ghidra.program.model.pcode.PcodeDataTypeManager","name":"dtmanage","comment":"","type_short":"PcodeDataTypeManager"}],"throws":[{"type_long":"ghidra.program.model.pcode.PcodeXMLException","comment":"","type_short":"PcodeXMLException"}],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"FunctionPrototype","comment":"High-level prototype of a function based on Varnodes, describing the inputs and outputs\n of this function.","fields":[]}
