{"implements":["java.io.Serializable","java.lang.Comparable"],"javadoc":"Class to represent a processor register.  To sort of handle bit registers, a\n special addressing convention is used.  First the upper bit is set.  Second, the\n next 3 bits are used to specify what bit position within a byte that this register\n bit exists at.  Finally, the rest of the address is the address of the byte where\n the register bit lives.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"Constructs a new Register object.\n@param name the name of this Register.\n@param description the description of this Register\n@param address the address in register space of this register\n@param numBytes the size (in bytes) of this register\n@param bigEndian true if the most significant bytes are associated with the lowest register\n addresses, and false if the least significant bytes are associated with the lowest register \n addresses.\n@param typeFlags the type(s) of this Register  (TYPE_NONE, TYPE_FP, TYPE_SP, \n \tTYPE_PC, TYPE_CONTEXT, TYPE_ZERO);)","static":false,"name":"<init>","comment":"Constructs a new Register object.","params":[{"type_long":"java.lang.String","name":"name","comment":"the name of this Register.","type_short":"String"},{"type_long":"java.lang.String","name":"description","comment":"the description of this Register","type_short":"String"},{"type_long":"ghidra.program.model.address.Address","name":"address","comment":"the address in register space of this register","type_short":"Address"},{"type_long":"int","name":"numBytes","comment":"the size (in bytes) of this register","type_short":"int"},{"type_long":"boolean","name":"bigEndian","comment":"true if the most significant bytes are associated with the lowest register\n addresses, and false if the least significant bytes are associated with the lowest register \n addresses.","type_short":"boolean"},{"type_long":"int","name":"typeFlags","comment":"the type(s) of this Register  (TYPE_NONE, TYPE_FP, TYPE_SP, \n \tTYPE_PC, TYPE_CONTEXT, TYPE_ZERO);)","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"<init>","comment":"","params":[{"type_long":"ghidra.program.model.lang.Register","name":"register","comment":"","type_short":"Register"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"<init>","comment":"","params":[{"type_long":"java.lang.String","name":"name","comment":"","type_short":"String"},{"type_long":"java.lang.String","name":"description","comment":"","type_short":"String"},{"type_long":"ghidra.program.model.address.Address","name":"address","comment":"","type_short":"Address"},{"type_long":"int","name":"numBytes","comment":"","type_short":"int"},{"type_long":"int","name":"leastSignificantBit","comment":"","type_short":"int"},{"type_long":"int","name":"bitLength","comment":"","type_short":"int"},{"type_long":"boolean","name":"bigEndian","comment":"","type_short":"boolean"},{"type_long":"int","name":"typeFlags","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Return register aliases.\n NOTE: This is generally only supported for\n context register fields.\n@return register aliases or null","static":false,"name":"getAliases","comment":"Return register aliases.\n NOTE: This is generally only supported for\n context register fields.","params":[],"throws":[],"return":{"type_long":"java.lang.Iterable<java.lang.String>","comment":"register aliases or null","type_short":"Iterable"}},{"javadoc":"Gets the name of this Register.\n@return the name of this Register.","static":false,"name":"getName","comment":"Gets the name of this Register.","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"the name of this Register.","type_short":"String"}},{"javadoc":"Get the description of the Register.\n@return the description of the register","static":false,"name":"getDescription","comment":"Get the description of the Register.","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"the description of the register","type_short":"String"}},{"javadoc":"","static":false,"name":"isBigEndian","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Gets the total number of bits for this Register.\n@return the total number of bits for this Register.","static":false,"name":"getBitLength","comment":"Gets the total number of bits for this Register.","params":[],"throws":[],"return":{"type_long":"int","comment":"the total number of bits for this Register.","type_short":"int"}},{"javadoc":"Returns the minimum number of bytes required to store a value for this Register.","static":false,"name":"getMinimumByteSize","comment":"Returns the minimum number of bytes required to store a value for this Register.","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"Returns the offset into the register space for this register","static":false,"name":"getOffset","comment":"Returns the offset into the register space for this register","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"Returns the bit offset from the register address for this register.\n@return the bit offset from the register address for this register.","static":false,"name":"getLeastSignificantBit","comment":"Returns the bit offset from the register address for this register.","params":[],"throws":[],"return":{"type_long":"int","comment":"the bit offset from the register address for this register.","type_short":"int"}},{"javadoc":"Returns true if this is the default frame pointer register","static":false,"name":"isDefaultFramePointer","comment":"Returns true if this is the default frame pointer register","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Returns true for a register whose context value should\n follow the disassembly flow.","static":false,"name":"followsFlow","comment":"Returns true for a register whose context value should\n follow the disassembly flow.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Returns true if this is a hidden register.","static":false,"name":"isHidden","comment":"Returns true if this is a hidden register.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Returns true if this is the program counter register","static":false,"name":"isProgramCounter","comment":"Returns true if this is the program counter register","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Returns true if this is a processor state register","static":false,"name":"isProcessorContext","comment":"Returns true if this is a processor state register","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Returns true for a register that is always zero","static":false,"name":"isZero","comment":"Returns true for a register that is always zero","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"@see java.lang.Object#toString()","static":false,"name":"toString","comment":"","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"@see java.lang.Object#equals(java.lang.Object)","static":false,"name":"equals","comment":"","params":[{"type_long":"java.lang.Object","name":"o","comment":"","type_short":"Object"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"@see java.lang.Object#hashCode()","static":false,"name":"hashCode","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"Returns the register address space","static":false,"name":"getAddressSpace","comment":"Returns the register address space","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.address.AddressSpace","comment":"","type_short":"AddressSpace"}},{"javadoc":"@see java.lang.Comparable#compareTo(java.lang.Object)","static":false,"name":"compareTo","comment":"","params":[{"type_long":"ghidra.program.model.lang.Register","name":"other","comment":"","type_short":"Register"}],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"Returns the address of the register.","static":false,"name":"getAddress","comment":"Returns the address of the register.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.address.Address","comment":"","type_short":"Address"}},{"javadoc":"","static":false,"name":"getParentRegister","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.lang.Register","comment":"","type_short":"Register"}},{"javadoc":"Returns list of children registers sorted by\n lest-significant bit-offset within this register.","static":false,"name":"getChildRegisters","comment":"Returns list of children registers sorted by\n lest-significant bit-offset within this register.","params":[],"throws":[],"return":{"type_long":"java.util.List<ghidra.program.model.lang.Register>","comment":"","type_short":"List"}},{"javadoc":"","static":false,"name":"getBaseRegister","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.lang.Register","comment":"","type_short":"Register"}},{"javadoc":"","static":false,"name":"getLeastSignificatBitInBaseRegister","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"getTypeFlags","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"Returns the mask that indicates which bits in the base register apply to this register.\n@return the mask that indicates which bits in the base register apply to this register","static":false,"name":"getBaseMask","comment":"Returns the mask that indicates which bits in the base register apply to this register.","params":[],"throws":[],"return":{"type_long":"byte[]","comment":"the mask that indicates which bits in the base register apply to this register","type_short":"byte[]"}},{"javadoc":"","static":false,"name":"hasChildren","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"getGroup","comment":"","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"","static":false,"name":"isBaseRegister","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Determines if reg is contained within this register.\n Method does not work for bit registers (e.g., context-bits)\n@param reg another register\n@return true if reg equals this register or is contained\n within it.","static":false,"name":"contains","comment":"Determines if reg is contained within this register.\n Method does not work for bit registers (e.g., context-bits)","params":[{"type_long":"ghidra.program.model.lang.Register","name":"reg","comment":"another register","type_short":"Register"}],"throws":[],"return":{"type_long":"boolean","comment":"true if reg equals this register or is contained\n within it.","type_short":"boolean"}},{"javadoc":"Returns true if this is a vector register\n@return true precisely when {@code this} is a full vector register (i.e., a register that can be\n used as input or output for a SIMD operation).","static":false,"name":"isVectorRegister","comment":"Returns true if this is a vector register","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true precisely when  is a full vector register (i.e., a register that can be\n used as input or output for a SIMD operation).","type_short":"boolean"}},{"javadoc":"Determines whether {@code laneSizeInBytes} is a valid lane size for this register.\n@param laneSizeInBytes lane size to check, measured in bytes\n@return true precisely when {@code this} is a vector register and {@code laneSizeInBytes} is a valid lane size.","static":false,"name":"isValidLaneSize","comment":"Determines whether  is a valid lane size for this register.","params":[{"type_long":"int","name":"laneSizeInBytes","comment":"lane size to check, measured in bytes","type_short":"int"}],"throws":[],"return":{"type_long":"boolean","comment":"true precisely when  is a vector register and  is a valid lane size.","type_short":"boolean"}},{"javadoc":"Returns the sorted array of lane sizes for this register, measured in bytes.\n@return array of lane sizes, or {@code null} if {@code this} is not a vector register or no lane sizes have been set.","static":false,"name":"getLaneSizes","comment":"Returns the sorted array of lane sizes for this register, measured in bytes.","params":[],"throws":[],"return":{"type_long":"int[]","comment":"array of lane sizes, or  if  is not a vector register or no lane sizes have been set.","type_short":"int[]"}}],"name":"Register","comment":"Class to represent a processor register.  To sort of handle bit registers, a\n special addressing convention is used.  First the upper bit is set.  Second, the\n next 3 bits are used to specify what bit position within a byte that this register\n bit exists at.  Finally, the rest of the address is the address of the byte where\n the register bit lives.","fields":[{"type_long":"int","javadoc":"","static":true,"name":"TYPE_NONE","comment":"","type_short":"int","constant_value":"0"},{"type_long":"int","javadoc":"","static":true,"name":"TYPE_FP","comment":"","type_short":"int","constant_value":"1"},{"type_long":"int","javadoc":"","static":true,"name":"TYPE_SP","comment":"","type_short":"int","constant_value":"2"},{"type_long":"int","javadoc":"","static":true,"name":"TYPE_PC","comment":"","type_short":"int","constant_value":"4"},{"type_long":"int","javadoc":"","static":true,"name":"TYPE_CONTEXT","comment":"","type_short":"int","constant_value":"8"},{"type_long":"int","javadoc":"","static":true,"name":"TYPE_ZERO","comment":"","type_short":"int","constant_value":"16"},{"type_long":"int","javadoc":"","static":true,"name":"TYPE_HIDDEN","comment":"","type_short":"int","constant_value":"32"},{"type_long":"int","javadoc":"","static":true,"name":"TYPE_DOES_NOT_FOLLOW_FLOW","comment":"","type_short":"int","constant_value":"64"},{"type_long":"int","javadoc":"Register can be used in SIMD operations","static":true,"name":"TYPE_VECTOR","comment":"Register can be used in SIMD operations","type_short":"int","constant_value":"128"}]}
