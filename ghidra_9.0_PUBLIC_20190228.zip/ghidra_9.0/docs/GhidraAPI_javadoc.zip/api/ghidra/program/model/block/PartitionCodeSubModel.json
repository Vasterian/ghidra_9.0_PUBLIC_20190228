{"implements":["ghidra.program.model.block.SubroutineBlockModel"],"javadoc":"<CODE>PartitionCodeSubModel<\/CODE> (Model-P) defines subroutines which do not share code with\n other subroutines and may have one or more entry points.\n Entry points represent anyone of a variety of flow entries, including a source, called, jump or\n fall-through entry point.\n <P>\n MODEL-P is the answer to those who always want to be able to know what subroutine\n a given instruction is in, but also do not want the subroutine to have multiple\n entry points.  When a model-M subroutine has multiple entry points,\n that set of code will necessarily consist of several model-P subroutines.  When\n a model-M subroutine has a single entry point, it will consist of a single model-P subroutine\n which has the same address set and entry point.\n@see ghidra.program.model.block.CodeBlockModel Created February 7, 2002.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"Construct a Model-P subroutine on a program.\n@param program program to create blocks from.","static":false,"name":"<init>","comment":"Construct a Model-P subroutine on a program.","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"program to create blocks from.","type_short":"Program"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Construct a Model-P subroutine on a program.\n@param program program to create blocks from.\n@param includeExternals externals included if true","static":false,"name":"<init>","comment":"Construct a Model-P subroutine on a program.","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"program to create blocks from.","type_short":"Program"},{"type_long":"boolean","name":"includeExternals","comment":"externals included if true","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"@see ghidra.program.model.block.CodeBlockModel#getCodeBlockAt(ghidra.program.model.address.Address, ghidra.util.task.TaskMonitor)","static":false,"name":"getCodeBlockAt","comment":"","params":[{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"","type_short":"Address"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"ghidra.program.model.block.CodeBlock","comment":"","type_short":"CodeBlock"}},{"javadoc":"Get all the Code Blocks containing the address.\n For model-P, there is only one.\n@param addr Address to find a containing block.\n@param monitor task monitor which allows user to cancel operation.\n@return A CodeBlock array with one entry containing the subroutine that\n              contains the address null otherwise.\n@throws CancelledException if the monitor cancels the operation.","static":false,"name":"getCodeBlocksContaining","comment":"Get all the Code Blocks containing the address.\n For model-P, there is only one.","params":[{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"Address to find a containing block.","type_short":"Address"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"task monitor which allows user to cancel operation.","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"if the monitor cancels the operation.","type_short":"CancelledException"}],"return":{"type_long":"ghidra.program.model.block.CodeBlock[]","comment":"A CodeBlock array with one entry containing the subroutine that\n              contains the address null otherwise.","type_short":"ghidra.program.model.block.CodeBlock[]"}},{"javadoc":"Get the (first) Model-P subroutine that contains the address.\n This is equivalent to getCodeBlocksContaining(addr) except that\n it doesn't return an array since model-P subroutines don't share code.\n@param addr Address to find a containing block.\n@param monitor task monitor which allows user to cancel operation.\n@return A CodeBlock if any block contains the address.\n         empty array otherwise.\n@throws CancelledException if the monitor cancels the operation.","static":false,"name":"getFirstCodeBlockContaining","comment":"Get the (first) Model-P subroutine that contains the address.\n This is equivalent to getCodeBlocksContaining(addr) except that\n it doesn't return an array since model-P subroutines don't share code.","params":[{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"Address to find a containing block.","type_short":"Address"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"task monitor which allows user to cancel operation.","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"if the monitor cancels the operation.","type_short":"CancelledException"}],"return":{"type_long":"ghidra.program.model.block.CodeBlock","comment":"A CodeBlock if any block contains the address.\n         empty array otherwise.","type_short":"CodeBlock"}},{"javadoc":"@see ghidra.program.model.block.CodeBlockModel#getCodeBlocks(ghidra.util.task.TaskMonitor)","static":false,"name":"getCodeBlocks","comment":"","params":[{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[],"return":{"type_long":"ghidra.program.model.block.CodeBlockIterator","comment":"","type_short":"CodeBlockIterator"}},{"javadoc":"Get an iterator over CodeBlocks which overlap the specified address set.\n@param addrSet an address set within program\n@param monitor task monitor which allows user to cancel operation.","static":false,"name":"getCodeBlocksContaining","comment":"Get an iterator over CodeBlocks which overlap the specified address set.","params":[{"type_long":"ghidra.program.model.address.AddressSetView","name":"addrSet","comment":"an address set within program","type_short":"AddressSetView"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"task monitor which allows user to cancel operation.","type_short":"TaskMonitor"}],"throws":[],"return":{"type_long":"ghidra.program.model.block.CodeBlockIterator","comment":"","type_short":"CodeBlockIterator"}},{"javadoc":"@see ghidra.program.model.block.CodeBlockModel#getProgram()","static":false,"name":"getProgram","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.listing.Program","comment":"","type_short":"Program"}},{"javadoc":"Returns the listing associated with this block model.\n@return the listing associated with this block model","static":false,"name":"getListing","comment":"Returns the listing associated with this block model.","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.listing.Listing","comment":"the listing associated with this block model","type_short":"Listing"}},{"javadoc":"@see ghidra.program.model.block.CodeBlockModel#getName(ghidra.program.model.block.CodeBlock)","static":false,"name":"getName","comment":"","params":[{"type_long":"ghidra.program.model.block.CodeBlock","name":"block","comment":"","type_short":"CodeBlock"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"Return in general how things flow out of this node.\n This method exists for the SIMPLEBLOCK model.\n\n <p>\n Since it doesn't make a great deal of sense to ask for this method\n in the case of subroutines, we return FlowType.UNKNOWN\n as long as the block exists.<\/p>\n\n <p>\n If this block has no valid instructions, it can't flow,\n so FlowType.INVALID is returned.<\/p>\n@return flow type of this node","static":false,"name":"getFlowType","comment":"Return in general how things flow out of this node.\n This method exists for the SIMPLEBLOCK model.\n\n \n Since it doesn't make a great deal of sense to ask for this method\n in the case of subroutines, we return FlowType.UNKNOWN\n as long as the block exists.\n\n \n If this block has no valid instructions, it can't flow,\n so FlowType.INVALID is returned.","params":[{"type_long":"ghidra.program.model.block.CodeBlock","name":"block","comment":"","type_short":"CodeBlock"}],"throws":[],"return":{"type_long":"ghidra.program.model.symbol.FlowType","comment":"flow type of this node","type_short":"FlowType"}},{"javadoc":"Get an iterator over source blocks flowing into this block.\n@param block code block to get the source iterator for.\n@param monitor task monitor which allows user to cancel operation.\n@throws CancelledException if the monitor cancels the operation.","static":false,"name":"getSources","comment":"Get an iterator over source blocks flowing into this block.","params":[{"type_long":"ghidra.program.model.block.CodeBlock","name":"block","comment":"code block to get the source iterator for.","type_short":"CodeBlock"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"task monitor which allows user to cancel operation.","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"if the monitor cancels the operation.","type_short":"CancelledException"}],"return":{"type_long":"ghidra.program.model.block.CodeBlockReferenceIterator","comment":"","type_short":"CodeBlockReferenceIterator"}},{"javadoc":"Get number of block source references flowing into this block.\n@param block code block to get the source iterator for.\n@param monitor task monitor which allows user to cancel operation.\n@throws CancelledException if the monitor cancels the operation.","static":false,"name":"getNumSources","comment":"Get number of block source references flowing into this block.","params":[{"type_long":"ghidra.program.model.block.CodeBlock","name":"block","comment":"code block to get the source iterator for.","type_short":"CodeBlock"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"task monitor which allows user to cancel operation.","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"if the monitor cancels the operation.","type_short":"CancelledException"}],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"Get an iterator over destination blocks flowing from this block.\n@param block code block to get the destination block iterator for.\n@param monitor task monitor which allows user to cancel operation.\n@throws CancelledException if the monitor cancels the operation.","static":false,"name":"getDestinations","comment":"Get an iterator over destination blocks flowing from this block.","params":[{"type_long":"ghidra.program.model.block.CodeBlock","name":"block","comment":"code block to get the destination block iterator for.","type_short":"CodeBlock"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"task monitor which allows user to cancel operation.","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"if the monitor cancels the operation.","type_short":"CancelledException"}],"return":{"type_long":"ghidra.program.model.block.CodeBlockReferenceIterator","comment":"","type_short":"CodeBlockReferenceIterator"}},{"javadoc":"Get number of destination references flowing out of this subroutine (block).\n All Calls from this block, and all external FlowType block references\n from this block are counted.\n@param block code block to get the number of destination references from.\n@param monitor task monitor which allows user to cancel operation.\n@throws CancelledException if the monitor cancels the operation.","static":false,"name":"getNumDestinations","comment":"Get number of destination references flowing out of this subroutine (block).\n All Calls from this block, and all external FlowType block references\n from this block are counted.","params":[{"type_long":"ghidra.program.model.block.CodeBlock","name":"block","comment":"code block to get the number of destination references from.","type_short":"CodeBlock"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"task monitor which allows user to cancel operation.","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"if the monitor cancels the operation.","type_short":"CancelledException"}],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"@see ghidra.program.model.block.CodeBlockModel#getBasicBlockModel()","static":false,"name":"getBasicBlockModel","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.block.CodeBlockModel","comment":"","type_short":"CodeBlockModel"}},{"javadoc":"@see ghidra.program.model.block.CodeBlockModel#getName()","static":false,"name":"getName","comment":"","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"@see ghidra.program.model.block.SubroutineBlockModel#getBaseSubroutineModel()","static":false,"name":"getBaseSubroutineModel","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.block.SubroutineBlockModel","comment":"","type_short":"SubroutineBlockModel"}},{"javadoc":"@see ghidra.program.model.block.CodeBlockModel#allowsBlockOverlap()","static":false,"name":"allowsBlockOverlap","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"@see ghidra.program.model.block.CodeBlockModel#externalsIncluded()","static":false,"name":"externalsIncluded","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}}],"name":"PartitionCodeSubModel","comment":"PartitionCodeSubModel (Model-P) defines subroutines which do not share code with\n other subroutines and may have one or more entry points.\n Entry points represent anyone of a variety of flow entries, including a source, called, jump or\n fall-through entry point.\n \n MODEL-P is the answer to those who always want to be able to know what subroutine\n a given instruction is in, but also do not want the subroutine to have multiple\n entry points.  When a model-M subroutine has multiple entry points,\n that set of code will necessarily consist of several model-P subroutines.  When\n a model-M subroutine has a single entry point, it will consist of a single model-P subroutine\n which has the same address set and entry point.","fields":[{"type_long":"java.lang.String","javadoc":"","static":true,"name":"NAME","comment":"","type_short":"String","constant_value":"\"Partitioned Code\""}]}
