{"implements":[],"javadoc":"","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"Get a precedence value for the specified variable.\n This value can be used to assist with LocalVariable.compareTo(Variable var)\n@param var\n@return numeric precedence","static":true,"name":"getPrecedence","comment":"Get a precedence value for the specified variable.\n This value can be used to assist with LocalVariable.compareTo(Variable var)","params":[{"type_long":"ghidra.program.model.listing.Variable","name":"var","comment":"","type_short":"Variable"}],"throws":[],"return":{"type_long":"int","comment":"numeric precedence","type_short":"int"}},{"javadoc":"Compare storage varnodes for two lists of variables.  No check is done to ensure that\n storage is considered good\/valid (i.e., BAD_STORAGE, UNASSIGNED_STORAGE and VOID_STORAGE\n all have an empty varnode list and would be considered a match)\n@param vars\n@param otherVars\n@return true if the exact sequence of variable storage varnodes matches across two lists of variables.","static":true,"name":"storageMatches","comment":"Compare storage varnodes for two lists of variables.  No check is done to ensure that\n storage is considered good\/valid (i.e., BAD_STORAGE, UNASSIGNED_STORAGE and VOID_STORAGE\n all have an empty varnode list and would be considered a match)","params":[{"type_long":"java.util.List<ghidra.program.model.listing.Variable>","name":"vars","comment":"","type_short":"List"},{"type_long":"java.util.List<ghidra.program.model.listing.Variable>","name":"otherVars","comment":"","type_short":"List"}],"throws":[],"return":{"type_long":"boolean","comment":"true if the exact sequence of variable storage varnodes matches across two lists of variables.","type_short":"boolean"}},{"javadoc":"Compare storage varnodes for two lists of variables.  No check is done to ensure that\n storage is considered good\/valid (i.e., BAD_STORAGE, UNASSIGNED_STORAGE and VOID_STORAGE\n all have an empty varnode list and would be considered a match)\n@param vars\n@param otherVars\n@return true if the exact sequence of variable storage varnodes matches across two lists of variables.","static":true,"name":"storageMatches","comment":"Compare storage varnodes for two lists of variables.  No check is done to ensure that\n storage is considered good\/valid (i.e., BAD_STORAGE, UNASSIGNED_STORAGE and VOID_STORAGE\n all have an empty varnode list and would be considered a match)","params":[{"type_long":"java.util.List<? extends ghidra.program.model.listing.Variable>","name":"vars","comment":"","type_short":"List"},{"type_long":"ghidra.program.model.listing.Variable[]","name":"otherVars","comment":"","type_short":"ghidra.program.model.listing.Variable[]"}],"throws":[],"return":{"type_long":"boolean","comment":"true if the exact sequence of variable storage varnodes matches across two lists of variables.","type_short":"boolean"}},{"javadoc":"Compare two variables without using the instance specific compareTo method.\n@param v1\n@param v2\n@return a negative value if v1 &lt; v2, 0 if equal, and\n positive if v1 &gt; v2","static":true,"name":"compare","comment":"Compare two variables without using the instance specific compareTo method.","params":[{"type_long":"ghidra.program.model.listing.Variable","name":"v1","comment":"","type_short":"Variable"},{"type_long":"ghidra.program.model.listing.Variable","name":"v2","comment":"","type_short":"Variable"}],"throws":[],"return":{"type_long":"int","comment":"a negative value if v1  v2, 0 if equal, and\n positive if v1  v2","type_short":"int"}},{"javadoc":"Determine the appropriate data type for an automatic parameter\n@param function\n@param returnDataType\n@param storage variable storage for an auto-parameter (isAutoStorage should be true)\n@return auto-parameter data type","static":true,"name":"getAutoDataType","comment":"Determine the appropriate data type for an automatic parameter","params":[{"type_long":"ghidra.program.model.listing.Function","name":"function","comment":"","type_short":"Function"},{"type_long":"ghidra.program.model.data.DataType","name":"returnDataType","comment":"","type_short":"DataType"},{"type_long":"ghidra.program.model.listing.VariableStorage","name":"storage","comment":"variable storage for an auto-parameter (isAutoStorage should be true)","type_short":"VariableStorage"}],"throws":[],"return":{"type_long":"ghidra.program.model.data.DataType","comment":"auto-parameter data type","type_short":"DataType"}},{"javadoc":"Perform variable storage checks using the specified datatype.\n@param storage variable storage whoose size must match the specified data type size\n@param dataType a datatype checked using {@link #checkDataType(DataType, boolean, int, Program)}\n@param allowSizeMismatch if true size mismatch will be ignore\n@throws InvalidInputException","static":true,"name":"checkStorage","comment":"Perform variable storage checks using the specified datatype.","params":[{"type_long":"ghidra.program.model.listing.VariableStorage","name":"storage","comment":"variable storage whoose size must match the specified data type size","type_short":"VariableStorage"},{"type_long":"ghidra.program.model.data.DataType","name":"dataType","comment":"a datatype checked using #checkDataType(DataType, boolean, int, Program)","type_short":"DataType"},{"type_long":"boolean","name":"allowSizeMismatch","comment":"if true size mismatch will be ignore","type_short":"boolean"}],"throws":[{"type_long":"ghidra.util.exception.InvalidInputException","comment":"","type_short":"InvalidInputException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Perform variable storage checks using the specified datatype.\n@param function if specified and variable storage size does not match the data-type size\n an attempt will be made to resize the specified storage.\n@param storage variable storage\n@param dataType a datatype checked using {@link #checkDataType(DataType, boolean, int, Program)}\n@param allowSizeMismatch if true size mismatch will be ignore\n@return original storage or resized storage with the correct size.\n@throws InvalidInputException","static":true,"name":"checkStorage","comment":"Perform variable storage checks using the specified datatype.","params":[{"type_long":"ghidra.program.model.listing.Function","name":"function","comment":"if specified and variable storage size does not match the data-type size\n an attempt will be made to resize the specified storage.","type_short":"Function"},{"type_long":"ghidra.program.model.listing.VariableStorage","name":"storage","comment":"variable storage","type_short":"VariableStorage"},{"type_long":"ghidra.program.model.data.DataType","name":"dataType","comment":"a datatype checked using #checkDataType(DataType, boolean, int, Program)","type_short":"DataType"},{"type_long":"boolean","name":"allowSizeMismatch","comment":"if true size mismatch will be ignore","type_short":"boolean"}],"throws":[{"type_long":"ghidra.util.exception.InvalidInputException","comment":"","type_short":"InvalidInputException"}],"return":{"type_long":"ghidra.program.model.listing.VariableStorage","comment":"original storage or resized storage with the correct size.","type_short":"VariableStorage"}},{"javadoc":"Perform variable datatype checks\n@param dataType datatype to be checked or null to produce suitable Undefined type\n@param voidOK true if the zero-sized void data type is permitted\n@param defaultSize datatype size to be used if specified datatype is null\n@param program program which corresponds to this variable\n@return checked datatype (could be new instance)\n@throws InvalidInputException","static":true,"name":"checkDataType","comment":"Perform variable datatype checks","params":[{"type_long":"ghidra.program.model.data.DataType","name":"dataType","comment":"datatype to be checked or null to produce suitable Undefined type","type_short":"DataType"},{"type_long":"boolean","name":"voidOK","comment":"true if the zero-sized void data type is permitted","type_short":"boolean"},{"type_long":"int","name":"defaultSize","comment":"datatype size to be used if specified datatype is null","type_short":"int"},{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"program which corresponds to this variable","type_short":"Program"}],"throws":[{"type_long":"ghidra.util.exception.InvalidInputException","comment":"","type_short":"InvalidInputException"}],"return":{"type_long":"ghidra.program.model.data.DataType","comment":"checked datatype (could be new instance)","type_short":"DataType"}},{"javadoc":"Perform resize variable storage to desired newSize.  This method has limited ability to grow\n storage if current storage does not have a stack component or if other space constraints\n are exceeded.\n@param curStorage\n@param dataType\n@param alignStack if false no attempt is made to align stack usage for big-endian\n@param function\n@return resize storage\n@throws InvalidInputException if unable to resize storage to specified size.","static":true,"name":"resizeStorage","comment":"Perform resize variable storage to desired newSize.  This method has limited ability to grow\n storage if current storage does not have a stack component or if other space constraints\n are exceeded.","params":[{"type_long":"ghidra.program.model.listing.VariableStorage","name":"curStorage","comment":"","type_short":"VariableStorage"},{"type_long":"ghidra.program.model.data.DataType","name":"dataType","comment":"","type_short":"DataType"},{"type_long":"boolean","name":"alignStack","comment":"if false no attempt is made to align stack usage for big-endian","type_short":"boolean"},{"type_long":"ghidra.program.model.listing.Function","name":"function","comment":"","type_short":"Function"}],"throws":[{"type_long":"ghidra.util.exception.InvalidInputException","comment":"if unable to resize storage to specified size.","type_short":"InvalidInputException"}],"return":{"type_long":"ghidra.program.model.listing.VariableStorage","comment":"resize storage","type_short":"VariableStorage"}},{"javadoc":"Check for variable storage conflict and optionally remove conflicting variables.\n@param function\n@param var existing function variable or null for new variable\n@param newStorage new\/updated variable storage\n@param deleteConflictingVariables\n@throws VariableSizeException if deleteConflictingVariables is false and another variable conflicts","static":true,"name":"checkVariableConflict","comment":"Check for variable storage conflict and optionally remove conflicting variables.","params":[{"type_long":"ghidra.program.model.listing.Function","name":"function","comment":"","type_short":"Function"},{"type_long":"ghidra.program.model.listing.Variable","name":"var","comment":"existing function variable or null for new variable","type_short":"Variable"},{"type_long":"ghidra.program.model.listing.VariableStorage","name":"newStorage","comment":"new\/updated variable storage","type_short":"VariableStorage"},{"type_long":"boolean","name":"deleteConflictingVariables","comment":"","type_short":"boolean"}],"throws":[{"type_long":"ghidra.program.model.listing.VariableSizeException","comment":"if deleteConflictingVariables is false and another variable conflicts","type_short":"VariableSizeException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Check for variable storage conflict and optionally remove conflicting variables.\n@param existingVariables variables to check (may contain null entries)\n@param var\n@param newStorage\n@throws VariableSizeException\n@throws VariableSizeException if another variable conflicts","static":true,"name":"checkVariableConflict","comment":"Check for variable storage conflict and optionally remove conflicting variables.","params":[{"type_long":"java.util.List<? extends ghidra.program.model.listing.Variable>","name":"existingVariables","comment":"variables to check (may contain null entries)","type_short":"List"},{"type_long":"ghidra.program.model.listing.Variable","name":"var","comment":"","type_short":"Variable"},{"type_long":"ghidra.program.model.listing.VariableStorage","name":"newStorage","comment":"","type_short":"VariableStorage"},{"type_long":"ghidra.program.model.listing.VariableUtilities.VariableConflictHandler","name":"conflictHandler","comment":"","type_short":"VariableConflictHandler"}],"throws":[{"type_long":"ghidra.program.model.listing.VariableSizeException","comment":"","type_short":"VariableSizeException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Determine the minimum stack offset for parameters\n@param function\n@return stack parameter offset or null if it could not be determined","static":true,"name":"getBaseStackParamOffset","comment":"Determine the minimum stack offset for parameters","params":[{"type_long":"ghidra.program.model.listing.Function","name":"function","comment":"","type_short":"Function"}],"throws":[],"return":{"type_long":"java.lang.Integer","comment":"stack parameter offset or null if it could not be determined","type_short":"Integer"}},{"javadoc":"Generate a suitable 'this' parameter for the specified function\n@param function\n@return this parameter or null of calling convention is not a 'thiscall'\n or some other error prevents it\n@deprecated should rely on auto-param instead - try not to use this method which may be eliminated","static":true,"name":"getThisParameter","comment":"Generate a suitable 'this' parameter for the specified function","params":[{"type_long":"ghidra.program.model.listing.Function","name":"function","comment":"","type_short":"Function"},{"type_long":"ghidra.program.model.lang.PrototypeModel","name":"convention","comment":"","type_short":"PrototypeModel"}],"throws":[],"return":{"type_long":"ghidra.program.model.listing.ParameterImpl","comment":"this parameter or null of calling convention is not a 'thiscall'\n or some other error prevents it","type_short":"ParameterImpl"}},{"javadoc":"Find the structure data type which corresponds to the specified class namespace\n within the specified data type manager.  \n The preferred structure will utilize a namespace-based category path, however, \n the match criteria can be fuzzy and relies primarily on the class name.\n While a new empty structure may be returned, it will not be added to the program's data type\n manager.\n@param classNamespace class namespace\n@param dataTypeManager data type manager which should be searched and whose \n data organization should be used.\n@return new or existing structure whose name matches the specified class namespace","static":true,"name":"findOrCreateClassStruct","comment":"Find the structure data type which corresponds to the specified class namespace\n within the specified data type manager.  \n The preferred structure will utilize a namespace-based category path, however, \n the match criteria can be fuzzy and relies primarily on the class name.\n While a new empty structure may be returned, it will not be added to the program's data type\n manager.","params":[{"type_long":"ghidra.program.model.listing.GhidraClass","name":"classNamespace","comment":"class namespace","type_short":"GhidraClass"},{"type_long":"ghidra.program.model.data.DataTypeManager","name":"dataTypeManager","comment":"data type manager which should be searched and whose \n data organization should be used.","type_short":"DataTypeManager"}],"throws":[],"return":{"type_long":"ghidra.program.model.data.Structure","comment":"new or existing structure whose name matches the specified class namespace","type_short":"Structure"}},{"javadoc":"Find the structure data type which corresponds to the specified function's class namespace\n within the function's program.  One will be instantiated if not found.  \n The preferred structure will utilize a namespace-based category path, however, \n the match criteria can be fuzzy and relies primarily on the class name.\n@param function function's whose class namespace is the basis for the structure\n@return new or existing structure whose name matches the function's class namespace or\n null if function not contained within a class namespace.","static":true,"name":"findOrCreateClassStruct","comment":"Find the structure data type which corresponds to the specified function's class namespace\n within the function's program.  One will be instantiated if not found.  \n The preferred structure will utilize a namespace-based category path, however, \n the match criteria can be fuzzy and relies primarily on the class name.","params":[{"type_long":"ghidra.program.model.listing.Function","name":"function","comment":"function's whose class namespace is the basis for the structure","type_short":"Function"}],"throws":[],"return":{"type_long":"ghidra.program.model.data.Structure","comment":"new or existing structure whose name matches the function's class namespace or\n null if function not contained within a class namespace.","type_short":"Structure"}},{"javadoc":"Find the structure data type which corresponds to the specified class namespace\n within the specified data type manager. .  \n The preferred structure will utilize a namespace-based category path, however, \n the match criteria can be fuzzy and relies primarily on the class name.\n@param classNamespace class namespace\n@param dataTypeManager data type manager which should be searched.\n@return existing structure whose name matches the specified class namespace\n or null if not found.","static":true,"name":"findExistingClassStruct","comment":"Find the structure data type which corresponds to the specified class namespace\n within the specified data type manager. .  \n The preferred structure will utilize a namespace-based category path, however, \n the match criteria can be fuzzy and relies primarily on the class name.","params":[{"type_long":"ghidra.program.model.listing.GhidraClass","name":"classNamespace","comment":"class namespace","type_short":"GhidraClass"},{"type_long":"ghidra.program.model.data.DataTypeManager","name":"dataTypeManager","comment":"data type manager which should be searched.","type_short":"DataTypeManager"}],"throws":[],"return":{"type_long":"ghidra.program.model.data.Structure","comment":"existing structure whose name matches the specified class namespace\n or null if not found.","type_short":"Structure"}},{"javadoc":"Find the structure data type which corresponds to the specified function's class namespace\n within the function's program.  \n The preferred structure will utilize a namespace-based category path, however, \n the match criteria can be fuzzy and relies primarily on the class name.\n@param classNamespace class namespace\n@param dataTypeManager data type manager which should be searched.\n@return existing structure whose name matches the specified function's class namespace\n or null if not found.","static":true,"name":"findExistingClassStruct","comment":"Find the structure data type which corresponds to the specified function's class namespace\n within the function's program.  \n The preferred structure will utilize a namespace-based category path, however, \n the match criteria can be fuzzy and relies primarily on the class name.","params":[{"type_long":"ghidra.program.model.listing.Function","name":"func","comment":"","type_short":"Function"}],"throws":[],"return":{"type_long":"ghidra.program.model.data.Structure","comment":"existing structure whose name matches the specified function's class namespace\n or null if not found.","type_short":"Structure"}},{"javadoc":"","static":true,"name":"equivalentVariableArrays","comment":"","params":[{"type_long":"ghidra.program.model.listing.Variable[]","name":"vars1","comment":"","type_short":"ghidra.program.model.listing.Variable[]"},{"type_long":"ghidra.program.model.listing.Variable[]","name":"vars2","comment":"","type_short":"ghidra.program.model.listing.Variable[]"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":true,"name":"equivalentVariables","comment":"","params":[{"type_long":"ghidra.program.model.listing.Variable","name":"var1","comment":"","type_short":"Variable"},{"type_long":"ghidra.program.model.listing.Variable","name":"var2","comment":"","type_short":"Variable"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}}],"name":"VariableUtilities","comment":"","fields":[]}
