{"implements":[],"javadoc":"Command for creating a thunk function at an address.","static":false,"extends":"ghidra.framework.cmd.BackgroundCommand","methods":[{"javadoc":"Constructs a new command for creating a thunk function.\n@param entry entry point address for the function to be created.\n@param body set of addresses to associated with the function to be created.\n The addresses must not already be included in the body of any existing function.\n If null, and entry corresponds to an existing function, that function will be\n converted to a thunk, otherwise an error will result.\n@param referencedFunctionAddr the function address to which this thunk refers.  If no function\n exists at that specified referencedFunctionAddr one will be created per the following scheme:\n <pre><ul>\n <li>If referencedFunctionAddr is not contained within a memory block, an external function will\n be created (a check will be done to look for an previously defined external location)<\/li>\n <li>If referencedFunctionAddr corresponds to an instruction, a new function will be\n created at that address.<\/li>\n <\/ul><\/pre>","static":false,"name":"<init>","comment":"Constructs a new command for creating a thunk function.","params":[{"type_long":"ghidra.program.model.address.Address","name":"entry","comment":"entry point address for the function to be created.","type_short":"Address"},{"type_long":"ghidra.program.model.address.AddressSetView","name":"body","comment":"set of addresses to associated with the function to be created.\n The addresses must not already be included in the body of any existing function.\n If null, and entry corresponds to an existing function, that function will be\n converted to a thunk, otherwise an error will result.","type_short":"AddressSetView"},{"type_long":"ghidra.program.model.address.Address","name":"referencedFunctionAddr","comment":"the function address to which this thunk refers.  If no function\n exists at that specified referencedFunctionAddr one will be created per the following scheme:\n \n If referencedFunctionAddr is not contained within a memory block, an external function will\n be created (a check will be done to look for an previously defined external location)\n If referencedFunctionAddr corresponds to an instruction, a new function will be\n created at that address.\n ","type_short":"Address"},{"type_long":"java.util.List<ghidra.program.model.address.Address>","name":"referringThunkAddresses","comment":"","type_short":"List"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Constructs a new command for creating a thunk function.\n@param entry entry point address for the function to be created.\n@param body set of addresses to associated with the function to be created.\n The addresses must not already be included in the body of any existing function.\n If null, and entry corresponds to an existing function, that function will be\n converted to a thunk, otherwise an error will result.\n@param referencedFunctionAddr the function address to which this thunk refers.  If no function\n exists at that specified referencedFunctionAddr one will be created per the following scheme:\n <pre><ul>\n <li>If referencedFunctionAddr is not contained within a memory block, an external function will\n be created (a check will be done to look for an previously defined external location)<\/li>\n <li>If referencedFunctionAddr corresponds to an instruction, a new function will be\n created at that address.<\/li>\n <\/ul><\/pre>","static":false,"name":"<init>","comment":"Constructs a new command for creating a thunk function.","params":[{"type_long":"ghidra.program.model.address.Address","name":"entry","comment":"entry point address for the function to be created.","type_short":"Address"},{"type_long":"ghidra.program.model.address.AddressSetView","name":"body","comment":"set of addresses to associated with the function to be created.\n The addresses must not already be included in the body of any existing function.\n If null, and entry corresponds to an existing function, that function will be\n converted to a thunk, otherwise an error will result.","type_short":"AddressSetView"},{"type_long":"ghidra.program.model.address.Address","name":"referencedFunctionAddr","comment":"the function address to which this thunk refers.  If no function\n exists at that specified referencedFunctionAddr one will be created per the following scheme:\n \n If referencedFunctionAddr is not contained within a memory block, an external function will\n be created (a check will be done to look for an previously defined external location)\n If referencedFunctionAddr corresponds to an instruction, a new function will be\n created at that address.\n ","type_short":"Address"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Constructs a new command for creating a thunk function.\n@param entry entry point address for the function to be created.\n@param body set of addresses to associated with the function to be created.\n The addresses must not already be included in the body of any existing function.\n If null, and entry corresponds to an existing function, that function will be\n converted to a thunk, otherwise an error will result.\n@param referencedSymbol the symbol which identifies the intended function to which this thunk refers.\n If no function exists at that specified referencedSymbol location, one will be created per the following scheme:\n <pre><ul>\n <li>If referencedFunctionAddr is not contained within a memory block, an external function will\n be created (a check will be done to look for an previously defined external location)<\/li>\n <li>If referencedFunctionAddr corresponds to an instruction, a new function will be\n created at that address.<\/li>\n <li>If referencedSymbol corresponds to an external CODE symbol, it will be converted to an\n external FUNCTION<\/li>\n <\/ul><\/pre>","static":false,"name":"<init>","comment":"Constructs a new command for creating a thunk function.","params":[{"type_long":"ghidra.program.model.address.Address","name":"entry","comment":"entry point address for the function to be created.","type_short":"Address"},{"type_long":"ghidra.program.model.address.AddressSetView","name":"body","comment":"set of addresses to associated with the function to be created.\n The addresses must not already be included in the body of any existing function.\n If null, and entry corresponds to an existing function, that function will be\n converted to a thunk, otherwise an error will result.","type_short":"AddressSetView"},{"type_long":"ghidra.program.model.symbol.Symbol","name":"referencedSymbol","comment":"the symbol which identifies the intended function to which this thunk refers.\n If no function exists at that specified referencedSymbol location, one will be created per the following scheme:\n \n If referencedFunctionAddr is not contained within a memory block, an external function will\n be created (a check will be done to look for an previously defined external location)\n If referencedFunctionAddr corresponds to an instruction, a new function will be\n created at that address.\n If referencedSymbol corresponds to an external CODE symbol, it will be converted to an\n external FUNCTION\n ","type_short":"Symbol"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Constructs a new command for creating a thunk function that can compute the function this function is thunking to.\n@param entry entry point address for the function to be created.\n@param checkForSideEffects true to check for side-effects that indicate it is not a pure thunk.\n \n The body may be computed.  References to the thunked to function may be created.\n \n If no function exists at the location being thunked, it will be created based on the above rules.","static":false,"name":"<init>","comment":"Constructs a new command for creating a thunk function that can compute the function this function is thunking to.","params":[{"type_long":"ghidra.program.model.address.Address","name":"entry","comment":"entry point address for the function to be created.","type_short":"Address"},{"type_long":"boolean","name":"checkForSideEffects","comment":"true to check for side-effects that indicate it is not a pure thunk.\n \n The body may be computed.  References to the thunked to function may be created.\n \n If no function exists at the location being thunked, it will be created based on the above rules.","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"applyTo","comment":"","params":[{"type_long":"ghidra.framework.model.DomainObject","name":"obj","comment":"","type_short":"DomainObject"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"@return function if create command was successful","static":false,"name":"getThunkFunction","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.listing.Function","comment":"function if create command was successful","type_short":"Function"}},{"javadoc":"@return the function referenced by the newly created thunk function\n is command was successful","static":false,"name":"getReferencedFunction","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.listing.Function","comment":"the function referenced by the newly created thunk function\n is command was successful","type_short":"Function"}},{"javadoc":"if the code starting at entry is a thunk, return the thunked addess if known.\n@param program code resides in\n@param entry start of the code\n@return the function address, Address.NO_ADDRESS if thunk but unknonw addr, null otherwise","static":true,"name":"getThunkedAddr","comment":"if the code starting at entry is a thunk, return the thunked addess if known.","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"code resides in","type_short":"Program"},{"type_long":"ghidra.program.model.address.Address","name":"entry","comment":"start of the code","type_short":"Address"}],"throws":[],"return":{"type_long":"ghidra.program.model.address.Address","comment":"the function address, Address.NO_ADDRESS if thunk but unknonw addr, null otherwise","type_short":"Address"}},{"javadoc":"Get the address that this function would thunk if it is a valid thunk\n@param program\n@param entry location to check for a thunk\n@param checkForSideEffects true if there should be no extra registers affected\n@return address that the thunk thunks,Address.NO_ADDRESS if thunk but unknown addr, null otherwise","static":true,"name":"getThunkedAddr","comment":"Get the address that this function would thunk if it is a valid thunk","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"","type_short":"Program"},{"type_long":"ghidra.program.model.address.Address","name":"entry","comment":"location to check for a thunk","type_short":"Address"},{"type_long":"boolean","name":"checkForSideEffects","comment":"true if there should be no extra registers affected","type_short":"boolean"}],"throws":[],"return":{"type_long":"ghidra.program.model.address.Address","comment":"address that the thunk thunks,Address.NO_ADDRESS if thunk but unknown addr, null otherwise","type_short":"Address"}},{"javadoc":"Check if this is a Thunking function.\n@return true if this is a function thunking another.","static":true,"name":"isThunk","comment":"Check if this is a Thunking function.","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"","type_short":"Program"},{"type_long":"ghidra.program.model.listing.Function","name":"func","comment":"","type_short":"Function"}],"throws":[],"return":{"type_long":"boolean","comment":"true if this is a function thunking another.","type_short":"boolean"}}],"name":"CreateThunkFunctionCmd","comment":"Command for creating a thunk function at an address.","fields":[]}
