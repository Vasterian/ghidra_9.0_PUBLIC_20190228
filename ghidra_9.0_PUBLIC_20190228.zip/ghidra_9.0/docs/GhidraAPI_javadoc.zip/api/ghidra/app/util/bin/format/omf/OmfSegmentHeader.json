{"implements":[],"javadoc":"","static":false,"extends":"ghidra.app.util.bin.format.omf.OmfRecord","methods":[{"javadoc":"","static":false,"name":"<init>","comment":"","params":[{"type_long":"ghidra.app.util.bin.BinaryReader","name":"reader","comment":"","type_short":"BinaryReader"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"@return true if this is a code segment","static":false,"name":"isCode","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if this is a code segment","type_short":"boolean"}},{"javadoc":"@return true if this segment is readable","static":false,"name":"isReadable","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if this segment is readable","type_short":"boolean"}},{"javadoc":"@return true if this segment is writable","static":false,"name":"isWritable","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if this segment is writable","type_short":"boolean"}},{"javadoc":"@return true if this segment is executable","static":false,"name":"isExecutable","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if this segment is executable","type_short":"boolean"}},{"javadoc":"@return the segment selector needed for this object","static":false,"name":"getFrameDatum","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"the segment selector needed for this object","type_short":"int"}},{"javadoc":"@param language is the Program language for this binary\n@return the starting Address for this segment","static":false,"name":"getAddress","comment":"","params":[{"type_long":"ghidra.program.model.lang.Language","name":"language","comment":"is the Program language for this binary","type_short":"Language"}],"throws":[],"return":{"type_long":"ghidra.program.model.address.Address","comment":"the starting Address for this segment","type_short":"Address"}},{"javadoc":"@return the name of this segment","static":false,"name":"getName","comment":"","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"the name of this segment","type_short":"String"}},{"javadoc":"@return the class name of this segment","static":false,"name":"getClassName","comment":"","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"the class name of this segment","type_short":"String"}},{"javadoc":"@return the name of the overlay, or the empty string","static":false,"name":"getOverlayName","comment":"","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"the name of the overlay, or the empty string","type_short":"String"}},{"javadoc":"@return the load image address for this segment","static":false,"name":"getStartAddress","comment":"","params":[],"throws":[],"return":{"type_long":"long","comment":"the load image address for this segment","type_short":"long"}},{"javadoc":"@return the length of the segment in bytes","static":false,"name":"getSegmentLength","comment":"","params":[],"throws":[],"return":{"type_long":"long","comment":"the length of the segment in bytes","type_short":"long"}},{"javadoc":"@return the alignment required for this segment","static":false,"name":"getAlignment","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"the alignment required for this segment","type_short":"int"}},{"javadoc":"@return special combining rules for this segment","static":false,"name":"getCombine","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"special combining rules for this segment","type_short":"int"}},{"javadoc":"@return true if this block uses filler other than zero bytes","static":false,"name":"hasNonZeroData","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if this block uses filler other than zero bytes","type_short":"boolean"}},{"javadoc":"Get an InputStream that reads in the raw data for this segment\n@param reader is the image file reader\n@return the InputStream\n@throws IOException for problems reading from the image file","static":false,"name":"getRawDataStream","comment":"Get an InputStream that reads in the raw data for this segment","params":[{"type_long":"ghidra.app.util.bin.BinaryReader","name":"reader","comment":"is the image file reader","type_short":"BinaryReader"}],"throws":[{"type_long":"java.io.IOException","comment":"for problems reading from the image file","type_short":"IOException"}],"return":{"type_long":"java.io.InputStream","comment":"the InputStream","type_short":"InputStream"}}],"name":"OmfSegmentHeader","comment":"","fields":[]}
