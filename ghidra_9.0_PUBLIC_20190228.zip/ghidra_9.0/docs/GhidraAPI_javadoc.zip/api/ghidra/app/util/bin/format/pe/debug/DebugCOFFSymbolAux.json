{"implements":["ghidra.app.util.bin.StructConverter"],"javadoc":"A class to represent the COFF Auxiliary Symbol data structure.\n <br>\n <pre>\n typedef union _IMAGE_AUX_SYMBOL {\n     struct {\n         DWORD    TagIndex;                      \/\/ struct, union, or enum tag index\n         union {\n             struct {\n                 WORD    Linenumber;             \/\/ declaration line number\n                 WORD    Size;                   \/\/ size of struct, union, or enum\n             } LnSz;\n            DWORD    TotalSize;\n         }Misc;\n         union {\n             struct {                            \/\/ if ISFCN, tag, or .bb\n                 DWORD    PointerToLinenumber;\n                 DWORD    PointerToNextFunction;\n             } Function;\n             struct {                            \/\/ if ISARY, up to 4 dimen.\n                 WORD     Dimension[4];\n             } Array;\n         } FcnAry;\n         WORD    TvIndex;                        \/\/ tv index\n     } Sym;\n     struct {\n         BYTE    Name[IMAGE_SIZEOF_SYMBOL];\n     } File;\n     struct {\n         DWORD   Length;                         \/\/ section length\n         WORD    NumberOfRelocations;            \/\/ number of relocation entries\n         WORD    NumberOfLinenumbers;            \/\/ number of line numbers\n         DWORD   CheckSum;                       \/\/ checksum for communal\n         SHORT   Number;                         \/\/ section number to associate with\n         BYTE    Selection;                      \/\/ communal selection type\n     } Section;\n } IMAGE_AUX_SYMBOL;","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"DO NOT USE THIS CONSTRUCTOR, USE create*(GenericFactory ...) FACTORY METHODS INSTEAD.","static":false,"name":"<init>","comment":"DO NOT USE THIS CONSTRUCTOR, USE create*(GenericFactory ...) FACTORY METHODS INSTEAD.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"@see java.lang.Object#toString()","static":false,"name":"toString","comment":"","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"","static":false,"name":"toDataType","comment":"","params":[],"throws":[{"type_long":"ghidra.util.exception.DuplicateNameException","comment":"","type_short":"DuplicateNameException"},{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"ghidra.program.model.data.DataType","comment":"","type_short":"DataType"}}],"name":"DebugCOFFSymbolAux","comment":"A class to represent the COFF Auxiliary Symbol data structure.\n \n \n typedef union _IMAGE_AUX_SYMBOL {\n     struct {\n         DWORD    TagIndex;                      \/\/ struct, union, or enum tag index\n         union {\n             struct {\n                 WORD    Linenumber;             \/\/ declaration line number\n                 WORD    Size;                   \/\/ size of struct, union, or enum\n             } LnSz;\n            DWORD    TotalSize;\n         }Misc;\n         union {\n             struct {                            \/\/ if ISFCN, tag, or .bb\n                 DWORD    PointerToLinenumber;\n                 DWORD    PointerToNextFunction;\n             } Function;\n             struct {                            \/\/ if ISARY, up to 4 dimen.\n                 WORD     Dimension[4];\n             } Array;\n         } FcnAry;\n         WORD    TvIndex;                        \/\/ tv index\n     } Sym;\n     struct {\n         BYTE    Name[IMAGE_SIZEOF_SYMBOL];\n     } File;\n     struct {\n         DWORD   Length;                         \/\/ section length\n         WORD    NumberOfRelocations;            \/\/ number of relocation entries\n         WORD    NumberOfLinenumbers;            \/\/ number of line numbers\n         DWORD   CheckSum;                       \/\/ checksum for communal\n         SHORT   Number;                         \/\/ section number to associate with\n         BYTE    Selection;                      \/\/ communal selection type\n     } Section;\n } IMAGE_AUX_SYMBOL;","fields":[{"type_long":"byte","javadoc":"","static":true,"name":"IMAGE_SIZEOF_AUX_SYMBOL","comment":"","type_short":"byte","constant_value":"18"}]}
