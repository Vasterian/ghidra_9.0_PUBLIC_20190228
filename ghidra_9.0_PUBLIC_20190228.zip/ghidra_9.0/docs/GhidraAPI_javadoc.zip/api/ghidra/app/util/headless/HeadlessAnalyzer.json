{"implements":[],"javadoc":"The class used kick-off and interact with headless processing.  All headless options have been \n broken out into their own class: {@link HeadlessOptions}.  This class is intended to be used \n one of two ways:\n <ul>\n   <li>Used by analyzeHeadless.bat and {@link AnalyzeHeadless} to perform headless analysis based\n   on arguments specified on the command line.<\/li>\n   <li>Used by another tool as a library to perform headless analysis.<\/li>\n <\/ul>","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"Gets a headless analyzer, initializing the application if necessary with the specified \n logging parameters.  An {@link IllegalStateException} will be thrown if the application has \n already been initialized or a headless analyzer has already been retrieved.  In these cases,\n the headless analyzer should be gotten with {@link HeadlessAnalyzer#getInstance()}.\n@param logFile The desired application log file.  If null, no application logging will take place.\n@param scriptLogFile The desired scripting log file.  If null, no script logging will take place.\n@param useLog4j true if log4j is to be used; otherwise, false.  If this class is being used by \n     another tool as a library, using log4j might interfere with that tool.\n@return An instance of a new headless analyzer.\n@throws IllegalStateException if an application or headless analyzer instance has already been initialized.\n@throws IOException if there was a problem reading the application.properties file.","static":true,"name":"getLoggableInstance","comment":"Gets a headless analyzer, initializing the application if necessary with the specified \n logging parameters.  An IllegalStateException will be thrown if the application has \n already been initialized or a headless analyzer has already been retrieved.  In these cases,\n the headless analyzer should be gotten with HeadlessAnalyzer#getInstance().","params":[{"type_long":"java.io.File","name":"logFile","comment":"The desired application log file.  If null, no application logging will take place.","type_short":"File"},{"type_long":"java.io.File","name":"scriptLogFile","comment":"The desired scripting log file.  If null, no script logging will take place.","type_short":"File"},{"type_long":"boolean","name":"useLog4j","comment":"true if log4j is to be used; otherwise, false.  If this class is being used by \n     another tool as a library, using log4j might interfere with that tool.","type_short":"boolean"}],"throws":[{"type_long":"java.lang.IllegalStateException","comment":"if an application or headless analyzer instance has already been initialized.","type_short":"IllegalStateException"},{"type_long":"java.io.IOException","comment":"if there was a problem reading the application.properties file.","type_short":"IOException"}],"return":{"type_long":"ghidra.app.util.headless.HeadlessAnalyzer","comment":"An instance of a new headless analyzer.","type_short":"HeadlessAnalyzer"}},{"javadoc":"Gets a headless analyzer instance, with the assumption that the application has already been\n initialized.  If this is called before the application has been initialized, it will \n initialize the application with no logging.\n@return An instance of a new headless analyzer.\n@throws IOException if there was a problem reading the application.properties file (only possible\n     if the application had not be initialized).","static":true,"name":"getInstance","comment":"Gets a headless analyzer instance, with the assumption that the application has already been\n initialized.  If this is called before the application has been initialized, it will \n initialize the application with no logging.","params":[],"throws":[{"type_long":"java.io.IOException","comment":"if there was a problem reading the application.properties file (only possible\n     if the application had not be initialized).","type_short":"IOException"}],"return":{"type_long":"ghidra.app.util.headless.HeadlessAnalyzer","comment":"An instance of a new headless analyzer.","type_short":"HeadlessAnalyzer"}},{"javadoc":"Resets the state of the headless analyzer to the default settings.","static":false,"name":"reset","comment":"Resets the state of the headless analyzer to the default settings.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Gets the headless analyzer's options.\n@return The headless analyer's options.","static":false,"name":"getOptions","comment":"Gets the headless analyzer's options.","params":[],"throws":[],"return":{"type_long":"ghidra.app.util.headless.HeadlessOptions","comment":"The headless analyer's options.","type_short":"HeadlessOptions"}},{"javadoc":"Process the optional import file\/directory list and process each imported file:\n <ol>\n <li>execute ordered list of pre-scripts<\/li>\n <li>perform auto-analysis if not disabled<\/li>\n <li>execute ordered list of post-scripts<\/li>\n <\/ol>\n If no import files or directories have been specified the ordered list \n of pre\/post scripts will be executed once.\n@param ghidraURL ghidra URL for existing server repository and optional\n                  folder path\n@param filesToImport directories and files to be imported (null or empty \n                      is acceptable if we are in -process mode)\n@throws IOException if there was an IO-related problem\n@throws MalformedURLException specified URL is invalid","static":false,"name":"processURL","comment":"Process the optional import file\/directory list and process each imported file:\n \n execute ordered list of pre-scripts\n perform auto-analysis if not disabled\n execute ordered list of post-scripts\n \n If no import files or directories have been specified the ordered list \n of pre\/post scripts will be executed once.","params":[{"type_long":"java.net.URL","name":"ghidraURL","comment":"ghidra URL for existing server repository and optional\n                  folder path","type_short":"URL"},{"type_long":"java.util.List<java.io.File>","name":"filesToImport","comment":"directories and files to be imported (null or empty \n                      is acceptable if we are in -process mode)","type_short":"List"}],"throws":[{"type_long":"java.io.IOException","comment":"if there was an IO-related problem","type_short":"IOException"},{"type_long":"java.net.MalformedURLException","comment":"specified URL is invalid","type_short":"MalformedURLException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Process the optional import file\/directory list and process each imported file:\n <ol>\n <li>execute ordered list of pre-scripts<\/li>\n <li>perform auto-analysis if not disabled<\/li>\n <li>execute ordered list of post-scripts<\/li>\n <\/ol>\n If no import files or directories have been specified the ordered list \n of pre\/post scripts will be executed once.\n@param projectLocation directory path of project \n \t\t\t\t\t\t  If project exists it will be opened, otherwise it will be created.\n@param projectName project name\n@param rootFolderPath root folder for imports\n@param filesToImport directories and files to be imported (null or empty is acceptable if\n        \t\t\t\twe are in -process mode)\n@throws IOException if there was an IO-related problem","static":false,"name":"processLocal","comment":"Process the optional import file\/directory list and process each imported file:\n \n execute ordered list of pre-scripts\n perform auto-analysis if not disabled\n execute ordered list of post-scripts\n \n If no import files or directories have been specified the ordered list \n of pre\/post scripts will be executed once.","params":[{"type_long":"java.lang.String","name":"projectLocation","comment":"directory path of project \n \t\t\t\t\t\t  If project exists it will be opened, otherwise it will be created.","type_short":"String"},{"type_long":"java.lang.String","name":"projectName","comment":"project name","type_short":"String"},{"type_long":"java.lang.String","name":"rootFolderPath","comment":"root folder for imports","type_short":"String"},{"type_long":"java.util.List<java.io.File>","name":"filesToImport","comment":"directories and files to be imported (null or empty is acceptable if\n        \t\t\t\twe are in -process mode)","type_short":"List"}],"throws":[{"type_long":"java.io.IOException","comment":"if there was an IO-related problem","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Checks to see if the most recent analysis timed out.\n@return true if the most recent analysis timed out; otherwise, false.","static":false,"name":"checkAnalysisTimedOut","comment":"Checks to see if the most recent analysis timed out.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if the most recent analysis timed out; otherwise, false.","type_short":"boolean"}}],"name":"HeadlessAnalyzer","comment":"The class used kick-off and interact with headless processing.  All headless options have been \n broken out into their own class: HeadlessOptions.  This class is intended to be used \n one of two ways:\n \n   Used by analyzeHeadless.bat and AnalyzeHeadless to perform headless analysis based\n   on arguments specified on the command line.\n   Used by another tool as a library to perform headless analysis.\n ","fields":[]}
