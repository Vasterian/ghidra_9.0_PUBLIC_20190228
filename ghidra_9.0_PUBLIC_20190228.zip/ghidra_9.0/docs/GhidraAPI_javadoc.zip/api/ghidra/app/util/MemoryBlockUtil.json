{"implements":[],"javadoc":"A utility class that encapsulates the creation\n of different types of memory blocks in a program.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"Constructs a new memory block utility.\n@param program the program having memory blocks created\n@param handler the memory conflict handler","static":false,"name":"<init>","comment":"Constructs a new memory block utility.","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program","comment":"the program having memory blocks created","type_short":"Program"},{"type_long":"ghidra.app.util.importer.MemoryConflictHandler","name":"handler","comment":"the memory conflict handler","type_short":"MemoryConflictHandler"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Return error messages.","static":false,"name":"getMessages","comment":"Return error messages.","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"This method performs cleanup with this object is no\n longer needed. This method should be invoked\n to prevent potential memory leaks.","static":false,"name":"dispose","comment":"This method performs cleanup with this object is no\n longer needed. This method should be invoked\n to prevent potential memory leaks.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Creates a bit or byte mapped memory block.\n@param isBitMapped if true, creates a bit mapped block, otherwise a byte mapped block\n@param name name of the block\n@param start start address of the block\n@param base base address for the bit block\n@param length length of the block\n@param comment comment for the block\n@param source source of the block, where it originated\n@param r is block read-only?\n@param w is block writeable?\n@param x is block executable?\n@return the newly created memory block or null (see messages)","static":false,"name":"createMappedBlock","comment":"Creates a bit or byte mapped memory block.","params":[{"type_long":"boolean","name":"isBitMapped","comment":"if true, creates a bit mapped block, otherwise a byte mapped block","type_short":"boolean"},{"type_long":"java.lang.String","name":"name","comment":"name of the block","type_short":"String"},{"type_long":"ghidra.program.model.address.Address","name":"start","comment":"start address of the block","type_short":"Address"},{"type_long":"ghidra.program.model.address.Address","name":"base","comment":"base address for the bit block","type_short":"Address"},{"type_long":"int","name":"length","comment":"length of the block","type_short":"int"},{"type_long":"java.lang.String","name":"comment","comment":"comment for the block","type_short":"String"},{"type_long":"java.lang.String","name":"source","comment":"source of the block, where it originated","type_short":"String"},{"type_long":"boolean","name":"r","comment":"is block read-only?","type_short":"boolean"},{"type_long":"boolean","name":"w","comment":"is block writeable?","type_short":"boolean"},{"type_long":"boolean","name":"x","comment":"is block executable?","type_short":"boolean"}],"throws":[],"return":{"type_long":"ghidra.program.model.mem.MemoryBlock","comment":"the newly created memory block or null (see messages)","type_short":"MemoryBlock"}},{"javadoc":"Creates an uninitialized memory block.\n@param isOverlay true if overlay space and block should be createds\n@param name name of the block\n@param start start address of the block\n@param length length of the block\n@param comment comment for the block\n@param source source of the block, where it originated\n@param r is block read-only?\n@param w is block writeable?\n@param x is block executable?\n@return the newly created memory block or null (see messages)","static":false,"name":"createUninitializedBlock","comment":"Creates an uninitialized memory block.","params":[{"type_long":"boolean","name":"isOverlay","comment":"true if overlay space and block should be createds","type_short":"boolean"},{"type_long":"java.lang.String","name":"name","comment":"name of the block","type_short":"String"},{"type_long":"ghidra.program.model.address.Address","name":"start","comment":"start address of the block","type_short":"Address"},{"type_long":"long","name":"length","comment":"length of the block","type_short":"long"},{"type_long":"java.lang.String","name":"comment","comment":"comment for the block","type_short":"String"},{"type_long":"java.lang.String","name":"source","comment":"source of the block, where it originated","type_short":"String"},{"type_long":"boolean","name":"r","comment":"is block read-only?","type_short":"boolean"},{"type_long":"boolean","name":"w","comment":"is block writeable?","type_short":"boolean"},{"type_long":"boolean","name":"x","comment":"is block executable?","type_short":"boolean"}],"throws":[],"return":{"type_long":"ghidra.program.model.mem.MemoryBlock","comment":"the newly created memory block or null (see messages)","type_short":"MemoryBlock"}},{"javadoc":"Creates an initialized memory block using a byte array.\n@param name name of the block\n@param start start address of the block\n@param data the bytes for the memory block\n@param comment comment for the block\n@param source source of the block, where it originated\n@param r is block read-only?\n@param w is block writeable?\n@param x is block executable?\n@param monitor the task monitor\n@return the newly created memory block or null (see messages)","static":false,"name":"createInitializedBlock","comment":"Creates an initialized memory block using a byte array.","params":[{"type_long":"java.lang.String","name":"name","comment":"name of the block","type_short":"String"},{"type_long":"ghidra.program.model.address.Address","name":"start","comment":"start address of the block","type_short":"Address"},{"type_long":"byte[]","name":"data","comment":"the bytes for the memory block","type_short":"byte[]"},{"type_long":"java.lang.String","name":"comment","comment":"comment for the block","type_short":"String"},{"type_long":"java.lang.String","name":"source","comment":"source of the block, where it originated","type_short":"String"},{"type_long":"boolean","name":"r","comment":"is block read-only?","type_short":"boolean"},{"type_long":"boolean","name":"w","comment":"is block writeable?","type_short":"boolean"},{"type_long":"boolean","name":"x","comment":"is block executable?","type_short":"boolean"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"the task monitor","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.program.model.address.AddressOverflowException","comment":"","type_short":"AddressOverflowException"}],"return":{"type_long":"ghidra.program.model.mem.MemoryBlock","comment":"the newly created memory block or null (see messages)","type_short":"MemoryBlock"}},{"javadoc":"Creates an initialized memory block using the specified input stream.  If the length\n of the block is greater than the maximum size of a memory block (0x40000000), then\n the block is broken in to multiple blocks.  The first block created will have the\n given name and each subsequent block will have \".1\", \".2\", etc., appended to the base\n name. The first block created will be the one returned by this call.\n <p>\n The MemoryConflictHandler is responsible for determining\n how to deal with memory conflict exceptions that occur with\n initialized memory blocks.\n <p>\n Any uninitialized memory blocks involved in the conflict\n will be removed and replaced with initialized memory blocks.\n <p>\n If only a portion of the uninitialized memory block has caused a\n conflict, then only that portion will be removed and replaced.\n Subsequently, the uninitialized memory blocks boundaries may change.\n <p>\n When other types of memory blocks are involved in a conflict,\n only the bytes will be replaced. The boundaries will not change.\n Initialized memory blocks will be created around the existing ones.\n Also, when bytes change from under an existing memory block, then\n all code units in the range of the conflict will be cleared.\n@param name name of the block\n@param start start address of the block\n@param dataInput an input stream containing the bytes for the block\n@param dataLength length of the block\n@param comment comment for the block\n@param source source of the block, where it originated\n@param r is block read-only?\n@param w is block writeable?\n@param x is block executable?\n@param monitor the task monitor\n@return new block or null on failure (see messages)","static":false,"name":"createInitializedBlock","comment":"Creates an initialized memory block using the specified input stream.  If the length\n of the block is greater than the maximum size of a memory block (0x40000000), then\n the block is broken in to multiple blocks.  The first block created will have the\n given name and each subsequent block will have \".1\", \".2\", etc., appended to the base\n name. The first block created will be the one returned by this call.\n \n The MemoryConflictHandler is responsible for determining\n how to deal with memory conflict exceptions that occur with\n initialized memory blocks.\n \n Any uninitialized memory blocks involved in the conflict\n will be removed and replaced with initialized memory blocks.\n \n If only a portion of the uninitialized memory block has caused a\n conflict, then only that portion will be removed and replaced.\n Subsequently, the uninitialized memory blocks boundaries may change.\n \n When other types of memory blocks are involved in a conflict,\n only the bytes will be replaced. The boundaries will not change.\n Initialized memory blocks will be created around the existing ones.\n Also, when bytes change from under an existing memory block, then\n all code units in the range of the conflict will be cleared.","params":[{"type_long":"java.lang.String","name":"name","comment":"name of the block","type_short":"String"},{"type_long":"ghidra.program.model.address.Address","name":"start","comment":"start address of the block","type_short":"Address"},{"type_long":"java.io.InputStream","name":"dataInput","comment":"an input stream containing the bytes for the block","type_short":"InputStream"},{"type_long":"long","name":"dataLength","comment":"length of the block","type_short":"long"},{"type_long":"java.lang.String","name":"comment","comment":"comment for the block","type_short":"String"},{"type_long":"java.lang.String","name":"source","comment":"source of the block, where it originated","type_short":"String"},{"type_long":"boolean","name":"r","comment":"is block read-only?","type_short":"boolean"},{"type_long":"boolean","name":"w","comment":"is block writeable?","type_short":"boolean"},{"type_long":"boolean","name":"x","comment":"is block executable?","type_short":"boolean"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"the task monitor","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.program.model.address.AddressOverflowException","comment":"","type_short":"AddressOverflowException"}],"return":{"type_long":"ghidra.program.model.mem.MemoryBlock","comment":"new block or null on failure (see messages)","type_short":"MemoryBlock"}},{"javadoc":"Creates an initialized overlay memory block using the specified input stream.\n@param name name of the block\n@param start start address of the block\n@param dataInput an input stream containing the bytes for the block\n@param dataLength length of the block\n@param comment comment for the block\n@param source source of the block, where it originated\n@param r is block read-only?\n@param w is block writeable?\n@param x is block executable?\n@param monitor the task monitor\n@return the newly created memory block","static":false,"name":"createOverlayBlock","comment":"Creates an initialized overlay memory block using the specified input stream.","params":[{"type_long":"java.lang.String","name":"name","comment":"name of the block","type_short":"String"},{"type_long":"ghidra.program.model.address.Address","name":"start","comment":"start address of the block","type_short":"Address"},{"type_long":"java.io.InputStream","name":"dataInput","comment":"an input stream containing the bytes for the block","type_short":"InputStream"},{"type_long":"long","name":"dataLength","comment":"length of the block","type_short":"long"},{"type_long":"java.lang.String","name":"comment","comment":"comment for the block","type_short":"String"},{"type_long":"java.lang.String","name":"source","comment":"source of the block, where it originated","type_short":"String"},{"type_long":"boolean","name":"r","comment":"is block read-only?","type_short":"boolean"},{"type_long":"boolean","name":"w","comment":"is block writeable?","type_short":"boolean"},{"type_long":"boolean","name":"x","comment":"is block executable?","type_short":"boolean"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"the task monitor","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.program.model.address.AddressOverflowException","comment":"","type_short":"AddressOverflowException"},{"type_long":"ghidra.util.exception.DuplicateNameException","comment":"","type_short":"DuplicateNameException"}],"return":{"type_long":"ghidra.program.model.mem.MemoryBlock","comment":"the newly created memory block","type_short":"MemoryBlock"}}],"name":"MemoryBlockUtil","comment":"A utility class that encapsulates the creation\n of different types of memory blocks in a program.","fields":[]}
