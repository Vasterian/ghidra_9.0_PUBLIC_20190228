{"implements":[],"javadoc":"<p>\n A class to respresent the Information Block\n defined in the Windows new-style executable.\n <\/p>\n <p>\n ...as defined in WINNT.H\n <\/p>\n <pre>\n typedef struct _IMAGE_OS2_HEADER {      \/\/ OS\/2 .EXE header\n     WORD   ne_magic;                    \/\/ Magic number\n     CHAR   ne_ver;                      \/\/ Version number\n     CHAR   ne_rev;                      \/\/ Revision number\n     WORD   ne_enttab;                   \/\/ Offset of Entry Table\n     WORD   ne_cbenttab;                 \/\/ Number of bytes in Entry Table\n     LONG   ne_crc;                      \/\/ Checksum of whole file\n     WORD   ne_flags;                    \/\/ Flag word\n     WORD   ne_autodata;                 \/\/ Automatic data segment number\n     WORD   ne_heap;                     \/\/ Initial heap allocation\n     WORD   ne_stack;                    \/\/ Initial stack allocation\n     LONG   ne_csip;                     \/\/ Initial CS:IP setting\n     LONG   ne_sssp;                     \/\/ Initial SS:SP setting\n     WORD   ne_cseg;                     \/\/ Count of file segments\n     WORD   ne_cmod;                     \/\/ Entries in Module Reference Table\n     WORD   ne_cbnrestab;                \/\/ Size of non-resident name table\n     WORD   ne_segtab;                   \/\/ Offset of Segment Table\n     WORD   ne_rsrctab;                  \/\/ Offset of Resource Table\n     WORD   ne_restab;                   \/\/ Offset of resident name table\n     WORD   ne_modtab;                   \/\/ Offset of Module Reference Table\n     WORD   ne_imptab;                   \/\/ Offset of Imported Names Table\n     LONG   ne_nrestab;                  \/\/ Offset of Non-resident Names Table\n     WORD   ne_cmovent;                  \/\/ Count of movable entries\n     WORD   ne_align;                    \/\/ Segment alignment shift count\n     WORD   ne_cres;                     \/\/ Count of resource segments\n     BYTE   ne_exetyp;                   \/\/ Target Operating system\n     BYTE   ne_flagsothers;              \/\/ Other .EXE flags\n     WORD   ne_pretthunks;               \/\/ offset to return thunks\n     WORD   ne_psegrefbytes;             \/\/ offset to segment ref. bytes\n     WORD   ne_swaparea;                 \/\/ Minimum code swap area size\n     WORD   ne_expver;                   \/\/ Expected Windows version number\n } IMAGE_OS2_HEADER, *PIMAGE_OS2_HEADER;\n <\/pre>","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"Returns the magic number.\n@return the magic number","static":false,"name":"getMagicNumber","comment":"Returns the magic number.","params":[],"throws":[],"return":{"type_long":"short","comment":"the magic number","type_short":"short"}},{"javadoc":"Returns the version number.\n@return the version number","static":false,"name":"getVersion","comment":"Returns the version number.","params":[],"throws":[],"return":{"type_long":"short","comment":"the version number","type_short":"short"}},{"javadoc":"Returns the revision number.\n@return the revision number","static":false,"name":"getRevision","comment":"Returns the revision number.","params":[],"throws":[],"return":{"type_long":"short","comment":"the revision number","type_short":"short"}},{"javadoc":"Returns the checksum.\n@return the checksum","static":false,"name":"getChecksum","comment":"Returns the checksum.","params":[],"throws":[],"return":{"type_long":"int","comment":"the checksum","type_short":"int"}},{"javadoc":"Returns the initial heap size.\n@return the initial heap size","static":false,"name":"getInitialHeapSize","comment":"Returns the initial heap size.","params":[],"throws":[],"return":{"type_long":"short","comment":"the initial heap size","type_short":"short"}},{"javadoc":"Returns the initial stack size.\n@return the initial stack size","static":false,"name":"getInitialStackSize","comment":"Returns the initial stack size.","params":[],"throws":[],"return":{"type_long":"short","comment":"the initial stack size","type_short":"short"}},{"javadoc":"Returns the target operating system.\n@return the target operating system","static":false,"name":"getTargetOpSys","comment":"Returns the target operating system.","params":[],"throws":[],"return":{"type_long":"byte","comment":"the target operating system","type_short":"byte"}},{"javadoc":"Returns the minimum code swap size.\n@return the minimum code swap size","static":false,"name":"getMinCodeSwapSize","comment":"Returns the minimum code swap size.","params":[],"throws":[],"return":{"type_long":"short","comment":"the minimum code swap size","type_short":"short"}},{"javadoc":"Returns the expected windows version.\n@return the expected windows version","static":false,"name":"getExpectedWindowsVersion","comment":"Returns the expected windows version.","params":[],"throws":[],"return":{"type_long":"short","comment":"the expected windows version","type_short":"short"}},{"javadoc":"Returns the automatic data segment.\n@return the automatic data segment","static":false,"name":"getAutomaticDataSegment","comment":"Returns the automatic data segment.","params":[],"throws":[],"return":{"type_long":"short","comment":"the automatic data segment","type_short":"short"}},{"javadoc":"Returns the other flags.\n@return the other flags","static":false,"name":"getOtherFlags","comment":"Returns the other flags.","params":[],"throws":[],"return":{"type_long":"byte","comment":"the other flags","type_short":"byte"}},{"javadoc":"Returns a string representation of the other flags.\n@return a string representation of the other flags","static":false,"name":"getOtherFlagsAsString","comment":"Returns a string representation of the other flags.","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"a string representation of the other flags","type_short":"String"}},{"javadoc":"Returns the program flags.\n@return the program flags","static":false,"name":"getProgramFlags","comment":"Returns the program flags.","params":[],"throws":[],"return":{"type_long":"byte","comment":"the program flags","type_short":"byte"}},{"javadoc":"Returns the application flags.\n@return the application flags","static":false,"name":"getApplicationFlags","comment":"Returns the application flags.","params":[],"throws":[],"return":{"type_long":"byte","comment":"the application flags","type_short":"byte"}},{"javadoc":"Returns the segment portion of the entry point.\n@return the segment portion of the entry point","static":false,"name":"getEntryPointSegment","comment":"Returns the segment portion of the entry point.","params":[],"throws":[],"return":{"type_long":"short","comment":"the segment portion of the entry point","type_short":"short"}},{"javadoc":"Returns the offset portion of the entry point.\n@return the offset portion of the entry point","static":false,"name":"getEntryPointOffset","comment":"Returns the offset portion of the entry point.","params":[],"throws":[],"return":{"type_long":"short","comment":"the offset portion of the entry point","type_short":"short"}},{"javadoc":"Returns the segment portion of the stack pointer.\n@return the segment portion of the stack pointer","static":false,"name":"getStackPointerSegment","comment":"Returns the segment portion of the stack pointer.","params":[],"throws":[],"return":{"type_long":"short","comment":"the segment portion of the stack pointer","type_short":"short"}},{"javadoc":"Returns the offset portion of the stack pointer.\n@return the offset portion of the stack pointer","static":false,"name":"getStackPointerOffset","comment":"Returns the offset portion of the stack pointer.","params":[],"throws":[],"return":{"type_long":"short","comment":"the offset portion of the stack pointer","type_short":"short"}},{"javadoc":"Returns a string represention of the target operating system.\n@return a string represention of the target operating system","static":false,"name":"getTargetOpSysAsString","comment":"Returns a string represention of the target operating system.","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"a string represention of the target operating system","type_short":"String"}},{"javadoc":"Returns a string represention of the application flags.\n@return a string represention of the application flags","static":false,"name":"getApplicationFlagsAsString","comment":"Returns a string represention of the application flags.","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"a string represention of the application flags","type_short":"String"}},{"javadoc":"Returns a string represention of the program flags.\n@return a string represention of the program flags","static":false,"name":"getProgramFlagsAsString","comment":"Returns a string represention of the program flags.","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"a string represention of the program flags","type_short":"String"}}],"name":"InformationBlock","comment":"\n A class to respresent the Information Block\n defined in the Windows new-style executable.\n \n \n ...as defined in WINNT.H\n \n \n typedef struct _IMAGE_OS2_HEADER {      \/\/ OS\/2 .EXE header\n     WORD   ne_magic;                    \/\/ Magic number\n     CHAR   ne_ver;                      \/\/ Version number\n     CHAR   ne_rev;                      \/\/ Revision number\n     WORD   ne_enttab;                   \/\/ Offset of Entry Table\n     WORD   ne_cbenttab;                 \/\/ Number of bytes in Entry Table\n     LONG   ne_crc;                      \/\/ Checksum of whole file\n     WORD   ne_flags;                    \/\/ Flag word\n     WORD   ne_autodata;                 \/\/ Automatic data segment number\n     WORD   ne_heap;                     \/\/ Initial heap allocation\n     WORD   ne_stack;                    \/\/ Initial stack allocation\n     LONG   ne_csip;                     \/\/ Initial CS:IP setting\n     LONG   ne_sssp;                     \/\/ Initial SS:SP setting\n     WORD   ne_cseg;                     \/\/ Count of file segments\n     WORD   ne_cmod;                     \/\/ Entries in Module Reference Table\n     WORD   ne_cbnrestab;                \/\/ Size of non-resident name table\n     WORD   ne_segtab;                   \/\/ Offset of Segment Table\n     WORD   ne_rsrctab;                  \/\/ Offset of Resource Table\n     WORD   ne_restab;                   \/\/ Offset of resident name table\n     WORD   ne_modtab;                   \/\/ Offset of Module Reference Table\n     WORD   ne_imptab;                   \/\/ Offset of Imported Names Table\n     LONG   ne_nrestab;                  \/\/ Offset of Non-resident Names Table\n     WORD   ne_cmovent;                  \/\/ Count of movable entries\n     WORD   ne_align;                    \/\/ Segment alignment shift count\n     WORD   ne_cres;                     \/\/ Count of resource segments\n     BYTE   ne_exetyp;                   \/\/ Target Operating system\n     BYTE   ne_flagsothers;              \/\/ Other .EXE flags\n     WORD   ne_pretthunks;               \/\/ offset to return thunks\n     WORD   ne_psegrefbytes;             \/\/ offset to segment ref. bytes\n     WORD   ne_swaparea;                 \/\/ Minimum code swap area size\n     WORD   ne_expver;                   \/\/ Expected Windows version number\n } IMAGE_OS2_HEADER, *PIMAGE_OS2_HEADER;\n ","fields":[{"type_long":"byte","javadoc":"Program flags: no auto data segments","static":true,"name":"FLAGS_PROG_NO_AUTO_DATA","comment":"Program flags: no auto data segments","type_short":"byte","constant_value":"0"},{"type_long":"byte","javadoc":"Program flags: single data segment","static":true,"name":"FLAGS_PROG_SINGLE_DATA","comment":"Program flags: single data segment","type_short":"byte","constant_value":"1"},{"type_long":"byte","javadoc":"Program flags: multiple data segments","static":true,"name":"FLAGS_PROG_MULTIPLE_DATA","comment":"Program flags: multiple data segments","type_short":"byte","constant_value":"2"},{"type_long":"byte","javadoc":"","static":true,"name":"FLAGS_PROG_GLOBAL_INIT","comment":"","type_short":"byte","constant_value":"4"},{"type_long":"byte","javadoc":"","static":true,"name":"FLAGS_PROG_PROTECTED_MODE","comment":"","type_short":"byte","constant_value":"8"},{"type_long":"byte","javadoc":"","static":true,"name":"FLAGS_PROG_8086","comment":"","type_short":"byte","constant_value":"16"},{"type_long":"byte","javadoc":"","static":true,"name":"FLAGS_PROG_80286","comment":"","type_short":"byte","constant_value":"32"},{"type_long":"byte","javadoc":"","static":true,"name":"FLAGS_PROG_80386","comment":"","type_short":"byte","constant_value":"64"},{"type_long":"byte","javadoc":"","static":true,"name":"FLAGS_PROG_80x87","comment":"","type_short":"byte","constant_value":"-128"},{"type_long":"byte","javadoc":"Is application full screen?","static":true,"name":"FLAGS_APP_FULL_SCREEN","comment":"Is application full screen?","type_short":"byte","constant_value":"1"},{"type_long":"byte","javadoc":"Is application compatible with Windows Program Manager?","static":true,"name":"FLAGS_APP_WIN_PM_COMPATIBLE","comment":"Is application compatible with Windows Program Manager?","type_short":"byte","constant_value":"2"},{"type_long":"byte","javadoc":"Does application use Windows Program Manager?","static":true,"name":"FLAGS_APP_WINDOWS_PM","comment":"Does application use Windows Program Manager?","type_short":"byte","constant_value":"3"},{"type_long":"byte","javadoc":"Is application designed for OS\/2?","static":true,"name":"FLAGS_APP_OS2","comment":"Is application designed for OS\/2?","type_short":"byte","constant_value":"4"},{"type_long":"byte","javadoc":"","static":true,"name":"FLAGS_APP_LOAD_CODE","comment":"","type_short":"byte","constant_value":"8"},{"type_long":"byte","javadoc":"","static":true,"name":"FLAGS_APP_LINK_ERRS","comment":"","type_short":"byte","constant_value":"16"},{"type_long":"byte","javadoc":"","static":true,"name":"FLAGS_APP_NONCONFORMING_PROG","comment":"","type_short":"byte","constant_value":"32"},{"type_long":"byte","javadoc":"","static":true,"name":"FLAGS_APP_LIBRARY_MODULE","comment":"","type_short":"byte","constant_value":"-128"},{"type_long":"byte","javadoc":"Unknown executable type","static":true,"name":"EXETYPE_UNKNOWN","comment":"Unknown executable type","type_short":"byte","constant_value":"0"},{"type_long":"byte","javadoc":"OS\/2 executable","static":true,"name":"EXETYPE_OS2","comment":"OS\/2 executable","type_short":"byte","constant_value":"1"},{"type_long":"byte","javadoc":"Windows executable","static":true,"name":"EXETYPE_WINDOWS","comment":"Windows executable","type_short":"byte","constant_value":"2"},{"type_long":"byte","javadoc":"European DOS 4.x executable","static":true,"name":"EXETYPE_EUROPEAN_DOS_4","comment":"European DOS 4.x executable","type_short":"byte","constant_value":"4"},{"type_long":"byte","javadoc":"Reserved executable Type","static":true,"name":"EXETYPE_RESERVED4","comment":"Reserved executable Type","type_short":"byte","constant_value":"8"},{"type_long":"byte","javadoc":"Windows 386 executable","static":true,"name":"EXETYPE_WINDOWS_386","comment":"Windows 386 executable","type_short":"byte","constant_value":"4"},{"type_long":"byte","javadoc":"Borland Operating System Services executable","static":true,"name":"EXETYPE_BOSS","comment":"Borland Operating System Services executable","type_short":"byte","constant_value":"5"},{"type_long":"byte","javadoc":"Pharlap 286 OS\/2 executable","static":true,"name":"EXETYPE_PHARLAP_286_OS2","comment":"Pharlap 286 OS\/2 executable","type_short":"byte","constant_value":"-127"},{"type_long":"byte","javadoc":"Pharlap 386 Windows executable","static":true,"name":"EXETYPE_PHARLAP_286_WIN","comment":"Pharlap 386 Windows executable","type_short":"byte","constant_value":"-126"},{"type_long":"byte","javadoc":"Supports long names","static":true,"name":"OTHER_FLAGS_SUPPORTS_LONG_NAMES","comment":"Supports long names","type_short":"byte","constant_value":"0"},{"type_long":"byte","javadoc":"Protected mode","static":true,"name":"OTHER_FLAGS_PROTECTED_MODE","comment":"Protected mode","type_short":"byte","constant_value":"1"},{"type_long":"byte","javadoc":"Proportional font","static":true,"name":"OTHER_FLAGS_PROPORTIONAL_FONT","comment":"Proportional font","type_short":"byte","constant_value":"2"},{"type_long":"byte","javadoc":"Gangload area","static":true,"name":"OTHER_FLAGS_GANGLOAD_AREA","comment":"Gangload area","type_short":"byte","constant_value":"4"}]}
