{"implements":["ghidra.app.util.bin.ByteArrayConverter","ghidra.app.util.bin.StructConverter"],"javadoc":"A class to represent the Elf32_Rel and Elf64_Rel data structure.\n <br>\n <pre>\n typedef uint32_t Elf32_Addr;\n typedef uint64_t Elf64_Addr;\n typedef uint32_t Elf32_Word;\n typedef uint64_t Elf64_Xword;\n \n REL entry:\n \n typedef struct {\n     Elf32_Addr   r_offset;\n     Elf32_Word   r_info;\n } Elf32_Rel;\n \n typedef struct {\n     Elf64_Addr   r_offset;\n     Elf64_Xword  r_info;\n } Elf64_Rel;\n \n RELA entry with addend:\n \n  * typedef struct {\n     Elf32_Addr    r_offset;\n     Elf32_Word    r_info;\n     Elf32_Sword   r_addend;\n } Elf32_Rela;\n \n typedef struct {\n     Elf64_Addr    r_offset;   \/\/Address\n     Elf64_Xword   r_info;     \/\/Relocation type and symbol index\n     Elf64_Sxword  r_addend;   \/\/Addend \n } Elf64_Rela;\n\n <\/pre>","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"DO NOT USE THIS CONSTRUCTOR, USE create*(GenericFactory ...) FACTORY METHODS INSTEAD.\n@see ElfRelocation#createElfRelocation","static":false,"name":"<init>","comment":"DO NOT USE THIS CONSTRUCTOR, USE create*(GenericFactory ...) FACTORY METHODS INSTEAD.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"@return index of relocation within its corresponding relocation table","static":false,"name":"getRelocationIndex","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"index of relocation within its corresponding relocation table","type_short":"int"}},{"javadoc":"This member gives the location at which to apply the relocation action. \n \n For a relocatable file, the value is the byte offset from the \n beginning of the section to the storage unit affected by the relocation. \n \n For an executable file or a shared object, the value is the virtual address of\n the storage unit affected by the relocation.\n@return the location at which to apply the relocation","static":false,"name":"getOffset","comment":"This member gives the location at which to apply the relocation action. \n \n For a relocatable file, the value is the byte offset from the \n beginning of the section to the storage unit affected by the relocation. \n \n For an executable file or a shared object, the value is the virtual address of\n the storage unit affected by the relocation.","params":[],"throws":[],"return":{"type_long":"long","comment":"the location at which to apply the relocation","type_short":"long"}},{"javadoc":"Sets the relocation offset to the new specified value.\n@param offset the new offset value","static":false,"name":"setOffset","comment":"Sets the relocation offset to the new specified value.","params":[{"type_long":"int","name":"offset","comment":"the new offset value","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Sets the relocation offset to the new specified value.\n@param offset the new offset value","static":false,"name":"setOffset","comment":"Sets the relocation offset to the new specified value.","params":[{"type_long":"long","name":"offset","comment":"the new offset value","type_short":"long"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns the symbol index where the relocation must be made.\n@return the symbol index","static":false,"name":"getSymbolIndex","comment":"Returns the symbol index where the relocation must be made.","params":[],"throws":[],"return":{"type_long":"int","comment":"the symbol index","type_short":"int"}},{"javadoc":"The type of relocation to apply.\n NOTE: Relocation types are processor-specific.\n@return type of relocation to apply","static":false,"name":"getType","comment":"The type of relocation to apply.\n NOTE: Relocation types are processor-specific.","params":[],"throws":[],"return":{"type_long":"int","comment":"type of relocation to apply","type_short":"int"}},{"javadoc":"Returns the r_info relocation entry field value\n@return r_info value","static":false,"name":"getRelocationInfo","comment":"Returns the r_info relocation entry field value","params":[],"throws":[],"return":{"type_long":"long","comment":"r_info value","type_short":"long"}},{"javadoc":"This member specifies a constant addend used to compute \n the value to be stored into the relocatable field.  This\n value will be 0 for REL entries which do not supply an addend.\n@return a constant addend","static":false,"name":"getAddend","comment":"This member specifies a constant addend used to compute \n the value to be stored into the relocatable field.  This\n value will be 0 for REL entries which do not supply an addend.","params":[],"throws":[],"return":{"type_long":"long","comment":"a constant addend","type_short":"long"}},{"javadoc":"Returns true if this is a RELA entry with addend\n@return true if this is a RELA entry with addend","static":false,"name":"hasAddend","comment":"Returns true if this is a RELA entry with addend","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if this is a RELA entry with addend","type_short":"boolean"}},{"javadoc":"","static":false,"name":"toDataType","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.data.DataType","comment":"","type_short":"DataType"}},{"javadoc":"@see ghidra.app.util.bin.ByteArrayConverter#toBytes(ghidra.util.DataConverter)","static":false,"name":"toBytes","comment":"","params":[{"type_long":"ghidra.util.DataConverter","name":"dc","comment":"","type_short":"DataConverter"}],"throws":[],"return":{"type_long":"byte[]","comment":"","type_short":"byte[]"}},{"javadoc":"","static":false,"name":"toString","comment":"","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}}],"name":"ElfRelocation","comment":"A class to represent the Elf32_Rel and Elf64_Rel data structure.\n \n \n typedef uint32_t Elf32_Addr;\n typedef uint64_t Elf64_Addr;\n typedef uint32_t Elf32_Word;\n typedef uint64_t Elf64_Xword;\n \n REL entry:\n \n typedef struct {\n     Elf32_Addr   r_offset;\n     Elf32_Word   r_info;\n } Elf32_Rel;\n \n typedef struct {\n     Elf64_Addr   r_offset;\n     Elf64_Xword  r_info;\n } Elf64_Rel;\n \n RELA entry with addend:\n \n  * typedef struct {\n     Elf32_Addr    r_offset;\n     Elf32_Word    r_info;\n     Elf32_Sword   r_addend;\n } Elf32_Rela;\n \n typedef struct {\n     Elf64_Addr    r_offset;   \/\/Address\n     Elf64_Xword   r_info;     \/\/Relocation type and symbol index\n     Elf64_Sxword  r_addend;   \/\/Addend \n } Elf64_Rela;\n\n ","fields":[]}
