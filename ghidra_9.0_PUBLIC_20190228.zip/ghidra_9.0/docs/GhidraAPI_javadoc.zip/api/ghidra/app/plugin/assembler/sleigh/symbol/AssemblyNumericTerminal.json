{"implements":[],"javadoc":"A terminal that accepts any numeric value or program label\n \n The literal may take any form accepted by UNIX strtol() with base=0. By default, the literal is\n interpreted in base 10, but it may be prefixed such that it's interpreted in an alternative\n base. With the prefix '0x', it is interpreted in hexadecimal. With the prefix '0', it is\n interpreted in octal.","static":false,"extends":"ghidra.app.plugin.assembler.sleigh.symbol.AssemblyTerminal","methods":[{"javadoc":"Construct a terminal with the given name, accepting any numeric value or program label\n@param name the name","static":false,"name":"<init>","comment":"Construct a terminal with the given name, accepting any numeric value or program label","params":[{"type_long":"java.lang.String","name":"name","comment":"the name","type_short":"String"},{"type_long":"int","name":"bitsize","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"toString","comment":"","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"This is only a convenience for testing\n \n Please use {@link #match(String, AssemblyGrammar, Map<String, Long>)}.\n@param buffer the input buffer\n@return the parsed token","static":false,"name":"match","comment":"This is only a convenience for testing\n \n Please use #match(String, AssemblyGrammar, Map<String, Long>).","params":[{"type_long":"java.lang.String","name":"buffer","comment":"the input buffer","type_short":"String"}],"throws":[],"return":{"type_long":"ghidra.app.plugin.assembler.sleigh.tree.AssemblyParseNumericToken","comment":"the parsed token","type_short":"AssemblyParseNumericToken"}},{"javadoc":"","static":false,"name":"match","comment":"","params":[{"type_long":"java.lang.String","name":"buffer","comment":"","type_short":"String"},{"type_long":"int","name":"pos","comment":"","type_short":"int"},{"type_long":"ghidra.app.plugin.assembler.sleigh.grammars.AssemblyGrammar","name":"grammar","comment":"","type_short":"AssemblyGrammar"},{"type_long":"java.util.Map<java.lang.String,java.lang.Long>","name":"labels","comment":"","type_short":"Map"}],"throws":[],"return":{"type_long":"java.util.Collection<ghidra.app.plugin.assembler.sleigh.tree.AssemblyParseNumericToken>","comment":"","type_short":"Collection"}},{"javadoc":"","static":false,"name":"getSuggestions","comment":"","params":[{"type_long":"java.lang.String","name":"got","comment":"","type_short":"String"},{"type_long":"java.util.Map<java.lang.String,java.lang.Long>","name":"labels","comment":"","type_short":"Map"}],"throws":[],"return":{"type_long":"java.util.Collection<java.lang.String>","comment":"","type_short":"Collection"}},{"javadoc":"","static":false,"name":"getBitSize","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}}],"name":"AssemblyNumericTerminal","comment":"A terminal that accepts any numeric value or program label\n \n The literal may take any form accepted by UNIX strtol() with base=0. By default, the literal is\n interpreted in base 10, but it may be prefixed such that it's interpreted in an alternative\n base. With the prefix '0x', it is interpreted in hexadecimal. With the prefix '0', it is\n interpreted in octal.","fields":[{"type_long":"java.lang.String","javadoc":"","static":true,"name":"PREFIX_HEX","comment":"","type_short":"String","constant_value":"\"0x\""},{"type_long":"java.lang.String","javadoc":"","static":true,"name":"PREFIX_OCT","comment":"","type_short":"String","constant_value":"\"0\""}]}
