{"implements":[],"javadoc":"This singleton class seeks solutions to {@link PatternExpression}s\n \n It is called naive, because it does not perform algebraic transformations. Rather, it attempts to\n fold constants, assuming there is a single variable in the expression, modifying the goal as it\n descends toward that variable. If it finds a variable, i.e., token or context field, it encodes\n the solution, positioned in the field. If the expression is constant, it checks that the goal\n agrees. If not, an error is returned.\n@TODO This whole mechanism ought to just be factored directly into {@link PatternExpression}.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"","static":false,"name":"<init>","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Obtain an instance of the naive solver\n@return the singleton instance","static":true,"name":"getSolver","comment":"Obtain an instance of the naive solver","params":[],"throws":[],"return":{"type_long":"ghidra.app.plugin.assembler.sleigh.expr.RecursiveDescentSolver","comment":"the singleton instance","type_short":"RecursiveDescentSolver"}},{"javadoc":"Solve a given expression, assuming it outputs a given masked value\n \n From a simplified perspective, we need only the expression and the desired value to solve it.\n Generally speaking, the expression may have only contain a single variable, and the encoded\n result represents that single variable. It must be absorbed into the overall instruction\n and\/or context encoding.\n \n More realistically, however, these expressions may depend on quite a bit of extra\n information. For example, PC-relative encodings (i.e., those involving {@code inst_start} or\n {@code inst_next}, need to know the starting address of the resulting instruction. {@code\n inst_start} must be provided to the solver by the assembler. {@code inst_next} cannot be\n known until the instruction length is known. Thus, expressions using it always result in a\n {@link NeedsBackfillException}. The symbols, when known, are provided to the solver via the\n {@code vals} parameter.\n \n Expressions involving {@link OperandValue}s are a little more complicated, because they\n specify an offset that affects its encoding in the instruction. To compute this offset, the\n lengths of other surrounding operands must be known. Thus, when solving a context change for\n a given constructor, its resolved subconstructors must be provided to the solver via the\n {@code res} parameter.\n@param exp the expression to solve\n@param goal the desired output (modulo a mask) of the expression\n@param vals any defined symbols (usually {@code inst_start}, and {@code inst_next})\n@param res resolved subconstructors, by operand index (see method details)\n@param description a description to attached to the encoded solution\n@return the encoded solution\n@throws NeedsBackfillException a solution may exist, but a required symbol is missing\n@throws SolverException a solution does not exist","static":false,"name":"solve","comment":"Solve a given expression, assuming it outputs a given masked value\n \n From a simplified perspective, we need only the expression and the desired value to solve it.\n Generally speaking, the expression may have only contain a single variable, and the encoded\n result represents that single variable. It must be absorbed into the overall instruction\n and\/or context encoding.\n \n More realistically, however, these expressions may depend on quite a bit of extra\n information. For example, PC-relative encodings (i.e., those involving  or\n , need to know the starting address of the resulting instruction.  must be provided to the solver by the assembler.  cannot be\n known until the instruction length is known. Thus, expressions using it always result in a\n NeedsBackfillException. The symbols, when known, are provided to the solver via the\n  parameter.\n \n Expressions involving OperandValues are a little more complicated, because they\n specify an offset that affects its encoding in the instruction. To compute this offset, the\n lengths of other surrounding operands must be known. Thus, when solving a context change for\n a given constructor, its resolved subconstructors must be provided to the solver via the\n  parameter.","params":[{"type_long":"ghidra.app.plugin.processors.sleigh.expression.PatternExpression","name":"exp","comment":"the expression to solve","type_short":"PatternExpression"},{"type_long":"ghidra.app.plugin.assembler.sleigh.expr.MaskedLong","name":"goal","comment":"the desired output (modulo a mask) of the expression","type_short":"MaskedLong"},{"type_long":"java.util.Map<java.lang.String,java.lang.Long>","name":"vals","comment":"any defined symbols (usually , and )","type_short":"Map"},{"type_long":"java.util.Map<java.lang.Integer,java.lang.Object>","name":"res","comment":"resolved subconstructors, by operand index (see method details)","type_short":"Map"},{"type_long":"ghidra.app.plugin.assembler.sleigh.sem.AssemblyResolvedConstructor","name":"cur","comment":"","type_short":"AssemblyResolvedConstructor"},{"type_long":"java.lang.String","name":"description","comment":"a description to attached to the encoded solution","type_short":"String"}],"throws":[{"type_long":"ghidra.app.plugin.assembler.sleigh.expr.NeedsBackfillException","comment":"a solution may exist, but a required symbol is missing","type_short":"NeedsBackfillException"}],"return":{"type_long":"ghidra.app.plugin.assembler.sleigh.sem.AssemblyResolution","comment":"the encoded solution","type_short":"AssemblyResolution"}},{"javadoc":"Determine the length of the instruction part of the encoded solution to the given expression\n \n This is used to keep operands in their appropriate position when backfilling becomes\n applicable. Normally, the instruction length is taken from the encoding of a solution, but if\n the solution cannot be determined yet, the instruction length must still be obtained.\n \n The length can be determined by finding token fields in the expression.\n@param exp the expression, presumably containing a token field\n@param res resolved subconstructors, by operand index (see\n            {@link #solve(PatternExpression, MaskedLong, Map, Map, String)})\n@return the anticipated length, in bytes, of the instruction encoding","static":false,"name":"getInstructionLength","comment":"Determine the length of the instruction part of the encoded solution to the given expression\n \n This is used to keep operands in their appropriate position when backfilling becomes\n applicable. Normally, the instruction length is taken from the encoding of a solution, but if\n the solution cannot be determined yet, the instruction length must still be obtained.\n \n The length can be determined by finding token fields in the expression.","params":[{"type_long":"ghidra.app.plugin.processors.sleigh.expression.PatternExpression","name":"exp","comment":"the expression, presumably containing a token field","type_short":"PatternExpression"},{"type_long":"java.util.Map<java.lang.Integer,java.lang.Object>","name":"res","comment":"resolved subconstructors, by operand index (see\n            #solve(PatternExpression, MaskedLong, Map, Map, String))","type_short":"Map"}],"throws":[],"return":{"type_long":"int","comment":"the anticipated length, in bytes, of the instruction encoding","type_short":"int"}},{"javadoc":"Compute the value of an expression given a (possibly-intermediate) resolution\n@param exp the expression to evaluate\n@param rc the resolution on which to evalute it\n@return the result","static":false,"name":"valueForResolution","comment":"Compute the value of an expression given a (possibly-intermediate) resolution","params":[{"type_long":"ghidra.app.plugin.processors.sleigh.expression.PatternExpression","name":"exp","comment":"the expression to evaluate","type_short":"PatternExpression"},{"type_long":"ghidra.app.plugin.assembler.sleigh.sem.AssemblyResolvedConstructor","name":"rc","comment":"the resolution on which to evalute it","type_short":"AssemblyResolvedConstructor"}],"throws":[],"return":{"type_long":"ghidra.app.plugin.assembler.sleigh.expr.MaskedLong","comment":"the result","type_short":"MaskedLong"}}],"name":"RecursiveDescentSolver","comment":"This singleton class seeks solutions to PatternExpressions\n \n It is called naive, because it does not perform algebraic transformations. Rather, it attempts to\n fold constants, assuming there is a single variable in the expression, modifying the goal as it\n descends toward that variable. If it finds a variable, i.e., token or context field, it encodes\n the solution, positioned in the field. If the expression is constant, it checks that the goal\n agrees. If not, an error is returned.","fields":[]}
