{"implements":[],"javadoc":"A utility class for managing script directories and ScriptInfo objects.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"","static":false,"name":"<init>","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Stores the time of the refresh request so that clients may later ask when the last \n refresh took place.","static":true,"name":"refreshRequested","comment":"Stores the time of the refresh request so that clients may later ask when the last \n refresh took place.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":true,"name":"getLastRefreshRequestTimestamp","comment":"","params":[],"throws":[],"return":{"type_long":"long","comment":"","type_short":"long"}},{"javadoc":"Returns a list of the default script directories.\n@return a list of the default script directories","static":true,"name":"getDefaultScriptDirectories","comment":"Returns a list of the default script directories.","params":[],"throws":[],"return":{"type_long":"java.util.List<generic.util.Path>","comment":"a list of the default script directories","type_short":"List"}},{"javadoc":"Determine if the specified file is contained within the Ghidra installation.\n@param file script file or directory\n@return true if file contained within Ghidra installation area","static":true,"name":"isSystemScriptPath","comment":"Determine if the specified file is contained within the Ghidra installation.","params":[{"type_long":"generic.jar.ResourceFile","name":"file","comment":"script file or directory","type_short":"ResourceFile"}],"throws":[],"return":{"type_long":"boolean","comment":"true if file contained within Ghidra installation area","type_short":"boolean"}},{"javadoc":"Determine if the specified file is contained within the Ghidra installation.\n@param file - file or directory to check\n@return true if file is contained within Ghidra application root.","static":true,"name":"isSystemFile","comment":"Determine if the specified file is contained within the Ghidra installation.","params":[{"type_long":"generic.jar.ResourceFile","name":"file","comment":"- file or directory to check","type_short":"ResourceFile"}],"throws":[],"return":{"type_long":"boolean","comment":"true if file is contained within Ghidra application root.","type_short":"boolean"}},{"javadoc":"Returns a list of the current script directories.\n@return a list of the current script directories","static":true,"name":"getScriptSourceDirectories","comment":"Returns a list of the current script directories.","params":[],"throws":[],"return":{"type_long":"java.util.List<generic.jar.ResourceFile>","comment":"a list of the current script directories","type_short":"List"}},{"javadoc":"Sets the script directories to the new paths.\n@param newPaths the new script directories","static":true,"name":"setScriptDirectories","comment":"Sets the script directories to the new paths.","params":[{"type_long":"java.util.List<generic.util.Path>","name":"newPaths","comment":"the new script directories","type_short":"List"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns the PATH for the specified directory.\n@param directory the directory\n@return the path for the specified directory","static":true,"name":"getScriptPath","comment":"Returns the PATH for the specified directory.","params":[{"type_long":"generic.jar.ResourceFile","name":"directory","comment":"the directory","type_short":"ResourceFile"}],"throws":[],"return":{"type_long":"generic.util.Path","comment":"the path for the specified directory","type_short":"Path"}},{"javadoc":"Returns the output directory to which the given script file's generated .class file should\n be written.","static":true,"name":"getScriptCompileOutputDirectory","comment":"Returns the output directory to which the given script file's generated .class file should\n be written.","params":[{"type_long":"generic.jar.ResourceFile","name":"scriptFile","comment":"","type_short":"ResourceFile"}],"throws":[],"return":{"type_long":"generic.jar.ResourceFile","comment":"","type_short":"ResourceFile"}},{"javadoc":"Returns the list of directories to which scripts are compiled.\n@see #getScriptCompileOutputDirectory(File)","static":true,"name":"getScriptBinDirectories","comment":"Returns the list of directories to which scripts are compiled.","params":[],"throws":[],"return":{"type_long":"java.util.List<generic.jar.ResourceFile>","comment":"","type_short":"List"}},{"javadoc":"Deletes all script class files.","static":true,"name":"clean","comment":"Deletes all script class files.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns the base name give a script file.\n For example, given \"C:\\Temp\\SomeClass.java\",\n it will return \"SomeClass\".\n@param script the script\n@return the base name","static":true,"name":"getBaseName","comment":"Returns the base name give a script file.\n For example, given \"C:\\Temp\\SomeClass.java\",\n it will return \"SomeClass\".","params":[{"type_long":"generic.jar.ResourceFile","name":"script","comment":"the script","type_short":"ResourceFile"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"the base name","type_short":"String"}},{"javadoc":"Returns true if a ScriptInfo object exists for\n the specified script file.\n@param scriptFile the script file\n@return true if a ScriptInfo object exists","static":true,"name":"contains","comment":"Returns true if a ScriptInfo object exists for\n the specified script file.","params":[{"type_long":"generic.jar.ResourceFile","name":"scriptFile","comment":"the script file","type_short":"ResourceFile"}],"throws":[],"return":{"type_long":"boolean","comment":"true if a ScriptInfo object exists","type_short":"boolean"}},{"javadoc":"Removes the ScriptInfo object for the specified file\n@param scriptFile the script file","static":true,"name":"unloadScript","comment":"Removes the ScriptInfo object for the specified file","params":[{"type_long":"generic.jar.ResourceFile","name":"scriptFile","comment":"the script file","type_short":"ResourceFile"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns an iterator over all script info objects.\n@return an iterator over all script info objects","static":true,"name":"getScriptInfoIterator","comment":"Returns an iterator over all script info objects.","params":[],"throws":[],"return":{"type_long":"java.util.Iterator<ghidra.app.script.ScriptInfo>","comment":"an iterator over all script info objects","type_short":"Iterator"}},{"javadoc":"Returns the script info object for the specified script file\n@param scriptFile the script file\n@return the script info object for the specified script file","static":true,"name":"getScriptInfo","comment":"Returns the script info object for the specified script file","params":[{"type_long":"generic.jar.ResourceFile","name":"scriptFile","comment":"the script file","type_short":"ResourceFile"}],"throws":[],"return":{"type_long":"ghidra.app.script.ScriptInfo","comment":"the script info object for the specified script file","type_short":"ScriptInfo"}},{"javadoc":"Returns a list of all Ghidra script providers\n@return a list of all Ghidra script providers","static":true,"name":"getProviders","comment":"Returns a list of all Ghidra script providers","params":[],"throws":[],"return":{"type_long":"java.util.List<ghidra.app.script.GhidraScriptProvider>","comment":"a list of all Ghidra script providers","type_short":"List"}},{"javadoc":"Returns the corresponding Ghidra script providers\n for the specified script file.\n@param scriptFile the script file\n@return the Ghidra script provider","static":true,"name":"getProvider","comment":"Returns the corresponding Ghidra script providers\n for the specified script file.","params":[{"type_long":"generic.jar.ResourceFile","name":"scriptFile","comment":"the script file","type_short":"ResourceFile"}],"throws":[],"return":{"type_long":"ghidra.app.script.GhidraScriptProvider","comment":"the Ghidra script provider","type_short":"GhidraScriptProvider"}},{"javadoc":"Returns true if a provider exists that can process the specified file.\n@param scriptFile the script file\n@return true if a provider exists that can process the specified file","static":true,"name":"hasScriptProvider","comment":"Returns true if a provider exists that can process the specified file.","params":[{"type_long":"generic.jar.ResourceFile","name":"scriptFile","comment":"the script file","type_short":"ResourceFile"}],"throws":[],"return":{"type_long":"boolean","comment":"true if a provider exists that can process the specified file","type_short":"boolean"}},{"javadoc":"Creates a new script with a unique name using the specified provider in the \n specified directory.\n@param provider the Ghidra script provider\n@param parentDirectory the directory where the new script will be created.\n@param scriptDirectories The list of directories containing scripts (used to find a \n        unique name).\n@return the newly created script file\n@throws IOException if an i\/o error occurs","static":true,"name":"createNewScript","comment":"Creates a new script with a unique name using the specified provider in the \n specified directory.","params":[{"type_long":"ghidra.app.script.GhidraScriptProvider","name":"provider","comment":"the Ghidra script provider","type_short":"GhidraScriptProvider"},{"type_long":"generic.jar.ResourceFile","name":"parentDirectory","comment":"the directory where the new script will be created.","type_short":"ResourceFile"},{"type_long":"java.util.List<generic.util.Path>","name":"scriptDirectories","comment":"The list of directories containing scripts (used to find a \n        unique name).","type_short":"List"}],"throws":[{"type_long":"java.io.IOException","comment":"if an i\/o error occurs","type_short":"IOException"}],"return":{"type_long":"generic.jar.ResourceFile","comment":"the newly created script file","type_short":"ResourceFile"}},{"javadoc":"Uses the given name to find a matching script.  This method only works because of the\n limitation that all script names in Ghidra must be unique.  If the given name has multiple\n script matches, then a warning will be logged.\n@param name The name for which to find a script\n@return The ScriptInfo that has the given name","static":true,"name":"findScriptByName","comment":"Uses the given name to find a matching script.  This method only works because of the\n limitation that all script names in Ghidra must be unique.  If the given name has multiple\n script matches, then a warning will be logged.","params":[{"type_long":"java.lang.String","name":"name","comment":"The name for which to find a script","type_short":"String"}],"throws":[],"return":{"type_long":"ghidra.app.script.ScriptInfo","comment":"The ScriptInfo that has the given name","type_short":"ScriptInfo"}},{"javadoc":"","static":true,"name":"getAllScripts","comment":"","params":[],"throws":[],"return":{"type_long":"java.util.List<generic.jar.ResourceFile>","comment":"","type_short":"List"}},{"javadoc":"Looks through all of the current {@link ScriptInfo}s to see if one already exists with \n the given name.\n@param scriptName The name to check\n@return true if the name is not taken by an existing {@link ScriptInfo}.","static":true,"name":"alreadyExists","comment":"Looks through all of the current ScriptInfos to see if one already exists with \n the given name.","params":[{"type_long":"java.lang.String","name":"scriptName","comment":"The name to check","type_short":"String"}],"throws":[],"return":{"type_long":"boolean","comment":"true if the name is not taken by an existing ScriptInfo.","type_short":"boolean"}},{"javadoc":"Returns the existing script info for the given name.  The script environment limits \n scripts such that names are unique.  If this method returns a non-null value, then the \n name given name is taken.\n@param name the name of the script for which to get a ScriptInfo\n@return a ScriptInfo matching the given name; null if no script by that name is known to\n         the script manager","static":true,"name":"getExistingScriptInfo","comment":"Returns the existing script info for the given name.  The script environment limits \n scripts such that names are unique.  If this method returns a non-null value, then the \n name given name is taken.","params":[{"type_long":"java.lang.String","name":"scriptName","comment":"","type_short":"String"}],"throws":[],"return":{"type_long":"ghidra.app.script.ScriptInfo","comment":"a ScriptInfo matching the given name; null if no script by that name is known to\n         the script manager","type_short":"ScriptInfo"}},{"javadoc":"Runs the specified script with the specified state.\n@param scriptState State representing environment variables that the script is able\n \t\tto access.\n@param script Script to be run.\n@return whether the script successfully completed running","static":true,"name":"runScript","comment":"Runs the specified script with the specified state.","params":[{"type_long":"ghidra.app.script.GhidraState","name":"scriptState","comment":"State representing environment variables that the script is able\n \t\tto access.","type_short":"GhidraState"},{"type_long":"ghidra.app.script.GhidraScript","name":"script","comment":"Script to be run.","type_short":"GhidraScript"},{"type_long":"java.io.PrintWriter","name":"writer","comment":"","type_short":"PrintWriter"},{"type_long":"java.lang.Object","name":"originator","comment":"","type_short":"Object"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[],"return":{"type_long":"boolean","comment":"whether the script successfully completed running","type_short":"boolean"}},{"javadoc":"Updates every known script's duplicate value.","static":true,"name":"refreshDuplicates","comment":"Updates every known script's duplicate value.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"GhidraScriptUtil","comment":"A utility class for managing script directories and ScriptInfo objects.","fields":[{"type_long":"java.lang.String","javadoc":"User's home scripts directory","static":true,"name":"USER_SCRIPTS_DIR","comment":"User's home scripts directory","type_short":"String","constant_value":null},{"type_long":"java.lang.String","javadoc":"The default compile output directory","static":true,"name":"USER_SCRIPTS_BIN_DIR","comment":"The default compile output directory","type_short":"String","constant_value":null}]}
