{"implements":["ghidra.app.merge.listing.ListingMerger"],"javadoc":"Class for merging external function and label changes. This class can merge external function\n and label changes that were made to the checked out version. It can determine\n where there are conflicts between the latest checked in version and my\n checked out version. It can then allow the user to manually merge the conflicting\n functions and labels. External functions do not have bodies.\n However their signatures, stacks and variables do get merged.\n This class extends the AbstractFunctionMerger to handle merging of function changes when both\n My and Latest have changed functions.\n <br>Note: Externals are uniquely identified by symbol ID and the name (including namespace is\n also used to match externals when the external is transitioned from a label to a function\n and vice versa.\n <br>Important: This class is intended to be used only for a single program\n version merge. It should be constructed, followed by an autoMerge(), and lastly\n each external with a conflict should have mergeConflicts() called on it.","static":false,"extends":"ghidra.app.merge.listing.AbstractFunctionMerger","methods":[{"javadoc":"Manages changes and conflicts for externals between the latest versioned\n program and the modified program being checked into version control.\n@param mergeManager the top level merge manager for merging a program version.\n@param resultPgm the program to be updated with the result of the merge.\n This is the program that will actually get checked in.\n@param originalPgm the program that was checked out.\n@param latestPgm the latest checked-in version of the program.\n@param myPgm the program requesting to be checked in.\n@param latestChanges the address set of changes between original and latest versioned program.\n@param myChanges the address set of changes between original and my modified program.","static":false,"name":"<init>","comment":"Manages changes and conflicts for externals between the latest versioned\n program and the modified program being checked into version control.","params":[{"type_long":"ghidra.app.merge.listing.ListingMergeManager","name":"listingMergeManager","comment":"","type_short":"ListingMergeManager"},{"type_long":"boolean","name":"showListingPanel","comment":"","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"init","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getName","comment":"","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"","static":false,"name":"getDescription","comment":"","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"","static":false,"name":"allChoicesAreResolved","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"apply","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"cancel","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"autoMerge","comment":"","params":[{"type_long":"int","name":"progressMin","comment":"","type_short":"int"},{"type_long":"int","name":"progressMax","comment":"","type_short":"int"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.program.util.ProgramConflictException","comment":"","type_short":"ProgramConflictException"},{"type_long":"ghidra.program.model.mem.MemoryAccessException","comment":"","type_short":"MemoryAccessException"},{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"<CODE>replaceExternalDataType<\/CODE> replaces the data type of the\n external label in program1 with the data type of the external label in program2\n at the specified external space address.\n@param resultExternalLocation\n@param fromExternalLocation\n@param monitor the task monitor for notifying the user of this merge's progress.\n@throws CancelledException","static":false,"name":"replaceExternalDataType","comment":"replaceExternalDataType replaces the data type of the\n external label in program1 with the data type of the external label in program2\n at the specified external space address.","params":[{"type_long":"ghidra.program.model.symbol.ExternalLocation","name":"resultExternalLocation","comment":"","type_short":"ExternalLocation"},{"type_long":"ghidra.program.model.symbol.ExternalLocation","name":"fromExternalLocation","comment":"","type_short":"ExternalLocation"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"the task monitor for notifying the user of this merge's progress.","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Performs a manual merge of external program conflicts.\n@param chosenConflictOption ASK_USER means interactively resolve conflicts.\n JUnit testing also allows setting this to LATEST, MY, or ORIGINAL to force\n selection of a particular version change.\n@param monitor task monitor for informing the user of progress.\n@throws CancelledException if the user cancels the merge.","static":false,"name":"mergeConflicts","comment":"Performs a manual merge of external program conflicts.","params":[{"type_long":"int","name":"chosenConflictOption","comment":"ASK_USER means interactively resolve conflicts.\n JUnit testing also allows setting this to LATEST, MY, or ORIGINAL to force\n selection of a particular version change.","type_short":"int"},{"type_long":"ghidra.app.merge.listing.ConflictInfoPanel","name":"listingConflictInfoPanel","comment":"","type_short":"ConflictInfoPanel"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"task monitor for informing the user of progress.","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"if the user cancels the merge.","type_short":"CancelledException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"mergeConflictsForAdd","comment":"","params":[{"type_long":"ghidra.program.model.symbol.ExternalLocation[]","name":"externalLocations","comment":"","type_short":"ghidra.program.model.symbol.ExternalLocation[]"},{"type_long":"int","name":"chosenConflictOption","comment":"","type_short":"int"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"replaceExternalLocation","comment":"","params":[{"type_long":"ghidra.program.model.symbol.ExternalLocation","name":"toExternalLocation","comment":"","type_short":"ExternalLocation"},{"type_long":"ghidra.program.model.symbol.ExternalLocation","name":"fromExternalLocation","comment":"","type_short":"ExternalLocation"},{"type_long":"ghidra.program.util.ProgramMerge","name":"programMerge","comment":"","type_short":"ProgramMerge"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.DuplicateNameException","comment":"","type_short":"DuplicateNameException"},{"type_long":"ghidra.util.exception.InvalidInputException","comment":"","type_short":"InvalidInputException"},{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"ghidra.program.model.symbol.ExternalLocation","comment":"","type_short":"ExternalLocation"}},{"javadoc":"","static":false,"name":"mergeFunction","comment":"","params":[{"type_long":"ghidra.program.model.symbol.ExternalLocation[]","name":"externalLocations","comment":"","type_short":"ghidra.program.model.symbol.ExternalLocation[]"},{"type_long":"int","name":"currentChosenOption","comment":"","type_short":"int"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"},{"type_long":"java.lang.UnsupportedOperationException","comment":"","type_short":"UnsupportedOperationException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"refreshResultPanel","comment":"","params":[{"type_long":"ghidra.program.model.symbol.ExternalLocation[]","name":"externalLocations","comment":"","type_short":"ghidra.program.model.symbol.ExternalLocation[]"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getConflictType","comment":"","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"","static":false,"name":"getNumConflictsResolved","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"hasConflict","comment":"","params":[{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"","type_short":"Address"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"getConflictCount","comment":"","params":[{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"","type_short":"Address"}],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"mergeConflicts","comment":"","params":[{"type_long":"ghidra.app.merge.tool.ListingMergePanel","name":"listingPanel","comment":"","type_short":"ListingMergePanel"},{"type_long":"ghidra.program.model.address.Address","name":"addr","comment":"","type_short":"Address"},{"type_long":"int","name":"conflictOption","comment":"","type_short":"int"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"},{"type_long":"ghidra.program.model.mem.MemoryAccessException","comment":"","type_short":"MemoryAccessException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getConflicts","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.program.model.address.AddressSetView","comment":"","type_short":"AddressSetView"}},{"javadoc":"","static":false,"name":"dispose","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"ExternalFunctionMerger","comment":"Class for merging external function and label changes. This class can merge external function\n and label changes that were made to the checked out version. It can determine\n where there are conflicts between the latest checked in version and my\n checked out version. It can then allow the user to manually merge the conflicting\n functions and labels. External functions do not have bodies.\n However their signatures, stacks and variables do get merged.\n This class extends the AbstractFunctionMerger to handle merging of function changes when both\n My and Latest have changed functions.\n Note: Externals are uniquely identified by symbol ID and the name (including namespace is\n also used to match externals when the external is transitioned from a label to a function\n and vice versa.\n Important: This class is intended to be used only for a single program\n version merge. It should be constructed, followed by an autoMerge(), and lastly\n each external with a conflict should have mergeConflicts() called on it.","fields":[{"type_long":"int","javadoc":"Keep the external location added in LATEST to resolve a conflict.","static":true,"name":"KEEP_LATEST_ADD","comment":"Keep the external location added in LATEST to resolve a conflict.","type_short":"int","constant_value":"1"},{"type_long":"int","javadoc":"Keep the external location added in MY to resolve a conflict.","static":true,"name":"KEEP_MY_ADD","comment":"Keep the external location added in MY to resolve a conflict.","type_short":"int","constant_value":"2"},{"type_long":"int","javadoc":"Keep both of the external locations added in the LATEST and in MY when in conflict.","static":true,"name":"KEEP_BOTH_ADDS","comment":"Keep both of the external locations added in the LATEST and in MY when in conflict.","type_short":"int","constant_value":"4"},{"type_long":"int","javadoc":"Merge both of the external locations added in the LATEST and in MY when in conflict.","static":true,"name":"MERGE_BOTH_ADDS","comment":"Merge both of the external locations added in the LATEST and in MY when in conflict.","type_short":"int","constant_value":"8"},{"type_long":"java.lang.String","javadoc":"","static":true,"name":"KEEP_BOTH_BUTTON_NAME","comment":"","type_short":"String","constant_value":"\"KeepBothVersionsRB\""},{"type_long":"java.lang.String","javadoc":"","static":true,"name":"MERGE_BOTH_BUTTON_NAME","comment":"","type_short":"String","constant_value":"\"MergeBothVersionsRB\""}]}
