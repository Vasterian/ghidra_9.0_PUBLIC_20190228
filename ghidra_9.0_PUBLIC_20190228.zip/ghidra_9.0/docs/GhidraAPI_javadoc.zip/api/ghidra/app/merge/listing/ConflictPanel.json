{"implements":[],"javadoc":"Abstract class that should be implemented by the conflict panel that appears \n below the 4 listings in the merge window.","static":false,"extends":"ghidra.app.merge.listing.ChoiceComponent","methods":[{"javadoc":"","static":false,"name":"<init>","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"<init>","comment":"","params":[{"type_long":"boolean","name":"isDoubleBuffered","comment":"","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"<init>","comment":"","params":[{"type_long":"java.awt.LayoutManager","name":"layout","comment":"","type_short":"LayoutManager"},{"type_long":"boolean","name":"isDoubleBuffered","comment":"","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"<init>","comment":"","params":[{"type_long":"java.awt.LayoutManager","name":"layout","comment":"","type_short":"LayoutManager"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns an int value that indicates the choices currently selected for \n the Use For All choice in the conflict resolution table. If there are\n multiple rows of choices, then all selected choices must be the same for each\n row or 0 is returned.\n Each button or check box has an associated value that can be bitwise 'OR'ed together\n to get the entire choice for the row.\n@param row the row of the conflict resolution table.\n@return the choice(s) currently selected.","static":false,"name":"getUseForAllChoice","comment":"Returns an int value that indicates the choices currently selected for \n the Use For All choice in the conflict resolution table. If there are\n multiple rows of choices, then all selected choices must be the same for each\n row or 0 is returned.\n Each button or check box has an associated value that can be bitwise 'OR'ed together\n to get the entire choice for the row.","params":[],"throws":[],"return":{"type_long":"int","comment":"the choice(s) currently selected.","type_short":"int"}},{"javadoc":"Returns true if the conflict panel currently provides at least one choice\n to the user.\n@return true if the panel has a choice the user can select.","static":false,"name":"hasChoice","comment":"Returns true if the conflict panel currently provides at least one choice\n to the user.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if the panel has a choice the user can select.","type_short":"boolean"}},{"javadoc":"Removes all listeners that were set on this panel for indicating user\n choices were being made or changed.","static":false,"name":"removeAllListeners","comment":"Removes all listeners that were set on this panel for indicating user\n choices were being made or changed.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Called to reset the panel back to an empty state so it can be reused.","static":false,"name":"clear","comment":"Called to reset the panel back to an empty state so it can be reused.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"ConflictPanel","comment":"Abstract class that should be implemented by the conflict panel that appears \n below the 4 listings in the merge window.","fields":[]}
