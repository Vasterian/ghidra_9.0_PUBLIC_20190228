{"implements":["ghidra.app.merge.MergeResolver","ghidra.app.merge.listing.ListingMergeConstants"],"javadoc":"Manages external program name changes and conflicts between the latest versioned\n program and the modified program being checked into version control.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"Manages code unit changes and conflicts between the latest versioned\n program and the modified program being checked into version control.\n@param mergeManager the top level merge manager for merging a program version.\n@param resultPgm the program to be updated with the result of the merge.\n This is the program that will actually get checked in.\n@param originalPgm the program that was checked out.\n@param latestPgm the latest checked-in version of the program.\n@param myPgm the program requesting to be checked in.\n@param latestChanges the address set of changes between original and latest versioned program.\n@param myChanges the address set of changes between original and my modified program.","static":false,"name":"<init>","comment":"Manages code unit changes and conflicts between the latest versioned\n program and the modified program being checked into version control.","params":[{"type_long":"ghidra.app.merge.ProgramMultiUserMergeManager","name":"mergeManager","comment":"the top level merge manager for merging a program version.","type_short":"ProgramMultiUserMergeManager"},{"type_long":"ghidra.program.model.listing.Program","name":"resultPgm","comment":"the program to be updated with the result of the merge.\n This is the program that will actually get checked in.","type_short":"Program"},{"type_long":"ghidra.program.model.listing.Program","name":"originalPgm","comment":"the program that was checked out.","type_short":"Program"},{"type_long":"ghidra.program.model.listing.Program","name":"latestPgm","comment":"the latest checked-in version of the program.","type_short":"Program"},{"type_long":"ghidra.program.model.listing.Program","name":"myPgm","comment":"the program requesting to be checked in.","type_short":"Program"},{"type_long":"ghidra.program.model.listing.ProgramChangeSet","name":"latestChanges","comment":"the address set of changes between original and latest versioned program.","type_short":"ProgramChangeSet"},{"type_long":"ghidra.program.model.listing.ProgramChangeSet","name":"myChanges","comment":"the address set of changes between original and my modified program.","type_short":"ProgramChangeSet"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"init","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"autoMerge","comment":"","params":[{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Performs a manual merge of external program conflicts.\n@param chosenConflictOption ASK_USER means interactively resolve conflicts.\n JUnit testing also allows setting this to LATEST, MY, or ORIGINAL to force\n selection of a particular version change.\n@param monitor task monitor for informing the user of progress.\n@throws CancelledException if the user cancels the merge.","static":false,"name":"mergeConflicts","comment":"Performs a manual merge of external program conflicts.","params":[{"type_long":"int","name":"chosenConflictOption","comment":"ASK_USER means interactively resolve conflicts.\n JUnit testing also allows setting this to LATEST, MY, or ORIGINAL to force\n selection of a particular version change.","type_short":"int"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"task monitor for informing the user of progress.","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"if the user cancels the merge.","type_short":"CancelledException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Gets the information to display at the top of the conflict window indicating\n which conflict this is of the total external program name conflicts.\n@param idGroup the symbol ID group for the external program (Library) in conflict.\n@param conflictIndex the index of the current conflict.\n@param totalConflicts the total number of conflicts.","static":false,"name":"getConflictInfo","comment":"Gets the information to display at the top of the conflict window indicating\n which conflict this is of the total external program name conflicts.","params":[{"type_long":"ghidra.app.merge.listing.ExternalProgramMerger.IDGroup","name":"idGroup","comment":"the symbol ID group for the external program (Library) in conflict.","type_short":"IDGroup"},{"type_long":"int","name":"conflictIndex","comment":"the index of the current conflict.","type_short":"int"},{"type_long":"int","name":"totalConflicts","comment":"the total number of conflicts.","type_short":"int"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"","static":false,"name":"hasConflict","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"getConflictCount","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"Returns an array of symbol ID groups for all the external programs that are in conflict.","static":false,"name":"getConflicts","comment":"Returns an array of symbol ID groups for all the external programs that are in conflict.","params":[],"throws":[],"return":{"type_long":"ghidra.app.merge.listing.ExternalProgramMerger.IDGroup[]","comment":"","type_short":"ghidra.app.merge.listing.ExternalProgramMerger.IDGroup[]"}},{"javadoc":"","static":false,"name":"getName","comment":"","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"","static":false,"name":"getDescription","comment":"","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"","static":false,"name":"apply","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"cancel","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"merge","comment":"","params":[{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Actually merges (sets or removes) the indicated external program name in\n program1 based on the same external program name in program2\n@param program1 the program to merge into.\n@param program2 the program to get the merge information from.\n@param idGroup the symbol ID group for the external program (Library) to merge.\n@param monitor task monitor for feedback or canceling the merge.s","static":false,"name":"mergeExternalProgramName","comment":"Actually merges (sets or removes) the indicated external program name in\n program1 based on the same external program name in program2","params":[{"type_long":"ghidra.program.model.listing.Program","name":"program1","comment":"the program to merge into.","type_short":"Program"},{"type_long":"ghidra.program.model.listing.Program","name":"program2","comment":"the program to get the merge information from.","type_short":"Program"},{"type_long":"ghidra.app.merge.listing.ExternalProgramMerger.IDGroup","name":"idGroup","comment":"the symbol ID group for the external program (Library) to merge.","type_short":"IDGroup"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"task monitor for feedback or canceling the merge.s","type_short":"TaskMonitor"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getPhases","comment":"","params":[],"throws":[],"return":{"type_long":"java.lang.String[][]","comment":"","type_short":"java.lang.String[][]"}}],"name":"ExternalProgramMerger","comment":"Manages external program name changes and conflicts between the latest versioned\n program and the modified program being checked into version control.","fields":[]}
