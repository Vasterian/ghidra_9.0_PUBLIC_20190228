{"implements":[],"javadoc":"Finds all paths between two vertices for a given graph.\n \n <P><B><U>Warning:<\/U><\/B> This is a recursive algorithm.  As such, it is limited in how deep \n it can recurse.   Any path that exceeds the {@link #JAVA_STACK_DEPTH_LIMIT} will not be found.\n \n <P>Note: this algorithm is based entirely on the {@link JohnsonCircuitsAlgorithm}.\n@param <V> the vertex type\n@param <E> the edge type","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"","static":false,"name":"<init>","comment":"","params":[{"type_long":"ghidra.graph.GDirectedGraph<V,E>","name":"g","comment":"","type_short":"GDirectedGraph"},{"type_long":"V","name":"start","comment":"","type_short":"V"},{"type_long":"V","name":"end","comment":"","type_short":"V"},{"type_long":"ghidra.util.datastruct.Accumulator<java.util.List<V>>","name":"accumulator","comment":"","type_short":"Accumulator"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"FindPathsAlgorithm","comment":"Finds all paths between two vertices for a given graph.\n \n Warning: This is a recursive algorithm.  As such, it is limited in how deep \n it can recurse.   Any path that exceeds the #JAVA_STACK_DEPTH_LIMIT will not be found.\n \n Note: this algorithm is based entirely on the JohnsonCircuitsAlgorithm.","fields":[{"type_long":"int","javadoc":"","static":true,"name":"JAVA_STACK_DEPTH_LIMIT","comment":"","type_short":"int","constant_value":"2700"}]}
