{"implements":[],"javadoc":"This algorithm is an implementation of the Cooper, Harvey, Kennedy algorithm.  \n \n <P>The algorithm processes the graph in reverse post-order.  The runtime of \n this algorithm is approximately <tt>O(V+E*D)<\/tt> per iteration of the loop, where \n D is the size of the largest dominator set.  The number of iterations is \n bound at <tt>d(G) + 3<\/tt>, where d(G) is the \"loop \n connectedness\" of the graph.\n@param <V> the vertex type\n@param <E> the edge type","static":false,"extends":"ghidra.graph.algo.AbstractDominanceAlgorithm","methods":[{"javadoc":"Constructor.\n@param g the graph\n@param monitor the monitor\n@throws CancelledException if the algorithm is cancelled\n@throws IllegalArgumentException if there are no source vertices in the graph","static":false,"name":"<init>","comment":"Constructor.","params":[{"type_long":"ghidra.graph.GDirectedGraph<V,E>","name":"g","comment":"the graph","type_short":"GDirectedGraph"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"the monitor","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"if the algorithm is cancelled","type_short":"CancelledException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns all nodes dominated by the given vertex.  A node 'a' dominates node 'b' if \n all paths from start to 'b' contain 'a'.\n@param a the vertex\n@return the dominated vertices","static":false,"name":"getDominated","comment":"Returns all nodes dominated by the given vertex.  A node 'a' dominates node 'b' if \n all paths from start to 'b' contain 'a'.","params":[{"type_long":"V","name":"a","comment":"the vertex","type_short":"V"}],"throws":[],"return":{"type_long":"java.util.Set<V>","comment":"the dominated vertices","type_short":"Set"}},{"javadoc":"Returns all nodes that dominate the given vertex.  A node 'a' dominates node 'b' if \n all paths from start to 'b' contain 'a'.\n@param a the vertex\n@return the dominating vertices","static":false,"name":"getDominators","comment":"Returns all nodes that dominate the given vertex.  A node 'a' dominates node 'b' if \n all paths from start to 'b' contain 'a'.","params":[{"type_long":"V","name":"a","comment":"the vertex","type_short":"V"}],"throws":[],"return":{"type_long":"java.util.Set<V>","comment":"the dominating vertices","type_short":"Set"}},{"javadoc":"Returns the dominance tree for the given graph, which is tree where each \n node's children are those nodes it *immediately* dominates (a idom b).\n@return the dominance tree","static":false,"name":"getDominanceTree","comment":"Returns the dominance tree for the given graph, which is tree where each \n node's children are those nodes it *immediately* dominates (a idom b).","params":[],"throws":[],"return":{"type_long":"ghidra.graph.GDirectedGraph<V,ghidra.graph.GEdge<V>>","comment":"the dominance tree","type_short":"GDirectedGraph"}},{"javadoc":"Releases cached values used by internal data structures.","static":false,"name":"clear","comment":"Releases cached values used by internal data structures.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"ChkDominanceAlgorithm","comment":"This algorithm is an implementation of the Cooper, Harvey, Kennedy algorithm.  \n \n The algorithm processes the graph in reverse post-order.  The runtime of \n this algorithm is approximately O(V+E*D) per iteration of the loop, where \n D is the size of the largest dominator set.  The number of iterations is \n bound at d(G) + 3, where d(G) is the \"loop \n connectedness\" of the graph.","fields":[]}
