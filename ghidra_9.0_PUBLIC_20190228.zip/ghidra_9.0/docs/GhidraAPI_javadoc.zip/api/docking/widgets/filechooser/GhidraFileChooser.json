{"implements":["ghidra.util.filechooser.GhidraFileChooserListener","java.io.FileFilter"],"javadoc":"An implementation of a file chooser dialog.\n This class is designed to emulate the JFileChooser,\n but it removes the network locking issue.\n When a network drive is down, the JFileChooser can\n take several minutes to come up.\n\n Why use this file chooser over JFileChooser??\n Let me enumerate the reasons...\n <ol>\n  <li>JFileChooser cannot show hidden\/system files, but we can!<\/li>\n  <li>JFileChooser does not properly consume key strokes (global actions in docking windows)<\/li>\n  <li>This class is threaded, so loading delays do not lock the GUI<\/li>\n  <li>This class provides shortcut buttons similar to those of the Windows native chooser<\/li>\n <\/ol>","static":false,"extends":"docking.DialogComponentProvider","methods":[{"javadoc":"Constructs a new ghidra file chooser.\n@param parent the parent component","static":false,"name":"<init>","comment":"Constructs a new ghidra file chooser.","params":[{"type_long":"java.awt.Component","name":"parent","comment":"the parent component","type_short":"Component"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"When <b>true<\/b> is passed the chooser will use a detailed table view to show the files;\n false will show a simplified list of files.","static":false,"name":"setShowDetails","comment":"When true is passed the chooser will use a detailed table view to show the files;\n false will show a simplified list of files.","params":[{"type_long":"boolean","name":"showDetails","comment":"","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getActionContext","comment":"","params":[{"type_long":"java.awt.event.MouseEvent","name":"event","comment":"","type_short":"MouseEvent"}],"throws":[],"return":{"type_long":"docking.ActionContext","comment":"","type_short":"ActionContext"}},{"javadoc":"@see ghidra.util.filechooser.GhidraFileChooserListener#modelChanged()","static":false,"name":"modelChanged","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"@see java.io.FileFilter#accept(java.io.File)","static":false,"name":"accept","comment":"","params":[{"type_long":"java.io.File","name":"file","comment":"","type_short":"File"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Sets the <code>GhidraFileChooser<\/code> to allow the user to just\n select files, just select\n directories, or select both files and directories.  The default is\n <code>JFilesChooser.FILES_ONLY<\/code>.\n@param mode the type of files to be displayed:\n <ul>\n <li>GhidraFileChooser.FILES_ONLY\n <li>GhidraFileChooser.DIRECTORIES_ONLY\n <li>GhidraFileChooser.FILES_AND_DIRECTORIES\n <\/ul>\n@exception IllegalArgumentException if <code>mode<\/code> is an\n              illegal Dialog mode\n@see #getFileSelectionMode\n@deprecated use instead {@link #setFileSelectionMode(GhidraFileChooserMode)}","static":false,"name":"setFileSelectionMode","comment":"Sets the GhidraFileChooser to allow the user to just\n select files, just select\n directories, or select both files and directories.  The default is\n JFilesChooser.FILES_ONLY.","params":[{"type_long":"int","name":"mode","comment":"the type of files to be displayed:\n \n GhidraFileChooser.FILES_ONLY\n GhidraFileChooser.DIRECTORIES_ONLY\n GhidraFileChooser.FILES_AND_DIRECTORIES\n ","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Sets this file chooser to allow the user to just select files, just select\n directories, or select both files and directories.  The default is\n {@link GhidraFileChooserMode#FILES_ONLY}.\n@param mode the type of files to be displayed","static":false,"name":"setFileSelectionMode","comment":"Sets this file chooser to allow the user to just select files, just select\n directories, or select both files and directories.  The default is\n GhidraFileChooserMode#FILES_ONLY.","params":[{"type_long":"docking.widgets.filechooser.GhidraFileChooserMode","name":"mode","comment":"the type of files to be displayed","type_short":"GhidraFileChooserMode"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns true if multiple files can be selected.\n@return true if multiple files can be selected\n@see #setMultiSelectionEnabled","static":false,"name":"isMultiSelectionEnabled","comment":"Returns true if multiple files can be selected.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if multiple files can be selected","type_short":"boolean"}},{"javadoc":"Sets the file chooser to allow multiple file selections.\n@param b true if multiple files may be selected\n@see #isMultiSelectionEnabled","static":false,"name":"setMultiSelectionEnabled","comment":"Sets the file chooser to allow multiple file selections.","params":[{"type_long":"boolean","name":"b","comment":"true if multiple files may be selected","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Sets the text used in the <code>OK<\/code> button\n@param buttonText the text","static":false,"name":"setApproveButtonText","comment":"Sets the text used in the OK button","params":[{"type_long":"java.lang.String","name":"buttonText","comment":"the text","type_short":"String"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Sets the tooltip text used in the <code>OK<\/code> button\n@param tooltipText the tooltip text","static":false,"name":"setApproveButtonToolTipText","comment":"Sets the tooltip text used in the OK button","params":[{"type_long":"java.lang.String","name":"tooltipText","comment":"the tooltip text","type_short":"String"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns the selected file. This can be set either by the  programmer via \n {@link #setSelectedFile(File)} or by a user action, such as either typing the \n filename into the UI or selecting the file from a list in the UI.\n@return the selected file; null if cancelled or no file was selected","static":false,"name":"getSelectedFile","comment":"Returns the selected file. This can be set either by the  programmer via \n #setSelectedFile(File) or by a user action, such as either typing the \n filename into the UI or selecting the file from a list in the UI.","params":[],"throws":[],"return":{"type_long":"java.io.File","comment":"the selected file; null if cancelled or no file was selected","type_short":"File"}},{"javadoc":"Returns the selected files.  This will show the file chooser\n@return the selected files; an empty array if cancelled or no file was selected","static":false,"name":"getSelectedFiles","comment":"Returns the selected files.  This will show the file chooser","params":[],"throws":[],"return":{"type_long":"java.util.List<java.io.File>","comment":"the selected files; an empty array if cancelled or no file was selected","type_short":"List"}},{"javadoc":"Returns the selected file. This can be set either by the programmer\n via {@link #setSelectedFile(File)} or by a user action, such as either typing the filename\n into the UI or selecting the file from a list in the UI.\n <p>\n Note: this method can be called after the chooser has been shown, in which case the\n value returned has been validated by the chooser.  Also, the method may be called\n while the chooser is showing (like from a test thread).  In this case, the selected file\n will not have been validated by the chooser.\n@param show if true then the dialog is displayed\n@return the selected file; null if cancelled or no file was selected","static":false,"name":"getSelectedFile","comment":"Returns the selected file. This can be set either by the programmer\n via #setSelectedFile(File) or by a user action, such as either typing the filename\n into the UI or selecting the file from a list in the UI.\n \n Note: this method can be called after the chooser has been shown, in which case the\n value returned has been validated by the chooser.  Also, the method may be called\n while the chooser is showing (like from a test thread).  In this case, the selected file\n will not have been validated by the chooser.","params":[{"type_long":"boolean","name":"show","comment":"if true then the dialog is displayed","type_short":"boolean"}],"throws":[],"return":{"type_long":"java.io.File","comment":"the selected file; null if cancelled or no file was selected","type_short":"File"}},{"javadoc":"Sets the selected file. If the file's parent directory is not the current directory,\n changes the current directory to be the file's parent directory.\n <p>\n If the given file is a directory, then it's parent directory will be made the current\n directory and the directory represented by the file will be selected within the parent\n directory.\n <p>\n If the given file does not exist, then the following will happen:\n <ul>\n  <li>If the parent directory of the file exists, then the parent directory will be made\n      the current directory and the name of the file will be put into the filename\n      textfield; otherwise,\n  <li>If the parent file does <b>not<\/b> exist, then the selection is cleared.\n <\/ul>\n <p>\n If the given file is null, then the selected file state is cleared.\n@see #getSelectedFile\n@param file the selected file","static":false,"name":"setSelectedFile","comment":"Sets the selected file. If the file's parent directory is not the current directory,\n changes the current directory to be the file's parent directory.\n \n If the given file is a directory, then it's parent directory will be made the current\n directory and the directory represented by the file will be selected within the parent\n directory.\n \n If the given file does not exist, then the following will happen:\n \n  If the parent directory of the file exists, then the parent directory will be made\n      the current directory and the name of the file will be put into the filename\n      textfield; otherwise,\n  If the parent file does not exist, then the selection is cleared.\n \n \n If the given file is null, then the selected file state is cleared.","params":[{"type_long":"java.io.File","name":"file","comment":"the selected file","type_short":"File"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"show","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"close","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns the current directory.\n@return the current directory\n@see #setCurrentDirectory","static":false,"name":"getCurrentDirectory","comment":"Returns the current directory.","params":[],"throws":[],"return":{"type_long":"java.io.File","comment":"the current directory","type_short":"File"}},{"javadoc":"Sets the current directory. Passing in <code>null<\/code> sets the\n file chooser to point to the user's default directory.\n This default depends on the operating system. It is\n typically the \"My Documents\" folder on Windows, and the user's\n home directory on Unix.\n <br>\n If the file passed in as <code>currentDirectory<\/code> is not a\n directory, the parent of the file will be used as the currentDirectory.\n If the parent is not traversable, then it will walk up the parent tree\n until it finds a traversable directory, or hits the root of the\n file system.\n@param directory the current directory to point to\n@see #getCurrentDirectory","static":false,"name":"setCurrentDirectory","comment":"Sets the current directory. Passing in null sets the\n file chooser to point to the user's default directory.\n This default depends on the operating system. It is\n typically the \"My Documents\" folder on Windows, and the user's\n home directory on Unix.\n \n If the file passed in as currentDirectory is not a\n directory, the parent of the file will be used as the currentDirectory.\n If the parent is not traversable, then it will walk up the parent tree\n until it finds a traversable directory, or hits the root of the\n file system.","params":[{"type_long":"java.io.File","name":"directory","comment":"the current directory to point to","type_short":"File"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Causes the file chooser to refresh its contents\n with the content of the currently displayed directory.","static":false,"name":"rescanCurrentDirectory","comment":"Causes the file chooser to refresh its contents\n with the content of the currently displayed directory.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"dispose","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Adds the specified file filter.\n@param f the new file filter","static":false,"name":"addFileFilter","comment":"Adds the specified file filter.","params":[{"type_long":"ghidra.util.filechooser.GhidraFileFilter","name":"f","comment":"the new file filter","type_short":"GhidraFileFilter"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Set the selected filter to the given filter\n@param filter the filter to initially set","static":false,"name":"setSelectedFileFilter","comment":"Set the selected filter to the given filter","params":[{"type_long":"ghidra.util.filechooser.GhidraFileFilter","name":"filter","comment":"the filter to initially set","type_short":"GhidraFileFilter"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Sets the current file filter.\n@param filter the file filter to make current","static":false,"name":"setFileFilter","comment":"Sets the current file filter.","params":[{"type_long":"ghidra.util.filechooser.GhidraFileFilter","name":"filter","comment":"the file filter to make current","type_short":"GhidraFileFilter"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns true if the user clicked the \"cancel\" button on the file chooser.\n@return true if the user clicked the \"cancel\" button on the file chooser","static":false,"name":"wasCancelled","comment":"Returns true if the user clicked the \"cancel\" button on the file chooser.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if the user clicked the \"cancel\" button on the file chooser","type_short":"boolean"}},{"javadoc":"","static":true,"name":"main","comment":"","params":[{"type_long":"java.lang.String[]","name":"args","comment":"","type_short":"java.lang.String[]"}],"throws":[{"type_long":"java.lang.Exception","comment":"","type_short":"Exception"}],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"GhidraFileChooser","comment":"An implementation of a file chooser dialog.\n This class is designed to emulate the JFileChooser,\n but it removes the network locking issue.\n When a network drive is down, the JFileChooser can\n take several minutes to come up.\n\n Why use this file chooser over JFileChooser??\n Let me enumerate the reasons...\n \n  JFileChooser cannot show hidden\/system files, but we can!\n  JFileChooser does not properly consume key strokes (global actions in docking windows)\n  This class is threaded, so loading delays do not lock the GUI\n  This class provides shortcut buttons similar to those of the Windows native chooser\n ","fields":[{"type_long":"int","javadoc":"Instruction to display only files.","static":true,"name":"FILES_ONLY","comment":"Instruction to display only files.","type_short":"int","constant_value":"0"},{"type_long":"int","javadoc":"Instruction to display only directories.","static":true,"name":"DIRECTORIES_ONLY","comment":"Instruction to display only directories.","type_short":"int","constant_value":"1"},{"type_long":"int","javadoc":"Instruction to display both files and directories.","static":true,"name":"FILES_AND_DIRECTORIES","comment":"Instruction to display both files and directories.","type_short":"int","constant_value":"2"}]}
