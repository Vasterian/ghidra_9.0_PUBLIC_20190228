{"implements":["java.awt.LayoutManager2"],"javadoc":"A {@link LayoutManager} that can be applied to a {@link FieldPanel}, allowing\n {@link Components} to be placed over a given field location.\n \n To apply it, use {@link Container#setLayout(LayoutManager)} to install it. In this case, the\n {@link Container} must be a {@link FieldPanel}. Then, use\n {@link Container#add(Component, Object)}, passing a {@link FieldLocation} as the constraint.\n Currently, you must call {@link #layoutContainer(Container)} manually after you add or remove\n any components.\n \n When this layout manager is removed from the {@link FieldPanel}, you should call\n {@link #unregister()} in order to dispose of internal resources.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"","static":false,"name":"<init>","comment":"","params":[{"type_long":"docking.widgets.fieldpanel.FieldPanel","name":"fieldpane","comment":"","type_short":"FieldPanel"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Remove my callbacks from the {@link FieldPanel}","static":false,"name":"unregister","comment":"Remove my callbacks from the FieldPanel","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Add a listener for overlay layout events\n@param listener the listener to add","static":false,"name":"addLayoutListener","comment":"Add a listener for overlay layout events","params":[{"type_long":"docking.widgets.fieldpanel.FieldPanelOverLayoutListener","name":"listener","comment":"the listener to add","type_short":"FieldPanelOverLayoutListener"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Remove a listener for overlay layout events\n@param listener the listener to remove","static":false,"name":"removeLayoutListener","comment":"Remove a listener for overlay layout events","params":[{"type_long":"docking.widgets.fieldpanel.FieldPanelOverLayoutListener","name":"listener","comment":"the listener to remove","type_short":"FieldPanelOverLayoutListener"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Get the list of register overlay layout event listeners\n@return the array","static":false,"name":"getLayoutListeners","comment":"Get the list of register overlay layout event listeners","params":[],"throws":[],"return":{"type_long":"docking.widgets.fieldpanel.FieldPanelOverLayoutListener[]","comment":"the array","type_short":"docking.widgets.fieldpanel.FieldPanelOverLayoutListener[]"}},{"javadoc":"","static":false,"name":"getListeners","comment":"","params":[{"type_long":"java.lang.Class<T>","name":"listenerType","comment":"","type_short":"Class"}],"throws":[],"return":{"type_long":"T[]","comment":"","type_short":"T[]"}},{"javadoc":"","static":false,"name":"addLayoutComponent","comment":"","params":[{"type_long":"java.lang.String","name":"name","comment":"","type_short":"String"},{"type_long":"java.awt.Component","name":"comp","comment":"","type_short":"Component"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"addLayoutComponent","comment":"","params":[{"type_long":"java.awt.Component","name":"comp","comment":"","type_short":"Component"},{"type_long":"java.lang.Object","name":"constraints","comment":"","type_short":"Object"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"removeLayoutComponent","comment":"","params":[{"type_long":"java.awt.Component","name":"comp","comment":"","type_short":"Component"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"preferredLayoutSize","comment":"","params":[{"type_long":"java.awt.Container","name":"parent","comment":"","type_short":"Container"}],"throws":[],"return":{"type_long":"java.awt.Dimension","comment":"","type_short":"Dimension"}},{"javadoc":"","static":false,"name":"minimumLayoutSize","comment":"","params":[{"type_long":"java.awt.Container","name":"parent","comment":"","type_short":"Container"}],"throws":[],"return":{"type_long":"java.awt.Dimension","comment":"","type_short":"Dimension"}},{"javadoc":"","static":false,"name":"maximumLayoutSize","comment":"","params":[{"type_long":"java.awt.Container","name":"target","comment":"","type_short":"Container"}],"throws":[],"return":{"type_long":"java.awt.Dimension","comment":"","type_short":"Dimension"}},{"javadoc":"","static":false,"name":"layoutContainer","comment":"","params":[{"type_long":"java.awt.Container","name":"parent","comment":"","type_short":"Container"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getLayoutAlignmentX","comment":"","params":[{"type_long":"java.awt.Container","name":"target","comment":"","type_short":"Container"}],"throws":[],"return":{"type_long":"float","comment":"","type_short":"float"}},{"javadoc":"","static":false,"name":"getLayoutAlignmentY","comment":"","params":[{"type_long":"java.awt.Container","name":"target","comment":"","type_short":"Container"}],"throws":[],"return":{"type_long":"float","comment":"","type_short":"float"}},{"javadoc":"","static":false,"name":"invalidateLayout","comment":"","params":[{"type_long":"java.awt.Container","name":"target","comment":"","type_short":"Container"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"FieldPanelOverLayoutManager","comment":"A LayoutManager that can be applied to a FieldPanel, allowing\n Components to be placed over a given field location.\n \n To apply it, use Container#setLayout(LayoutManager) to install it. In this case, the\n Container must be a FieldPanel. Then, use\n Container#add(Component, Object), passing a FieldLocation as the constraint.\n Currently, you must call #layoutContainer(Container) manually after you add or remove\n any components.\n \n When this layout manager is removed from the FieldPanel, you should call\n #unregister() in order to dispose of internal resources.","fields":[]}
