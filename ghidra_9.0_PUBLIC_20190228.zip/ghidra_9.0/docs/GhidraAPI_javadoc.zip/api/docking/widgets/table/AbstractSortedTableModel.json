{"implements":["docking.widgets.table.SortedTableModel"],"javadoc":"Table models should extends this model when they want sorting, potentially across multiple\n columns, but do not want Threading or do not work on Program-related data (Address, \n ProgramLocations, etc...).\n <p>\n In order to define custom comparators for a column, simply override \n {@link #createSortComparator(int)}.  Otherwise, a default comparator will be created for you.\n@param <T> The row type upon which the table is based","static":false,"extends":"docking.widgets.table.AbstractGTableModel","methods":[{"javadoc":"","static":false,"name":"<init>","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"<init>","comment":"","params":[{"type_long":"int","name":"defaultSortColumn","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"addSortListener","comment":"","params":[{"type_long":"docking.widgets.table.SortListener","name":"l","comment":"","type_short":"SortListener"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns the corresponding object for the given row.\n@param viewRow The row for which to get the row object.\n@return the row object.","static":false,"name":"getRowObject","comment":"Returns the corresponding object for the given row.","params":[{"type_long":"int","name":"viewRow","comment":"The row for which to get the row object.","type_short":"int"}],"throws":[],"return":{"type_long":"T","comment":"the row object.","type_short":"T"}},{"javadoc":"Returns the index of the given row object in this model; -1 if the model does not contain\n the given object.","static":false,"name":"getRowIndex","comment":"Returns the index of the given row object in this model; -1 if the model does not contain\n the given object.","params":[{"type_long":"T","name":"rowObject","comment":"","type_short":"T"}],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"fireTableChanged","comment":"","params":[{"type_long":"javax.swing.event.TableModelEvent","name":"e","comment":"","type_short":"TableModelEvent"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getTableSortState","comment":"","params":[],"throws":[],"return":{"type_long":"docking.widgets.table.TableSortState","comment":"","type_short":"TableSortState"}},{"javadoc":"","static":false,"name":"getPrimarySortColumnIndex","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"setTableSortState","comment":"","params":[{"type_long":"docking.widgets.table.TableSortState","name":"newSortState","comment":"","type_short":"TableSortState"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getPendingSortState","comment":"","params":[],"throws":[],"return":{"type_long":"docking.widgets.table.TableSortState","comment":"","type_short":"TableSortState"}},{"javadoc":"","static":false,"name":"isSortPending","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"The default implementation of {@link TableModel#getValueAt(int, int)} that calls the \n abstract {@link #getColumnValueForRow(Object, int)}.","static":false,"name":"getValueAt","comment":"The default implementation of TableModel#getValueAt(int, int) that calls the \n abstract #getColumnValueForRow(Object, int).","params":[{"type_long":"int","name":"rowIndex","comment":"","type_short":"int"},{"type_long":"int","name":"columnIndex","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"java.lang.Object","comment":"","type_short":"Object"}}],"name":"AbstractSortedTableModel","comment":"Table models should extends this model when they want sorting, potentially across multiple\n columns, but do not want Threading or do not work on Program-related data (Address, \n ProgramLocations, etc...).\n \n In order to define custom comparators for a column, simply override \n #createSortComparator(int).  Otherwise, a default comparator will be created for you.","fields":[]}
