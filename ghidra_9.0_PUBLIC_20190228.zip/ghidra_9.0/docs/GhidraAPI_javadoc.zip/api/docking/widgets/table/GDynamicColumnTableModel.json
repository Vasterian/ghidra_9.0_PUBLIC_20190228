{"implements":["javax.swing.event.ChangeListener","docking.widgets.table.VariableColumnTableModel","docking.widgets.table.DynamicColumnTableModel"],"javadoc":"An abstract table model for showing DynamicTableColumns where each row is based on an\n object of type ROW_TYPE.   The client is responsible for implementing\n {@link #createTableColumnDescriptor()}.  This method specifies which default columns the\n table should have and whether they should be visible or hidden.  Hidden columns can be\n made visible through the UI.\n <p>\n This model will also discover other system columns that understand how to render\n <tt>ROW_TYPE<\/tt> data directly.  Also, if you create a {@link TableRowMapper mapper}(s) for\n your row type, then this model will load columns for each type for which a mapper was created,\n all as optional, hidden columns.\n <p>\n The various attributes of the columns of this model (visibility, position, size, etc) are\n saved to disk as tool preferences when the user exits the tool.\n <p>\n Implementation Note: this model loads all columns, specific and discovered, as being visible.\n                      Then, during initialization, the {@link TableColumnModelState} class will\n                      either hide all non-default columns, or reload the column state if any\n                      previous saved state is found.\n@param <ROW_TYPE> the row object class for this table model.\n@param <DATA_SOURCE> the type of data that will be returned from {@link #getDataSource()}.  This\n                    object will be given to the {@link DynamicTableColumn} objects used by this\n                    table model when\n                    {@link DynamicTableColumn#getValue(Object, ghidra.docking.settings.Settings, Object, ServiceProvider)}\n                    is called.","static":false,"extends":"docking.widgets.table.AbstractSortedTableModel","methods":[{"javadoc":"","static":false,"name":"<init>","comment":"","params":[{"type_long":"ghidra.framework.plugintool.ServiceProvider","name":"serviceProvider","comment":"","type_short":"ServiceProvider"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"isSortable","comment":"","params":[{"type_long":"int","name":"columnIndex","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Callback when column settings have changed","static":false,"name":"stateChanged","comment":"Callback when column settings have changed","params":[{"type_long":"javax.swing.event.ChangeEvent","name":"e","comment":"","type_short":"ChangeEvent"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getDefaultColumnCount","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"isVisibleByDefault","comment":"","params":[{"type_long":"int","name":"modelIndex","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Returns true if the column indicated by the index in the model is a default column (meaning\n that it was specified by the model and not discovered).\n@param modelIndex the index of the column in the model.\n@return true if the column is a default.","static":false,"name":"isDefaultColumn","comment":"Returns true if the column indicated by the index in the model is a default column (meaning\n that it was specified by the model and not discovered).","params":[{"type_long":"int","name":"modelIndex","comment":"the index of the column in the model.","type_short":"int"}],"throws":[],"return":{"type_long":"boolean","comment":"true if the column is a default.","type_short":"boolean"}},{"javadoc":"","static":false,"name":"getColumnCount","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"getColumnClass","comment":"","params":[{"type_long":"int","name":"column","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"java.lang.Class<?>","comment":"","type_short":"Class"}},{"javadoc":"","static":false,"name":"getColumnName","comment":"","params":[{"type_long":"int","name":"column","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"","static":false,"name":"getPreferredColumnWidth","comment":"","params":[{"type_long":"int","name":"column","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"getColumnDisplayName","comment":"","params":[{"type_long":"int","name":"columnIndex","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"","static":false,"name":"getColumnDescription","comment":"","params":[{"type_long":"int","name":"column","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"","static":false,"name":"getUniqueIdentifier","comment":"","params":[{"type_long":"int","name":"column","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"","static":false,"name":"getColumnValueForRow","comment":"","params":[{"type_long":"ROW_TYPE","name":"t","comment":"","type_short":"ROW_TYPE"},{"type_long":"int","name":"columnIndex","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"java.lang.Object","comment":"","type_short":"Object"}},{"javadoc":"Returns the table's context for the data.\n@return the table's context for the data.","static":false,"name":"getDataSource","comment":"Returns the table's context for the data.","params":[],"throws":[],"return":{"type_long":"DATA_SOURCE","comment":"the table's context for the data.","type_short":"DATA_SOURCE"}},{"javadoc":"Returns the column index of the given column class\n@param columnClass the class for the type of DynamicTableColumn you want to find.\n@return the column index for the specified DynamicTableColumn. -1 if not found.","static":false,"name":"getColumnIndex","comment":"Returns the column index of the given column class","params":[{"type_long":"java.lang.Class<?>","name":"columnClass","comment":"the class for the type of DynamicTableColumn you want to find.","type_short":"Class"}],"throws":[],"return":{"type_long":"int","comment":"the column index for the specified DynamicTableColumn. -1 if not found.","type_short":"int"}},{"javadoc":"","static":false,"name":"getColumnIndex","comment":"","params":[{"type_long":"docking.widgets.table.DynamicTableColumn<ROW_TYPE,?,?>","name":"identifier","comment":"","type_short":"DynamicTableColumn"}],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"getColumn","comment":"","params":[{"type_long":"int","name":"index","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"docking.widgets.table.DynamicTableColumn<ROW_TYPE,?,?>","comment":"","type_short":"DynamicTableColumn"}},{"javadoc":"","static":false,"name":"getColumnSettingsDefinitions","comment":"","params":[{"type_long":"int","name":"index","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"ghidra.docking.settings.SettingsDefinition[]","comment":"","type_short":"ghidra.docking.settings.SettingsDefinition[]"}},{"javadoc":"","static":false,"name":"getColumnSettings","comment":"","params":[{"type_long":"int","name":"index","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"ghidra.docking.settings.Settings","comment":"","type_short":"Settings"}},{"javadoc":"","static":false,"name":"setColumnSettings","comment":"","params":[{"type_long":"int","name":"index","comment":"","type_short":"int"},{"type_long":"ghidra.docking.settings.Settings","name":"newSettings","comment":"","type_short":"Settings"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"setAllColumnSettings","comment":"","params":[{"type_long":"ghidra.docking.settings.Settings[]","name":"newSettings","comment":"","type_short":"ghidra.docking.settings.Settings[]"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Gets the special table cell renderer for the specified table field column.\n A null value indicates that this field uses a default cell renderer.\n@param index the model column index\n@return a table cell renderer for this field. Otherwise, null if a default\n         renderer should be used.","static":false,"name":"getRenderer","comment":"Gets the special table cell renderer for the specified table field column.\n A null value indicates that this field uses a default cell renderer.","params":[{"type_long":"int","name":"index","comment":"the model column index","type_short":"int"}],"throws":[],"return":{"type_long":"javax.swing.table.TableCellRenderer","comment":"a table cell renderer for this field. Otherwise, null if a default\n         renderer should be used.","type_short":"TableCellRenderer"}},{"javadoc":"Gets the maximum number of text display lines needed for any given cell within the\n specified column.\n@param index column field index\n@return maximum number of lines needed for specified column","static":false,"name":"getMaxLines","comment":"Gets the maximum number of text display lines needed for any given cell within the\n specified column.","params":[{"type_long":"int","name":"index","comment":"column field index","type_short":"int"}],"throws":[],"return":{"type_long":"int","comment":"maximum number of lines needed for specified column","type_short":"int"}}],"name":"GDynamicColumnTableModel","comment":"An abstract table model for showing DynamicTableColumns where each row is based on an\n object of type ROW_TYPE.   The client is responsible for implementing\n #createTableColumnDescriptor().  This method specifies which default columns the\n table should have and whether they should be visible or hidden.  Hidden columns can be\n made visible through the UI.\n \n This model will also discover other system columns that understand how to render\n ROW_TYPE data directly.  Also, if you create a TableRowMapper(s) for\n your row type, then this model will load columns for each type for which a mapper was created,\n all as optional, hidden columns.\n \n The various attributes of the columns of this model (visibility, position, size, etc) are\n saved to disk as tool preferences when the user exits the tool.\n \n Implementation Note: this model loads all columns, specific and discovered, as being visible.\n                      Then, during initialization, the TableColumnModelState class will\n                      either hide all non-default columns, or reload the column state if any\n                      previous saved state is found.","fields":[]}
