{"implements":[],"javadoc":"This class maintains a collection of {@link ColumnConstraint} that are applied to a specific table column\n for filtering purposes. In order for this ColumnConstraintSet to \"pass\", (i.e. accept the table\n row) the column value for that row must pass at least one of the constraints in this set, thus\n effectively OR'ing the constraints.\n\n <P> Instances of this class are used by the {@link ColumnBasedTableFilter} to filter rows of table.\n@param <R> the row type of the table being filtered.\n@param <T> the column type of column whose values are being tested by this filter.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"Constructor\n@param model the table model being filtered.\n@param columnIndex the index of the column whose values are tested by this filter.\n@param constraints the list of ColumnConstraints whose results are or'ed together.\n@param logicOperation the logical operation for how this constraintSet relates to other contraint sets.","static":false,"name":"<init>","comment":"Constructor","params":[{"type_long":"docking.widgets.table.RowObjectTableModel<R>","name":"model","comment":"the table model being filtered.","type_short":"RowObjectTableModel"},{"type_long":"int","name":"columnIndex","comment":"the index of the column whose values are tested by this filter.","type_short":"int"},{"type_long":"java.util.List<docking.widgets.table.constraint.ColumnConstraint<T>>","name":"constraints","comment":"the list of ColumnConstraints whose results are or'ed together.","type_short":"List"},{"type_long":"docking.widgets.table.columnfilter.LogicOperation","name":"logicOperation","comment":"the logical operation for how this constraintSet relates to other contraint sets.","type_short":"LogicOperation"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Constructor when deserializing from a SaveState\n@param model the table model being filtered\n@param saveState the SaveState which contains the configuration for this filter.\n@param dataSource the table's DataSource.","static":false,"name":"<init>","comment":"Constructor when deserializing from a SaveState","params":[{"type_long":"docking.widgets.table.RowObjectTableModel<R>","name":"model","comment":"the table model being filtered","type_short":"RowObjectTableModel"},{"type_long":"ghidra.framework.options.SaveState","name":"saveState","comment":"the SaveState which contains the configuration for this filter.","type_short":"SaveState"},{"type_long":"java.lang.Object","name":"dataSource","comment":"the table's DataSource.","type_short":"Object"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Return the name of the column whose values will be tested by this filter.\n@return the name of the column whose values will be tested by this filter.","static":false,"name":"getColumnName","comment":"Return the name of the column whose values will be tested by this filter.","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"the name of the column whose values will be tested by this filter.","type_short":"String"}},{"javadoc":"Returns the model index of the column whose values will be tested by this filter.\n@return the model index of the column whose values will be tested by this filter.","static":false,"name":"getColumnModelIndex","comment":"Returns the model index of the column whose values will be tested by this filter.","params":[],"throws":[],"return":{"type_long":"int","comment":"the model index of the column whose values will be tested by this filter.","type_short":"int"}},{"javadoc":"Return true if the given table row object passes this filter.\n@param rowObject the table row object.\n@param context the {@link TableFilterContext} for this table's filter.\n@return true if the given table row object passes this filter.","static":false,"name":"accepts","comment":"Return true if the given table row object passes this filter.","params":[{"type_long":"R","name":"rowObject","comment":"the table row object.","type_short":"R"},{"type_long":"docking.widgets.table.constraint.TableFilterContext","name":"context","comment":"the TableFilterContext for this table's filter.","type_short":"TableFilterContext"}],"throws":[],"return":{"type_long":"boolean","comment":"true if the given table row object passes this filter.","type_short":"boolean"}},{"javadoc":"Returns a list of ColumnConstraints in this ColumnFilter\n@return a list of ColumnConstraints in this ColumnFilter","static":false,"name":"getConstraints","comment":"Returns a list of ColumnConstraints in this ColumnFilter","params":[],"throws":[],"return":{"type_long":"java.util.List<docking.widgets.table.constraint.ColumnConstraint<T>>","comment":"a list of ColumnConstraints in this ColumnFilter","type_short":"List"}},{"javadoc":"Returns the logical operation (AND or OR) for how to combine this object's {@link #accepts(Object, TableFilterContext)}\n results with the results of previous constraintSet results in the overall filter.\n@return the logical operation (AND or OR)","static":false,"name":"getLogicOperation","comment":"Returns the logical operation (AND or OR) for how to combine this object's #accepts(Object, TableFilterContext)\n results with the results of previous constraintSet results in the overall filter.","params":[],"throws":[],"return":{"type_long":"docking.widgets.table.columnfilter.LogicOperation","comment":"the logical operation (AND or OR)","type_short":"LogicOperation"}},{"javadoc":"","static":false,"name":"hashCode","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"equals","comment":"","params":[{"type_long":"java.lang.Object","name":"obj","comment":"","type_short":"Object"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"toString","comment":"","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}}],"name":"ColumnConstraintSet","comment":"This class maintains a collection of ColumnConstraint that are applied to a specific table column\n for filtering purposes. In order for this ColumnConstraintSet to \"pass\", (i.e. accept the table\n row) the column value for that row must pass at least one of the constraints in this set, thus\n effectively OR'ing the constraints.\n\n  Instances of this class are used by the ColumnBasedTableFilter to filter rows of table.","fields":[]}
