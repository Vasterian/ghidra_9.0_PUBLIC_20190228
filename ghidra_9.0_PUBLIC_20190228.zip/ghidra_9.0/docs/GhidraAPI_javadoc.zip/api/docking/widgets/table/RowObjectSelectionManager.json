{"implements":["docking.widgets.table.SelectionManager"],"javadoc":"A class to track and restore selections made in a table.  We use this in the docking\n environment primarily due to the heavy usage of filtering for most tables.  As tables are\n filtered, the contents change (and then change back when the filter is removed).  It is nice\n to be able to filter a table, select an item of interest, and then unfilter the table to see\n that item in more context.\n <p>\n Notes on usage:\n <ul>\n \t\t<li>Some table models are sensitive to the order in which {@link TableModel#tableChanged()}\n \t\t is called.  These models should either not use this SelectionManger, or need to\n \t\t change their code to be more robust.  As an example, the {@link DefaultSortedTableModel}\n \t     updates its indexes in odd ways.   Further, there is a chance that the state of its\n       indexing is incorrect when <tt>tableChanged<\/tt> is called.  So, that model has to\n       account for the fact that it may get called by this class when it is in a bad state.\n       <\/li>\n <\/ul>","static":false,"extends":"javax.swing.DefaultListSelectionModel","methods":[{"javadoc":"","static":false,"name":"<init>","comment":"","params":[{"type_long":"javax.swing.JTable","name":"table","comment":"","type_short":"JTable"},{"type_long":"docking.widgets.table.RowObjectTableModel<T>","name":"model","comment":"","type_short":"RowObjectTableModel"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Sets the logger used by this class.  Useful for debugging individual table issues.","static":false,"name":"setLogger","comment":"Sets the logger used by this class.  Useful for debugging individual table issues.","params":[{"type_long":"org.apache.logging.log4j.Logger","name":"logger","comment":"","type_short":"Logger"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"addSelectionManagerListener","comment":"","params":[{"type_long":"docking.widgets.table.SelectionManagerListener","name":"listener","comment":"","type_short":"SelectionManagerListener"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"removeSelectionManagerListener","comment":"","params":[{"type_long":"docking.widgets.table.SelectionManagerListener","name":"listener","comment":"","type_short":"SelectionManagerListener"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"dispose","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"clearSavedSelection","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"clearSelection","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"tableChanged","comment":"","params":[{"type_long":"javax.swing.event.TableModelEvent","name":"e","comment":"","type_short":"TableModelEvent"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"RowObjectSelectionManager","comment":"A class to track and restore selections made in a table.  We use this in the docking\n environment primarily due to the heavy usage of filtering for most tables.  As tables are\n filtered, the contents change (and then change back when the filter is removed).  It is nice\n to be able to filter a table, select an item of interest, and then unfilter the table to see\n that item in more context.\n \n Notes on usage:\n \n \t\tSome table models are sensitive to the order in which TableModel#tableChanged()\n \t\t is called.  These models should either not use this SelectionManger, or need to\n \t\t change their code to be more robust.  As an example, the DefaultSortedTableModel\n \t     updates its indexes in odd ways.   Further, there is a chance that the state of its\n       indexing is incorrect when tableChanged is called.  So, that model has to\n       account for the fact that it may get called by this class when it is in a bad state.\n       \n ","fields":[]}
