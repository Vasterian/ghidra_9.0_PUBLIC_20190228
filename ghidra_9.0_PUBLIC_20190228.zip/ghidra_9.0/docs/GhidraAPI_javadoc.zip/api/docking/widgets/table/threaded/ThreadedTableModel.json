{"implements":["docking.widgets.table.RowObjectFilterModel"],"javadoc":"The base implementation of the threaded table model.\n <p>\n You can optionally set this model to load data incrementally by passing the correct\n constructor argument.  Note, if you make this model incremental, then you need to set an\n incremental task monitor in order to get feedback about loading\n (see {@link #setIncrementalTaskMonitor(TaskMonitor)).  Alternatively, you can use\n a {@link GThreadedTablePanel}, which will install the proper monitor for you.\n@param ROW_OBJECT the row object class for this table model.\n@param DATA_SOURCE the type of data that will be returned from {@link #getDataSource()}.  This\n                    object will be given to the {@link DynamicTableColumn} objects used by this\n                    table model when\n                    {@link DynamicTableColumn#getValue(Object, generic.settings.Settings, Object, ServiceProvider)}\n                    is called.","static":false,"extends":"docking.widgets.table.GDynamicColumnTableModel","methods":[{"javadoc":"","static":false,"name":"isLoadIncrementally","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"getModelData","comment":"","params":[],"throws":[],"return":{"type_long":"java.util.List<ROW_OBJECT>","comment":"","type_short":"List"}},{"javadoc":"","static":false,"name":"getUnfilteredData","comment":"","params":[],"throws":[],"return":{"type_long":"java.util.List<ROW_OBJECT>","comment":"","type_short":"List"}},{"javadoc":"","static":false,"name":"getValueAt","comment":"","params":[{"type_long":"int","name":"rowIndex","comment":"","type_short":"int"},{"type_long":"int","name":"columnIndex","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"java.lang.Object","comment":"","type_short":"Object"}},{"javadoc":"Returns the filter for this model.  The value returned from this method will not be null,\n but will instead be an instanceof {@link NullTableFilter} when no filter is applied.   The\n value returned from this method may not actually yet be applied, depending upon when the\n background thread finishes loading.\n@return the filter","static":false,"name":"getTableFilter","comment":"Returns the filter for this model.  The value returned from this method will not be null,\n but will instead be an instanceof NullTableFilter when no filter is applied.   The\n value returned from this method may not actually yet be applied, depending upon when the\n background thread finishes loading.","params":[],"throws":[],"return":{"type_long":"docking.widgets.table.TableFilter<ROW_OBJECT>","comment":"the filter","type_short":"TableFilter"}},{"javadoc":"Returns true if there is a table filter set that is not the {@link NullTableFilter}.\n@return true if there is a table filter set.","static":false,"name":"hasFitler","comment":"Returns true if there is a table filter set that is not the NullTableFilter.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if there is a table filter set.","type_short":"boolean"}},{"javadoc":"","static":false,"name":"getUnfilteredRowCount","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"isFiltered","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Sets the given <tt>TableFitler<\/tt> on this model.  This table filter will then be used\n by this model in the default {@link #doFilter(List, TableSortingContext, TaskMonitor)}\n method.\n@param tableFitler The filter to use for table filtering.","static":false,"name":"setTableFilter","comment":"Sets the given TableFitler on this model.  This table filter will then be used\n by this model in the default #doFilter(List, TableSortingContext, TaskMonitor)\n method.","params":[{"type_long":"docking.widgets.table.TableFilter<ROW_OBJECT>","name":"tableFitler","comment":"The filter to use for table filtering.","type_short":"TableFilter"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Schedules an update for the specified object.\n@param obj the object for which to schedule the update","static":false,"name":"updateObject","comment":"Schedules an update for the specified object.","params":[{"type_long":"ROW_OBJECT","name":"obj","comment":"the object for which to schedule the update","type_short":"ROW_OBJECT"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Adds the specified object to this model and schedules an update.\n@param obj the object to add","static":false,"name":"addObject","comment":"Adds the specified object to this model and schedules an update.","params":[{"type_long":"ROW_OBJECT","name":"obj","comment":"the object to add","type_short":"ROW_OBJECT"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Removes the specified object from this model and schedules an update.\n@param obj the object to remove","static":false,"name":"removeObject","comment":"Removes the specified object from this model and schedules an update.","params":[{"type_long":"ROW_OBJECT","name":"obj","comment":"the object to remove","type_short":"ROW_OBJECT"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns true if the model is busy. \"Busy\" means the model\n is either loading or updating.\n@return true if the model is busy","static":false,"name":"isBusy","comment":"Returns true if the model is busy. \"Busy\" means the model\n is either loading or updating.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if the model is busy","type_short":"boolean"}},{"javadoc":"Resort the table using the current sort criteria.  This is useful if the data in the\n table has changed and is no longer sorted properly.  If the setSort method is used, nothing\n will happen because the table will think it is already sorted on that criteria.","static":false,"name":"reSort","comment":"Resort the table using the current sort criteria.  This is useful if the data in the\n table has changed and is no longer sorted properly.  If the setSort method is used, nothing\n will happen because the table will think it is already sorted on that criteria.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Triggers this class to filter the contents of the data.","static":false,"name":"reFilter","comment":"Triggers this class to filter the contents of the data.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Schedules the model to completely reload\n its underlying data.","static":false,"name":"reload","comment":"Schedules the model to completely reload\n its underlying data.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"@see javax.swing.table.AbstractTableModel#fireTableChanged(javax.swing.event.TableModelEvent)","static":false,"name":"fireTableChanged","comment":"","params":[{"type_long":"javax.swing.event.TableModelEvent","name":"e","comment":"","type_short":"TableModelEvent"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Disposes this model.\n Once a model has been disposed, it cannot be reused.","static":false,"name":"dispose","comment":"Disposes this model.\n Once a model has been disposed, it cannot be reused.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Cancels all current and pending updates to the model. Waits until all updates have\n been cancelled.","static":false,"name":"cancelAllUpdates","comment":"Cancels all current and pending updates to the model. Waits until all updates have\n been cancelled.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"@see javax.swing.table.TableModel#getRowCount()","static":false,"name":"getRowCount","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"getUnfilteredCount","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"Given a row index for the raw (unfiltered) model, return the corresponding index in the\n view (filtered) model.\n@param modelRow The row index that corresponds to unfiltered data\n@return the index of that row in the filtered data\n@see #getModelRow(int)","static":false,"name":"getViewRow","comment":"Given a row index for the raw (unfiltered) model, return the corresponding index in the\n view (filtered) model.","params":[{"type_long":"int","name":"modelRow","comment":"The row index that corresponds to unfiltered data","type_short":"int"}],"throws":[],"return":{"type_long":"int","comment":"the index of that row in the filtered data","type_short":"int"}},{"javadoc":"Given a row index for the view (filtered) model, return the corresponding index in the\n raw (unfiltered) model.\n@param viewRow The row index that corresponds to filtered data\n@return the index of that row in the unfiltered data\n@see #getViewRow(int)","static":false,"name":"getModelRow","comment":"Given a row index for the view (filtered) model, return the corresponding index in the\n raw (unfiltered) model.","params":[{"type_long":"int","name":"viewRow","comment":"The row index that corresponds to filtered data","type_short":"int"}],"throws":[],"return":{"type_long":"int","comment":"the index of that row in the unfiltered data","type_short":"int"}},{"javadoc":"","static":false,"name":"getViewIndex","comment":"","params":[{"type_long":"ROW_OBJECT","name":"t","comment":"","type_short":"ROW_OBJECT"}],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"getModelIndex","comment":"","params":[{"type_long":"ROW_OBJECT","name":"t","comment":"","type_short":"ROW_OBJECT"}],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"Returns the name of this model.\n@return the name of this model","static":false,"name":"getName","comment":"Returns the name of this model.","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"the name of this model","type_short":"String"}},{"javadoc":"Returns the corresponding row objects for the specified rows.\n@param rows the table rows\n@return the corresponding database keys","static":false,"name":"getRowObjects","comment":"Returns the corresponding row objects for the specified rows.","params":[{"type_long":"int[]","name":"rows","comment":"the table rows","type_short":"int[]"}],"throws":[],"return":{"type_long":"java.util.List<ROW_OBJECT>","comment":"the corresponding database keys","type_short":"List"}},{"javadoc":"","static":false,"name":"setIncrementalTaskMonitor","comment":"","params":[{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Adds a listener that will be notified of the first table load of this model.  After the\n initial load, the listener is removed.\n@param listener","static":false,"name":"addInitialLoadListener","comment":"Adds a listener that will be notified of the first table load of this model.  After the\n initial load, the listener is removed.","params":[{"type_long":"docking.widgets.table.threaded.ThreadedTableModelListener","name":"listener","comment":"","type_short":"ThreadedTableModelListener"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"This is a way to know about updates from the table.\n@param listener the listener to add\n@see #addInitialLoadListener(ThreadedTableModelListener)\n@see #removeThreadedTableModelListener(ThreadedTableModelListener)","static":false,"name":"addThreadedTableModelListener","comment":"This is a way to know about updates from the table.","params":[{"type_long":"docking.widgets.table.threaded.ThreadedTableModelListener","name":"listener","comment":"the listener to add","type_short":"ThreadedTableModelListener"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"removeThreadedTableModelListener","comment":"","params":[{"type_long":"docking.widgets.table.threaded.ThreadedTableModelListener","name":"listener","comment":"","type_short":"ThreadedTableModelListener"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"ThreadedTableModel","comment":"The base implementation of the threaded table model.\n \n You can optionally set this model to load data incrementally by passing the correct\n constructor argument.  Note, if you make this model incremental, then you need to set an\n incremental task monitor in order to get feedback about loading\n (see }, which will install the proper monitor for you.","fields":[]}
