{"implements":[],"javadoc":"State machine object for performing the various update functions on a ThreadedTableModel.\n The general pattern is to:\n <ol>\n \t<li>Load <\/li>\n  <li>Filter <\/li>\n  <li>Process individual adds and removes <\/li>\n  <li>Sort <\/li>\n  <li>Set the processed data back on the model<\/li>\n <\/ol>\n <p>\n Not all the update functions are performed on a run of a TableUpdateJob.  If the reloadData flag is\n not set, the the data is just copied from the model's current list, instead of calling the model's\n loadData() method. If the sortComparator is null,\n then the data is not sorted (for example, when only filtering needs to be done).  If there\n are no add\/removes in the list, then that step does nothing.\n <p>\n Before the job completes, new calls to sort and filter can be called.  If the job is past the\n stage of the new call, the <tt>monitor<\/tt> is cancelled, causing the current stage to abort.  \n The next state of this job is set to the appropriate state for the call, the monitor is \n reset, and the job begins executing the next stage, based upon the new call.\n@param <T> the type of data that each row in the table represents.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"The basic run() method that executes the state machine.","static":false,"name":"run","comment":"The basic run() method that executes the state machine.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Forces this job to completely reload the data, instead of copying from\n the model's current data.  This call is not allowed on the currently running job and is only\n appropriate for a pending job.","static":false,"name":"reload","comment":"Forces this job to completely reload the data, instead of copying from\n the model's current data.  This call is not allowed on the currently running job and is only\n appropriate for a pending job.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Adds the Add\/Remove item to the list of items to be processed in the add\/remove phase. This\n call is not allowed on running jobs, only pending jobs.\n@param item the add\/remove item to add to the list of items to be processed in the add\/remove\n            phase of this job.\n@param the maximum number of add\/remove jobs to queue before performing a full reload","static":false,"name":"addRemove","comment":"Adds the Add\/Remove item to the list of items to be processed in the add\/remove phase. This\n call is not allowed on running jobs, only pending jobs.","params":[{"type_long":"docking.widgets.table.AddRemoveListItem<T>","name":"item","comment":"the add\/remove item to add to the list of items to be processed in the add\/remove\n            phase of this job.","type_short":"AddRemoveListItem"},{"type_long":"int","name":"maxAddRemoveCount","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Sets the TableColumnComparator to use for sorting the data.  This method can be called on\n the currently running job as well as the pending job.  If called on the running job, the effect\n depends on the running job's state:\n <ul>\n     <li>If the sort state hasn't happened yet, all it does is set the comparator for when \n     the sort occurs.  \n     <li>If the sort state has already been started or completed, then this method attempts\n      to stop the current process phase and cause the state\n \t\tmachine to return to the sort phase.\n     <li>If the current job has already entered the DONE state, then the sort cannot \n     take effect in this job and a false value is returned to indicate the\n sort was not handled by this job.\n <\/ul>\n@param newSortingContext the TableColumnComparator to use to sort the data.\n@param forceSort True signals to re-sort, even if this is already sorted\n@return true if the sort can be processed by this job, false if this job is essentially already\n completed and therefor cannot perform the sort job.","static":false,"name":"sort","comment":"Sets the TableColumnComparator to use for sorting the data.  This method can be called on\n the currently running job as well as the pending job.  If called on the running job, the effect\n depends on the running job's state:\n \n     If the sort state hasn't happened yet, all it does is set the comparator for when \n     the sort occurs.  \n     If the sort state has already been started or completed, then this method attempts\n      to stop the current process phase and cause the state\n \t\tmachine to return to the sort phase.\n     If the current job has already entered the DONE state, then the sort cannot \n     take effect in this job and a false value is returned to indicate the\n sort was not handled by this job.\n ","params":[{"type_long":"docking.widgets.table.TableSortingContext<T>","name":"newSortingContext","comment":"the TableColumnComparator to use to sort the data.","type_short":"TableSortingContext"},{"type_long":"boolean","name":"forceSort","comment":"True signals to re-sort, even if this is already sorted","type_short":"boolean"}],"throws":[],"return":{"type_long":"boolean","comment":"true if the sort can be processed by this job, false if this job is essentially already\n completed and therefor cannot perform the sort job.","type_short":"boolean"}},{"javadoc":"Tells the job that the filter criteria has changed.  This method can be called on\n the currently running job as well as the pending job.  If called on the running job, the effect\n depends on the running job's state:\n <ul>\n \t  <li>If the filter state hasn't happened yet, then nothing needs to be done as this job \n \twill filter later anyway. \n    <li>If the filter state has already been started or completed, then this method \n    attempts to stop the current process phase and cause the state machine to return to the \n    filter phase. \n    <li>If the current job has already entered the DONE state, then the filter cannot take\n     effect in this job and a false value is returned to indicate the\n filter was not handled by this job.\n <\/ul>\n@return true if the filter can be processed by this job, false if this job is essentially already\n completed and therefor cannot perform the filter job.","static":false,"name":"filter","comment":"Tells the job that the filter criteria has changed.  This method can be called on\n the currently running job as well as the pending job.  If called on the running job, the effect\n depends on the running job's state:\n \n \t  If the filter state hasn't happened yet, then nothing needs to be done as this job \n \twill filter later anyway. \n    If the filter state has already been started or completed, then this method \n    attempts to stop the current process phase and cause the state machine to return to the \n    filter phase. \n    If the current job has already entered the DONE state, then the filter cannot take\n     effect in this job and a false value is returned to indicate the\n filter was not handled by this job.\n ","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if the filter can be processed by this job, false if this job is essentially already\n completed and therefor cannot perform the filter job.","type_short":"boolean"}},{"javadoc":"","static":false,"name":"cancel","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"toString","comment":"","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}}],"name":"TableUpdateJob","comment":"State machine object for performing the various update functions on a ThreadedTableModel.\n The general pattern is to:\n \n \tLoad \n  Filter \n  Process individual adds and removes \n  Sort \n  Set the processed data back on the model\n \n \n Not all the update functions are performed on a run of a TableUpdateJob.  If the reloadData flag is\n not set, the the data is just copied from the model's current list, instead of calling the model's\n loadData() method. If the sortComparator is null,\n then the data is not sorted (for example, when only filtering needs to be done).  If there\n are no add\/removes in the list, then that step does nothing.\n \n Before the job completes, new calls to sort and filter can be called.  If the job is past the\n stage of the new call, the monitor is cancelled, causing the current stage to abort.  \n The next state of this job is set to the appropriate state for the call, the monitor is \n reset, and the job begins executing the next stage, based upon the new call.","fields":[]}
