{"implements":["docking.widgets.table.SortedTableModel","javax.swing.event.TableModelListener"],"javadoc":"A sorter for TableModels. The sorter has a model (conforming to TableModel)\n and itself implements TableModel. TableSorter does not store or copy\n the data in the TableModel, instead it maintains an array of\n integers which it keeps the same size as the number of rows in its\n model. When the model changes it notifies the sorter that something\n has changed (e.g., \"rowsAdded\") so that its internal array of integers\n can be reallocated. As requests are made of the sorter (like\n getValueAt(row, col) it redirects them to its model via the mapping\n array. That way the TableSorter appears to hold another copy of the table\n with the rows in a different order. The sorting algorithm used is stable\n which means that it does not move around rows when its comparison\n function returns 0 to denote that they are equivalent.\n@deprecated You should instead be using {@link AbstractSortedTableModel}","static":false,"extends":"javax.swing.table.AbstractTableModel","methods":[{"javadoc":"","static":false,"name":"setSort","comment":"","params":[{"type_long":"int","name":"column","comment":"","type_short":"int"},{"type_long":"boolean","name":"ascending","comment":"","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getPrimarySortColumnIndex","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"isAscending","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Construct a new TableSorter using the given model.\n@deprecated You should instead be using {@link AbstractSortedTableModel}","static":false,"name":"<init>","comment":"Construct a new TableSorter using the given model.","params":[{"type_long":"javax.swing.table.TableModel","name":"model","comment":"","type_short":"TableModel"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"setModel","comment":"","params":[{"type_long":"javax.swing.table.TableModel","name":"model","comment":"","type_short":"TableModel"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getModel","comment":"","params":[],"throws":[],"return":{"type_long":"javax.swing.table.TableModel","comment":"","type_short":"TableModel"}},{"javadoc":"Enable the sorter according to the enable parameter. This method\n should be called with enable set to <b>false<\/b> <i>before<\/i> the table\n model is populated or else a sort will be done after each row is\n inserted, and that would not be good.\n@param enable true means to enable the sorting.","static":false,"name":"enableSorter","comment":"Enable the sorter according to the enable parameter. This method\n should be called with enable set to false before the table\n model is populated or else a sort will be done after each row is\n inserted, and that would not be good.","params":[{"type_long":"boolean","name":"enable","comment":"true means to enable the sorting.","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"addSortListener","comment":"","params":[{"type_long":"docking.widgets.table.SortListener","name":"l","comment":"","type_short":"SortListener"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"registerComparator","comment":"","params":[{"type_long":"java.util.Comparator<?>","name":"comparator","comment":"","type_short":"Comparator"},{"type_long":"int","name":"column","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"deRegisterComparator","comment":"","params":[{"type_long":"int","name":"column","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"tableChanged","comment":"","params":[{"type_long":"javax.swing.event.TableModelEvent","name":"e","comment":"","type_short":"TableModelEvent"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"@see javax.swing.table.TableModel#getValueAt(int, int)","static":false,"name":"getValueAt","comment":"","params":[{"type_long":"int","name":"aRow","comment":"","type_short":"int"},{"type_long":"int","name":"aColumn","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"java.lang.Object","comment":"","type_short":"Object"}},{"javadoc":"Converts a sorted index into an unsorted index.\n This is good if you need to access the underlying table directly by\n the unsorted index.","static":false,"name":"getSortedIndex","comment":"Converts a sorted index into an unsorted index.\n This is good if you need to access the underlying table directly by\n the unsorted index.","params":[{"type_long":"int","name":"aRow","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"@see javax.swing.table.TableModel#setValueAt(java.lang.Object, int, int)","static":false,"name":"setValueAt","comment":"","params":[{"type_long":"java.lang.Object","name":"aValue","comment":"","type_short":"Object"},{"type_long":"int","name":"aRow","comment":"","type_short":"int"},{"type_long":"int","name":"aColumn","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Sorts the model in ascending order by the specified columnIndex.\n@param column the index of the column to sort","static":false,"name":"sortByColumn","comment":"Sorts the model in ascending order by the specified columnIndex.","params":[{"type_long":"int","name":"column","comment":"the index of the column to sort","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"isSortable","comment":"","params":[{"type_long":"int","name":"columnIndex","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"resort","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getTableSortState","comment":"","params":[],"throws":[],"return":{"type_long":"docking.widgets.table.TableSortState","comment":"","type_short":"TableSortState"}},{"javadoc":"","static":false,"name":"setTableSortState","comment":"","params":[{"type_long":"docking.widgets.table.TableSortState","name":"sortStates","comment":"","type_short":"TableSortState"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"@see javax.swing.table.TableModel#getRowCount()","static":false,"name":"getRowCount","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"@see javax.swing.table.TableModel#getColumnCount()","static":false,"name":"getColumnCount","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"@see javax.swing.table.TableModel#getColumnName(int)","static":false,"name":"getColumnName","comment":"","params":[{"type_long":"int","name":"aColumn","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"@see javax.swing.table.TableModel#getColumnClass(int)","static":false,"name":"getColumnClass","comment":"","params":[{"type_long":"int","name":"aColumn","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"java.lang.Class<?>","comment":"","type_short":"Class"}},{"javadoc":"@see javax.swing.table.TableModel#isCellEditable(int, int)","static":false,"name":"isCellEditable","comment":"","params":[{"type_long":"int","name":"row","comment":"","type_short":"int"},{"type_long":"int","name":"column","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}}],"name":"DefaultSortedTableModel","comment":"A sorter for TableModels. The sorter has a model (conforming to TableModel)\n and itself implements TableModel. TableSorter does not store or copy\n the data in the TableModel, instead it maintains an array of\n integers which it keeps the same size as the number of rows in its\n model. When the model changes it notifies the sorter that something\n has changed (e.g., \"rowsAdded\") so that its internal array of integers\n can be reallocated. As requests are made of the sorter (like\n getValueAt(row, col) it redirects them to its model via the mapping\n array. That way the TableSorter appears to hold another copy of the table\n with the rows in a different order. The sorting algorithm used is stable\n which means that it does not move around rows when its comparison\n function returns 0 to denote that they are equivalent.","fields":[]}
