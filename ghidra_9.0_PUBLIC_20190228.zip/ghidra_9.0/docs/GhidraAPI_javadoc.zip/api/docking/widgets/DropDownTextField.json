{"implements":[],"javadoc":"A text field that handles comparing text typed by the user to the list of objects\n and then presenting potential matches in a drop down window.  The items in this window\n cannot be selected.\n\n <P>This class will fire {@link #fireEditingStopped()} and {@link #fireEditingCancelled()}\n events when the user makes a choice by pressing the ENTER key, thus allowing the client\n code to use this class similar in fashion to a property editor.  This behavior can be\n configured to:\n <UL>\n \t<LI>Not consume the ENTER key press (it consumes by default), allowing the parent container\n      to process the event (see {@link #setConsumeEnterKeyPress(boolean)}\n  <\/LI>\n  <LI>Ignore the ENTER key press completely (see {@link #setIgnoreEnterKeyPress(boolean)}\n  <\/LI>\n <\/UL>\n\n <p>This class is subclassed to not only have the matching behavior, but to also allow for\n user selections.\n@param <T> The type of object that this model manipulates","static":false,"extends":"javax.swing.JTextField","methods":[{"javadoc":"Constructor.\n <p>\n Uses the default refresh delay of 350ms.\n@param dataModel provides element storage and search capabilities to this component.","static":false,"name":"<init>","comment":"Constructor.\n \n Uses the default refresh delay of 350ms.","params":[{"type_long":"docking.widgets.DropDownTextFieldDataModel<T>","name":"dataModel","comment":"provides element storage and search capabilities to this component.","type_short":"DropDownTextFieldDataModel"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Constructor.\n@param dataModel provides element storage and search capabilities to this component.\n@param updateMinDelay suggestion list refresh delay, triggered after search results have\n changed. Too low a value may cause an inconsistent view as filtering tasks complete; too high\n a value delivers an unresponsive user experience.","static":false,"name":"<init>","comment":"Constructor.","params":[{"type_long":"docking.widgets.DropDownTextFieldDataModel<T>","name":"dataModel","comment":"provides element storage and search capabilities to this component.","type_short":"DropDownTextFieldDataModel"},{"type_long":"int","name":"updateMinDelay","comment":"suggestion list refresh delay, triggered after search results have\n changed. Too low a value may cause an inconsistent view as filtering tasks complete; too high\n a value delivers an unresponsive user experience.","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Overridden to allow for the setting of text without showing the completion window.  This\n is useful for setting the current value to be edited before the using initiates editing.\n@param text The text to set on this text field.","static":false,"name":"setText","comment":"Overridden to allow for the setting of text without showing the completion window.  This\n is useful for setting the current value to be edited before the using initiates editing.","params":[{"type_long":"java.lang.String","name":"text","comment":"The text to set on this text field.","type_short":"String"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"isMatchingListShowing","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"When true, this field will not pass Enter key press events up to it's parent <b>when the\n drop-down selection window is open<\/b>.  However, an Enter key press will still be\n \"unconsumed\" when the drop-down window is not open. When set to false, this\n method will always pass the Enter key press up to it's parent.\n\n <P>The default is true.  Clients will set this to false when they wish to respond to an\n Enter event.  For example, a dialog may want to close itself on an Enter key press, even\n when the drop-down selection text field is still open. Contrastingly, when this field\n is embedded inside of a larger editor, like a multi-editor field dialog,\n the Enter key press should simply\n trigger the drop-down window to close and the editing to stop, but should not trigger the","static":false,"name":"setConsumeEnterKeyPress","comment":"When true, this field will not pass Enter key press events up to it's parent when the\n drop-down selection window is open.  However, an Enter key press will still be\n \"unconsumed\" when the drop-down window is not open. When set to false, this\n method will always pass the Enter key press up to it's parent.\n\n The default is true.  Clients will set this to false when they wish to respond to an\n Enter event.  For example, a dialog may want to close itself on an Enter key press, even\n when the drop-down selection text field is still open. Contrastingly, when this field\n is embedded inside of a larger editor, like a multi-editor field dialog,\n the Enter key press should simply\n trigger the drop-down window to close and the editing to stop, but should not trigger the","params":[{"type_long":"boolean","name":"consume","comment":"","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"True signals to do nothing when the user presses Enter.  The default is to respond\n to the Enter key, using any existing selection to set this field's\n {@link #getSelectedValue() selected value}.\n\n <P>This can be set to true to allow clients to show drop-down matches without allowing\n the user to select them, triggering the window to be closed.\n@param ignore true to ignore Enter presses; false is the default","static":false,"name":"setIgnoreEnterKeyPress","comment":"True signals to do nothing when the user presses Enter.  The default is to respond\n to the Enter key, using any existing selection to set this field's\n #getSelectedValue().\n\n This can be set to true to allow clients to show drop-down matches without allowing\n the user to select them, triggering the window to be closed.","params":[{"type_long":"boolean","name":"ignore","comment":"true to ignore Enter presses; false is the default","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Sets the height of the matching window.  The default value is {@value #MIN_HEIGHT}.\n@param height the new height","static":false,"name":"setMatchingWindowHeight","comment":"Sets the height of the matching window.  The default value is .","params":[{"type_long":"int","name":"height","comment":"the new height","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Adds a listener that will be called back when the user makes a choice from the drop-down\n list.  A choice is a user action that triggers the selection window to be closed and updates\n the text field.\n\n <P>Note: the listener is stored in a {@link WeakDataStructureFactory weak data structure},\n  so you must maintain a reference to the listener you pass in--anonymous\n  classes or lambdas will not work.","static":false,"name":"addDropDownSelectionChoiceListener","comment":"Adds a listener that will be called back when the user makes a choice from the drop-down\n list.  A choice is a user action that triggers the selection window to be closed and updates\n the text field.\n\n Note: the listener is stored in a WeakDataStructureFactory,\n  so you must maintain a reference to the listener you pass in--anonymous\n  classes or lambdas will not work.","params":[{"type_long":"docking.widgets.DropDownSelectionChoiceListener<T>","name":"listener","comment":"","type_short":"DropDownSelectionChoiceListener"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Adds a listener to be notified when cell editing is canceled or completed.\n@param listener The listener to add\n@throws IllegalArgumentException if the listener has already been added","static":false,"name":"addCellEditorListener","comment":"Adds a listener to be notified when cell editing is canceled or completed.","params":[{"type_long":"javax.swing.event.CellEditorListener","name":"listener","comment":"The listener to add","type_short":"CellEditorListener"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Removes the given listener from this class if it has previously been added.\n@param listener The listener to remove.","static":false,"name":"removeCellEditorListener","comment":"Removes the given listener from this class if it has previously been added.","params":[{"type_long":"javax.swing.event.CellEditorListener","name":"listener","comment":"The listener to remove.","type_short":"CellEditorListener"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns the user's selection or null if the user has not made a selection.\n <p>\n Note: the the value returned from this method may not match the text in the field in the\n case that the user has selected a value and then typed some text.\n@return the user's selection or null if the user has not made a selection.","static":false,"name":"getSelectedValue","comment":"Returns the user's selection or null if the user has not made a selection.\n \n Note: the the value returned from this method may not match the text in the field in the\n case that the user has selected a value and then typed some text.","params":[],"throws":[],"return":{"type_long":"T","comment":"the user's selection or null if the user has not made a selection.","type_short":"T"}},{"javadoc":"Sets the current selection on this text field.  This will store the provided value\n and set the text of the text field to be the name of that value.  If the given value\n is null, then the text of this field will be cleared.\n@param value The value that is to be the current selection or null to clear the\n        selected value of this text field.","static":false,"name":"setSelectedValue","comment":"Sets the current selection on this text field.  This will store the provided value\n and set the text of the text field to be the name of that value.  If the given value\n is null, then the text of this field will be cleared.","params":[{"type_long":"T","name":"value","comment":"The value that is to be the current selection or null to clear the\n        selected value of this text field.","type_short":"T"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Closes the drop down window","static":false,"name":"closeDropDownWindow","comment":"Closes the drop down window","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"DropDownTextField","comment":"A text field that handles comparing text typed by the user to the list of objects\n and then presenting potential matches in a drop down window.  The items in this window\n cannot be selected.\n\n This class will fire #fireEditingStopped() and #fireEditingCancelled()\n events when the user makes a choice by pressing the ENTER key, thus allowing the client\n code to use this class similar in fashion to a property editor.  This behavior can be\n configured to:\n \n \tNot consume the ENTER key press (it consumes by default), allowing the parent container\n      to process the event (see #setConsumeEnterKeyPress(boolean)\n  \n  Ignore the ENTER key press completely (see #setIgnoreEnterKeyPress(boolean)\n  \n \n\n This class is subclassed to not only have the matching behavior, but to also allow for\n user selections.","fields":[]}
