{"implements":[],"javadoc":"A class to remember the current state of the tree, for things like expanded paths, \n selected paths and the view location.\n \n <p>This class is used to restore state for uses so that updates to the tree do not cause the\n user to lose their spot.   \n \n <p>Issues:\n <ul>\n \t<li>If the number of expanded items is too large, then the tree will spend a large \n      amount of time restoring, thus we limit the size of the expanded paths<\/li>\n  <li>If we have to trim the number of items we remember, we need to do so intelligently so\n      that the user experience seems natural (for example, when trimming what to keep, \n      be sure to first keep what is visible to the user, versus expanded\/selected items \n      that are scrolled off the top of the view.<\/li>\n <\/ul>","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"","static":false,"name":"<init>","comment":"","params":[{"type_long":"docking.widgets.tree.GTree","name":"tree","comment":"","type_short":"GTree"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"<init>","comment":"","params":[{"type_long":"docking.widgets.tree.GTree","name":"tree","comment":"","type_short":"GTree"},{"type_long":"docking.widgets.tree.GTreeNode","name":"node","comment":"","type_short":"GTreeNode"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getExpandedPaths","comment":"","params":[],"throws":[],"return":{"type_long":"java.util.List<javax.swing.tree.TreePath>","comment":"","type_short":"List"}},{"javadoc":"","static":false,"name":"getSelectedPaths","comment":"","params":[],"throws":[],"return":{"type_long":"java.util.List<javax.swing.tree.TreePath>","comment":"","type_short":"List"}},{"javadoc":"Returns the top few paths that are visible in the view.\n@return the top few paths that are visible in the view.","static":false,"name":"getViewPaths","comment":"Returns the top few paths that are visible in the view.","params":[],"throws":[],"return":{"type_long":"javax.swing.tree.TreePath[]","comment":"the top few paths that are visible in the view.","type_short":"javax.swing.tree.TreePath[]"}},{"javadoc":"","static":false,"name":"updateStateForMovedNodes","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"isEmpty","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"toString","comment":"","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}}],"name":"GTreeState","comment":"A class to remember the current state of the tree, for things like expanded paths, \n selected paths and the view location.\n \n This class is used to restore state for uses so that updates to the tree do not cause the\n user to lose their spot.   \n \n Issues:\n \n \tIf the number of expanded items is too large, then the tree will spend a large \n      amount of time restoring, thus we limit the size of the expanded paths\n  If we have to trim the number of items we remember, we need to do so intelligently so\n      that the user experience seems natural (for example, when trimming what to keep, \n      be sure to first keep what is visible to the user, versus expanded\/selected items \n      that are scrolled off the top of the view.\n ","fields":[]}
