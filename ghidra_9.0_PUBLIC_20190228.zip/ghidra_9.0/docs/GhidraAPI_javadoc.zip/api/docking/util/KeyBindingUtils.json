{"implements":[],"javadoc":"A class to provide utilities for system key bindings, such as importing \n and exporting key binding configurations.\n@since Tracker Id 329","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"","static":true,"name":"importKeyBindings","comment":"","params":[],"throws":[],"return":{"type_long":"ghidra.framework.options.ToolOptions","comment":"","type_short":"ToolOptions"}},{"javadoc":"Imports key bindings from a location selected by the user.\n <p>\n If there is a problem reading the data then the user will be shown an\n error dialog.\n@return An options object that is composed of key binding names and\n         their associated keystrokes.","static":true,"name":"createOptionsforKeybindings","comment":"Imports key bindings from a location selected by the user.\n \n If there is a problem reading the data then the user will be shown an\n error dialog.","params":[{"type_long":"java.io.InputStream","name":"inputStream","comment":"","type_short":"InputStream"}],"throws":[],"return":{"type_long":"ghidra.framework.options.ToolOptions","comment":"An options object that is composed of key binding names and\n         their associated keystrokes.","type_short":"ToolOptions"}},{"javadoc":"Saves the key bindings from the provided options object to a file chosen\n by the user.\n <p>\n If there is a problem writing the data then the user will be shown an\n error dialog.\n@param keyBindingOptions The options that contains key binding data.","static":true,"name":"exportKeyBindings","comment":"Saves the key bindings from the provided options object to a file chosen\n by the user.\n \n If there is a problem writing the data then the user will be shown an\n error dialog.","params":[{"type_long":"ghidra.framework.options.ToolOptions","name":"keyBindingOptions","comment":"The options that contains key binding data.","type_short":"ToolOptions"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"A convenience method to register the given action with the given component.  This is\n not usually done, as the action system is usually managed by the application's tool.\n However, for actions that are not registered with a tool, they can instead be \n bound to a component, hence this method.\n <p>\n The given action must have a keystroke assigned, or this method will do nothing.\n@param component the component to which the given action will be bound\n@param action the action to bind","static":true,"name":"registerAction","comment":"A convenience method to register the given action with the given component.  This is\n not usually done, as the action system is usually managed by the application's tool.\n However, for actions that are not registered with a tool, they can instead be \n bound to a component, hence this method.\n \n The given action must have a keystroke assigned, or this method will do nothing.","params":[{"type_long":"javax.swing.JComponent","name":"component","comment":"the component to which the given action will be bound","type_short":"JComponent"},{"type_long":"docking.action.DockingAction","name":"action","comment":"the action to bind","type_short":"DockingAction"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"A convenience method to register the given action with the given component.  This is\n not usually done, as the action system is usually managed by the application's tool.\n However, for actions that are not registered with a tool, they can instead be \n bound to a component, hence this method.\n <p>\n The given action must have a keystroke assigned, or this method will do nothing. \n \n <p>A typical use-case is to register an existing docking action with a text component, \n which is needed because the docking key event processing will not execute docking- \n registered actions if a text component has focus.\n@param component the component to which the given action will be bound\n@param action the action to bind\n@param contextProvider the provider of the context","static":true,"name":"registerAction","comment":"A convenience method to register the given action with the given component.  This is\n not usually done, as the action system is usually managed by the application's tool.\n However, for actions that are not registered with a tool, they can instead be \n bound to a component, hence this method.\n \n The given action must have a keystroke assigned, or this method will do nothing. \n \n A typical use-case is to register an existing docking action with a text component, \n which is needed because the docking key event processing will not execute docking- \n registered actions if a text component has focus.","params":[{"type_long":"javax.swing.JComponent","name":"component","comment":"the component to which the given action will be bound","type_short":"JComponent"},{"type_long":"docking.action.DockingAction","name":"action","comment":"the action to bind","type_short":"DockingAction"},{"type_long":"docking.action.ActionContextProvider","name":"contextProvider","comment":"the provider of the context","type_short":"ActionContextProvider"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"A convenience method to register the given action with the given component.  This is\n not usually done, as the action system is usually managed by the application's tool.\n However, for actions that are not registered with a tool, they can instead be \n bound to a component, hence this method.\n <p>\n The given action must have a keystroke assigned, or this method will do nothing. \n \n <p>A typical use-case is to register an existing docking action with a text component, \n which is needed because the docking key event processing will not execute docking- \n registered actions if a text component has focus.\n@param component the component to which the given action will be bound\n@param action the action to bind\n@param contextProvider the provider of the context\n@param focusCondition see {@link JComponent} for more info; the default is \n        usually {@link JComponent#WHEN_FOCUSED}","static":true,"name":"registerAction","comment":"A convenience method to register the given action with the given component.  This is\n not usually done, as the action system is usually managed by the application's tool.\n However, for actions that are not registered with a tool, they can instead be \n bound to a component, hence this method.\n \n The given action must have a keystroke assigned, or this method will do nothing. \n \n A typical use-case is to register an existing docking action with a text component, \n which is needed because the docking key event processing will not execute docking- \n registered actions if a text component has focus.","params":[{"type_long":"javax.swing.JComponent","name":"component","comment":"the component to which the given action will be bound","type_short":"JComponent"},{"type_long":"docking.action.DockingAction","name":"action","comment":"the action to bind","type_short":"DockingAction"},{"type_long":"docking.action.ActionContextProvider","name":"contextProvider","comment":"the provider of the context","type_short":"ActionContextProvider"},{"type_long":"int","name":"focusCondition","comment":"see JComponent for more info; the default is \n        usually JComponent#WHEN_FOCUSED","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Registers the given action with the given key binding on the given component.\n@param component the component to which the action will be registered\n@param keyStroke the keystroke for to which the action will be bound\n@param action the action to execute when the given keystroke is triggered\n@param focusCondition the focus condition under which to bind the action\n \t\t\t({@link JComponent#getInputMap(int)})\n@param focusCondition see {@link JComponent} for more info; the default is \n        usually {@link JComponent#WHEN_FOCUSED}","static":true,"name":"registerAction","comment":"Registers the given action with the given key binding on the given component.","params":[{"type_long":"javax.swing.JComponent","name":"component","comment":"the component to which the action will be registered","type_short":"JComponent"},{"type_long":"javax.swing.KeyStroke","name":"keyStroke","comment":"the keystroke for to which the action will be bound","type_short":"KeyStroke"},{"type_long":"javax.swing.Action","name":"action","comment":"the action to execute when the given keystroke is triggered","type_short":"Action"},{"type_long":"int","name":"focusCondition","comment":"the focus condition under which to bind the action\n \t\t\t(JComponent#getInputMap(int))","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Allows clients to clear Java key bindings.  This is useful when your application\n is using tool-level key bindings that share the same keystroke as a built-in Java\n action, such as Ctrl-C for the copy action.\n <p>\n Note: this method clears focus for the default ({@link JComponent#WHEN_FOCUSED})\n \t     focus condition.\n@param component the component for which to clear the key binding\n@param keyStroke the keystroke of the binding to be cleared\n@see #clearKeyBinding(JComponent, KeyStroke, int)","static":true,"name":"clearKeyBinding","comment":"Allows clients to clear Java key bindings.  This is useful when your application\n is using tool-level key bindings that share the same keystroke as a built-in Java\n action, such as Ctrl-C for the copy action.\n \n Note: this method clears focus for the default (JComponent#WHEN_FOCUSED)\n \t     focus condition.","params":[{"type_long":"javax.swing.JComponent","name":"component","comment":"the component for which to clear the key binding","type_short":"JComponent"},{"type_long":"javax.swing.KeyStroke","name":"keyStroke","comment":"the keystroke of the binding to be cleared","type_short":"KeyStroke"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Allows clients to clear Java key bindings.  This is useful when your application\n is using tool-level key bindings that share the same keystroke as a built-in Java\n action, such as Ctrl-C for the copy action.\n@param component the component for which to clear the key binding\n@param keyStroke the keystroke of the binding to be cleared\n@param focusCondition the particular focus condition under which the given \n        keystroke is used (see {@link JComponent#getInputMap(int)}).","static":true,"name":"clearKeyBinding","comment":"Allows clients to clear Java key bindings.  This is useful when your application\n is using tool-level key bindings that share the same keystroke as a built-in Java\n action, such as Ctrl-C for the copy action.","params":[{"type_long":"javax.swing.JComponent","name":"component","comment":"the component for which to clear the key binding","type_short":"JComponent"},{"type_long":"javax.swing.KeyStroke","name":"keyStroke","comment":"the keystroke of the binding to be cleared","type_short":"KeyStroke"},{"type_long":"int","name":"focusCondition","comment":"the particular focus condition under which the given \n        keystroke is used (see JComponent#getInputMap(int)).","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns the registered action for the given keystroke, or null of no action is bound\n to that keystroke.\n@param component the component for which to check the binding\n@param keyStroke the keystroke for which to find a bound action\n@param focusCondition the focus condition under which to check for the binding\n \t\t\t({@link JComponent#getInputMap(int)})\n@return the action registered to the given keystroke, or null of no action is\n         registered","static":true,"name":"getAction","comment":"Returns the registered action for the given keystroke, or null of no action is bound\n to that keystroke.","params":[{"type_long":"javax.swing.JComponent","name":"component","comment":"the component for which to check the binding","type_short":"JComponent"},{"type_long":"javax.swing.KeyStroke","name":"keyStroke","comment":"the keystroke for which to find a bound action","type_short":"KeyStroke"},{"type_long":"int","name":"focusCondition","comment":"the focus condition under which to check for the binding\n \t\t\t(JComponent#getInputMap(int))","type_short":"int"}],"throws":[],"return":{"type_long":"javax.swing.Action","comment":"the action registered to the given keystroke, or null of no action is\n         registered","type_short":"Action"}},{"javadoc":"Takes the existing docking action and allows it to be registered with Swing components\n \n <p>The new action will not be correctly wired into the Docking Action Context system.  \n This means that the given docking action should not rely on \n {@link DockingAction#isEnabledForContext(docking.ActionContext)} to work when called \n from the Swing widget.\n@param action the docking action to adapt to a Swing {@link Action}\n@return the new action","static":true,"name":"adaptDockingActionToNonContextAction","comment":"Takes the existing docking action and allows it to be registered with Swing components\n \n The new action will not be correctly wired into the Docking Action Context system.  \n This means that the given docking action should not rely on \n DockingAction#isEnabledForContext(docking.ActionContext) to work when called \n from the Swing widget.","params":[{"type_long":"docking.action.DockingAction","name":"action","comment":"the docking action to adapt to a Swing Action","type_short":"DockingAction"}],"throws":[],"return":{"type_long":"javax.swing.Action","comment":"the new action","type_short":"Action"}}],"name":"KeyBindingUtils","comment":"A class to provide utilities for system key bindings, such as importing \n and exporting key binding configurations.","fields":[{"type_long":"java.lang.String","javadoc":"","static":true,"name":"PREFERENCES_FILE_EXTENSION","comment":"","type_short":"String","constant_value":"\".kbxml\""}]}
