{"implements":["docking.action.DockingActionIf"],"javadoc":"<code>DockingAction<\/code> defines a user action associated with a toolbar icon and\/or\n menu item.  All actions must specify an action name which will be used to associate key bindings\n and will be used as the popup menu item when needed.  This name should be unique across\n the entire application.\n <p>\n DockingActions can be invoked from the global menu, a popup menu, a toolbar, and\/or a keybinding,\n depending on whether or not menuBarData, popupMenuData, toolBarData, and\/or keyBindingData have \n been set.\n <p>\n <b> \n Implementors of this class should override {@link #actionPerformed(ActionContext)}.\n <\/b>\n <p>\n Generally, implementors should also override {@link #isEnabledForContext(ActionContext)}.  This\n method is used to determine if an action if applicable to the current context.   Overriding this\n method allows actions to manage their own enablement.  Otherwise, the default behavior for this\n method is to return the current enabled property of the action.  This allows for the possibility\n for plugins to manage the enablement of its actions.\n <p>\n By default, actions that are not enabledForContext do not appear in the popup menu.  To change\n that behavior, implementors can also override {@link #deleteThisContextMethod(ActionContext)}.  \n This method is used to determine if the action should appear on the popup menu based on the given\n context.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"","static":false,"name":"<init>","comment":"","params":[{"type_long":"java.lang.String","name":"name","comment":"","type_short":"String"},{"type_long":"java.lang.String","name":"owner","comment":"","type_short":"String"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"<init>","comment":"","params":[{"type_long":"java.lang.String","name":"name","comment":"","type_short":"String"},{"type_long":"java.lang.String","name":"owner","comment":"","type_short":"String"},{"type_long":"boolean","name":"isKeyBindingManaged","comment":"","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"actionPerformed","comment":"","params":[{"type_long":"docking.ActionContext","name":"context","comment":"","type_short":"ActionContext"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"addPropertyChangeListener","comment":"","params":[{"type_long":"java.beans.PropertyChangeListener","name":"listener","comment":"","type_short":"PropertyChangeListener"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"removePropertyChangeListener","comment":"","params":[{"type_long":"java.beans.PropertyChangeListener","name":"listener","comment":"","type_short":"PropertyChangeListener"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"isKeyBindingManaged","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"getDescription","comment":"","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"","static":false,"name":"getFullName","comment":"","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"","static":false,"name":"getKeyBindingData","comment":"","params":[],"throws":[],"return":{"type_long":"docking.action.KeyBindingData","comment":"","type_short":"KeyBindingData"}},{"javadoc":"","static":false,"name":"getDefaultKeyBindingData","comment":"","params":[],"throws":[],"return":{"type_long":"docking.action.KeyBindingData","comment":"","type_short":"KeyBindingData"}},{"javadoc":"","static":false,"name":"getKeyBinding","comment":"","params":[],"throws":[],"return":{"type_long":"javax.swing.KeyStroke","comment":"","type_short":"KeyStroke"}},{"javadoc":"","static":false,"name":"getMenuBarData","comment":"","params":[],"throws":[],"return":{"type_long":"docking.action.MenuData","comment":"","type_short":"MenuData"}},{"javadoc":"","static":false,"name":"getName","comment":"","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"","static":false,"name":"getOwner","comment":"","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"","static":false,"name":"getPopupMenuData","comment":"","params":[],"throws":[],"return":{"type_long":"docking.action.MenuData","comment":"","type_short":"MenuData"}},{"javadoc":"","static":false,"name":"getToolBarData","comment":"","params":[],"throws":[],"return":{"type_long":"docking.action.ToolBarData","comment":"","type_short":"ToolBarData"}},{"javadoc":"","static":false,"name":"getInceptionInformation","comment":"","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"","static":false,"name":"isEnabled","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"isAddToPopup","comment":"","params":[{"type_long":"docking.ActionContext","name":"context","comment":"","type_short":"ActionContext"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"isEnabledForContext","comment":"","params":[{"type_long":"docking.ActionContext","name":"context","comment":"","type_short":"ActionContext"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"isValidContext","comment":"","params":[{"type_long":"docking.ActionContext","name":"context","comment":"","type_short":"ActionContext"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"isValidGlobalContext","comment":"","params":[{"type_long":"docking.ActionContext","name":"globalContext","comment":"","type_short":"ActionContext"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Default behavior is to add to main window;","static":false,"name":"shouldAddToWindow","comment":"Default behavior is to add to main window;","params":[{"type_long":"boolean","name":"isMainWindow","comment":"","type_short":"boolean"},{"type_long":"java.util.Set<java.lang.Class<?>>","name":"contextTypes","comment":"","type_short":"Set"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Set a specific Help location for this action.\n This will replace the default help location\n@param location the help location for the action.","static":false,"name":"setHelpLocation","comment":"Set a specific Help location for this action.\n This will replace the default help location","params":[{"type_long":"ghidra.util.HelpLocation","name":"location","comment":"the help location for the action.","type_short":"HelpLocation"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Signals the the help system that this action does not need a help entry.   Some actions\n are so obvious that they do not require help, such as an action that renames a file.\n <p>\n The method should be sparsely used, as most actions should provide help.","static":false,"name":"markHelpUnnecessary","comment":"Signals the the help system that this action does not need a help entry.   Some actions\n are so obvious that they do not require help, such as an action that renames a file.\n \n The method should be sparsely used, as most actions should provide help.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"setEnabled","comment":"","params":[{"type_long":"boolean","name":"newValue","comment":"","type_short":"boolean"}],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"createButton","comment":"","params":[],"throws":[],"return":{"type_long":"javax.swing.JButton","comment":"","type_short":"JButton"}},{"javadoc":"","static":false,"name":"createMenuItem","comment":"","params":[{"type_long":"boolean","name":"isPopup","comment":"","type_short":"boolean"}],"throws":[],"return":{"type_long":"javax.swing.JMenuItem","comment":"","type_short":"JMenuItem"}},{"javadoc":"Sets the {@link #MenuData} to be used to put this action on the tool's menu bar.\n@param newMenuData the MenuData to be used to put this action on the tool's menu bar.","static":false,"name":"setMenuBarData","comment":"Sets the #MenuData to be used to put this action on the tool's menu bar.","params":[{"type_long":"docking.action.MenuData","name":"newMenuData","comment":"the MenuData to be used to put this action on the tool's menu bar.","type_short":"MenuData"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Sets the {@link #MenuData} to be used to put this action in the tool's popup menu.\n@param newMenuData the MenuData to be used to put this action on the tool's popup menu.","static":false,"name":"setPopupMenuData","comment":"Sets the #MenuData to be used to put this action in the tool's popup menu.","params":[{"type_long":"docking.action.MenuData","name":"newMenuData","comment":"the MenuData to be used to put this action on the tool's popup menu.","type_short":"MenuData"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Sets the {@link #ToolBarData} to be used to put this action on the tool's toolbar.\n@param newToolBarData the ToolBarData to be used to put this action on the tool's toolbar.","static":false,"name":"setToolBarData","comment":"Sets the #ToolBarData to be used to put this action on the tool's toolbar.","params":[{"type_long":"docking.action.ToolBarData","name":"newToolBarData","comment":"the ToolBarData to be used to put this action on the tool's toolbar.","type_short":"ToolBarData"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Sets the {@link #KeyBindingData} to be used to assign this action to a keybinding.\n@param newKeyBindingData the KeyBindingData to be used to assign this action to a keybinding.","static":false,"name":"setKeyBindingData","comment":"Sets the #KeyBindingData to be used to assign this action to a keybinding.","params":[{"type_long":"docking.action.KeyBindingData","name":"newKeyBindingData","comment":"the KeyBindingData to be used to assign this action to a keybinding.","type_short":"KeyBindingData"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"<b>Users creating actions should not call this method, but should instead call\n {@link #setKeyBindingData(KeyBindingData)}.<\/b>\n@param newKeyBindingData the KeyBindingData to be used to assign this action to a keybinding.\n@param validate true signals that this method should convert keybindings to their \n                 OS-dependent form (for example, on Mac a <tt>Ctrl<\/tt> \n                 key is changed to the <tt>Command<\/tt> key).","static":false,"name":"setUnvalidatedKeyBindingData","comment":"Users creating actions should not call this method, but should instead call\n #setKeyBindingData(KeyBindingData).","params":[{"type_long":"docking.action.KeyBindingData","name":"newKeyBindingData","comment":"the KeyBindingData to be used to assign this action to a keybinding.","type_short":"KeyBindingData"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Sets the description to be used in the tooltip.\n@param description the description to be set.","static":false,"name":"setDescription","comment":"Sets the description to be used in the tooltip.","params":[{"type_long":"java.lang.String","name":"newDescription","comment":"","type_short":"String"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Cleans up any resources used by the action.","static":false,"name":"dispose","comment":"Cleans up any resources used by the action.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"toString","comment":"","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"","static":false,"name":"getHelpInfo","comment":"","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"","static":false,"name":"firePropertyChanged","comment":"","params":[{"type_long":"java.lang.String","name":"propertyName","comment":"","type_short":"String"},{"type_long":"java.lang.Object","name":"oldValue","comment":"","type_short":"Object"},{"type_long":"java.lang.Object","name":"newValue","comment":"","type_short":"Object"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getHelpObject","comment":"","params":[],"throws":[],"return":{"type_long":"java.lang.Object","comment":"","type_short":"Object"}}],"name":"DockingAction","comment":"DockingAction defines a user action associated with a toolbar icon and\/or\n menu item.  All actions must specify an action name which will be used to associate key bindings\n and will be used as the popup menu item when needed.  This name should be unique across\n the entire application.\n \n DockingActions can be invoked from the global menu, a popup menu, a toolbar, and\/or a keybinding,\n depending on whether or not menuBarData, popupMenuData, toolBarData, and\/or keyBindingData have \n been set.\n \n  \n Implementors of this class should override #actionPerformed(ActionContext).\n \n \n Generally, implementors should also override #isEnabledForContext(ActionContext).  This\n method is used to determine if an action if applicable to the current context.   Overriding this\n method allows actions to manage their own enablement.  Otherwise, the default behavior for this\n method is to return the current enabled property of the action.  This allows for the possibility\n for plugins to manage the enablement of its actions.\n \n By default, actions that are not enabledForContext do not appear in the popup menu.  To change\n that behavior, implementors can also override #deleteThisContextMethod(ActionContext).  \n This method is used to determine if the action should appear on the popup menu based on the given\n context.","fields":[]}
