{"implements":[],"javadoc":"A class that can be used as an interface for using actions associated with keybindings.  This\n class is meant to only by used by internal Ghidra key event processing.","static":false,"extends":"javax.swing.AbstractAction","methods":[{"javadoc":"","static":false,"name":"<init>","comment":"","params":[{"type_long":"docking.DockingWindowManager","name":"winMgr","comment":"","type_short":"DockingWindowManager"},{"type_long":"docking.action.DockingActionIf","name":"action","comment":"","type_short":"DockingActionIf"},{"type_long":"javax.swing.KeyStroke","name":"keyStroke","comment":"","type_short":"KeyStroke"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"isEnabled","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"isReservedKeybindingPrecedence","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"getKeyBindingPrecedence","comment":"","params":[],"throws":[],"return":{"type_long":"docking.KeyBindingPrecedence","comment":"","type_short":"KeyBindingPrecedence"}},{"javadoc":"","static":false,"name":"actionPerformed","comment":"","params":[{"type_long":"java.awt.event.ActionEvent","name":"e","comment":"","type_short":"ActionEvent"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Convert the toString() form of the keyStroke.\n <br>In Java 1.4.2 & earlier, Ctrl-M is returned as \"keyCode CtrlM-P\"\n and we want it to look like: \"Ctrl-M\".\n <br>In Java 1.5.0, Ctrl-M is returned as \"ctrl pressed M\"\n and we want it to look like: \"Ctrl-M\".","static":true,"name":"parseKeyStroke","comment":"Convert the toString() form of the keyStroke.\n In Java 1.4.2  earlier, Ctrl-M is returned as \"keyCode CtrlM-P\"\n and we want it to look like: \"Ctrl-M\".\n In Java 1.5.0, Ctrl-M is returned as \"ctrl pressed M\"\n and we want it to look like: \"Ctrl-M\".","params":[{"type_long":"javax.swing.KeyStroke","name":"keyStroke","comment":"","type_short":"KeyStroke"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"Parses the given text into a KeyStroke.  This method relies upon \n {@link KeyStroke#getKeyStroke(String)} for parsing.  Before making that call, this method\n will perform fixup on the given text for added flexibility.  For example, the given \n text may contain spaces or dashes as the separators between parts in the string.  Also, \n the text is converted such that it is not case-sensitive.  So, the following example \n formats are allowed:\n <pre>\n    Alt-F\n    alt p\n    Ctrl-Alt-Z\n    ctrl Z\n <\/pre>\n@param keyStroke\n@return ","static":true,"name":"parseKeyStroke","comment":"Parses the given text into a KeyStroke.  This method relies upon \n KeyStroke#getKeyStroke(String) for parsing.  Before making that call, this method\n will perform fixup on the given text for added flexibility.  For example, the given \n text may contain spaces or dashes as the separators between parts in the string.  Also, \n the text is converted such that it is not case-sensitive.  So, the following example \n formats are allowed:\n \n    Alt-F\n    alt p\n    Ctrl-Alt-Z\n    ctrl Z\n ","params":[{"type_long":"java.lang.String","name":"keyStroke","comment":"","type_short":"String"}],"throws":[],"return":{"type_long":"javax.swing.KeyStroke","comment":"","type_short":"KeyStroke"}}],"name":"DockingKeyBindingAction","comment":"A class that can be used as an interface for using actions associated with keybindings.  This\n class is meant to only by used by internal Ghidra key event processing.","fields":[]}
