{"implements":["ghidra.util.task.TaskListener","ghidra.util.StatusListener","docking.action.ActionContextProvider"],"javadoc":"Base class used for creating dialogs in Ghidra. Subclass this to create a dialog provider that has\n all the gui elements to appear in the dialog, then use tool.showDialog() to display your dialog.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"","static":false,"name":"getComponent","comment":"","params":[],"throws":[],"return":{"type_long":"javax.swing.JComponent","comment":"","type_short":"JComponent"}},{"javadoc":"Sets the background on this component.\n@param color The color to set.","static":false,"name":"setBackground","comment":"Sets the background on this component.","params":[{"type_long":"java.awt.Color","name":"color","comment":"The color to set.","type_short":"Color"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Gets the background color of this component.\n@return The background color of this component.","static":false,"name":"getBackground","comment":"Gets the background color of this component.","params":[],"throws":[],"return":{"type_long":"java.awt.Color","comment":"The background color of this component.","type_short":"Color"}},{"javadoc":"Sets the preferred size of the dialog.  Note that if you set the preferred size, the\n dialog will ignore any natural preferred size of your components.\n@param width the preferred width\n@param height the preferred height;","static":false,"name":"setPreferredSize","comment":"Sets the preferred size of the dialog.  Note that if you set the preferred size, the\n dialog will ignore any natural preferred size of your components.","params":[{"type_long":"int","name":"width","comment":"the preferred width","type_short":"int"},{"type_long":"int","name":"height","comment":"the preferred height;","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"setDefaultSize","comment":"","params":[{"type_long":"int","name":"width","comment":"","type_short":"int"},{"type_long":"int","name":"height","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getDefaultSize","comment":"","params":[],"throws":[],"return":{"type_long":"java.awt.Dimension","comment":"","type_short":"Dimension"}},{"javadoc":"","static":false,"name":"setMinimumSize","comment":"","params":[{"type_long":"int","name":"width","comment":"","type_short":"int"},{"type_long":"int","name":"height","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Sets the minimum size of the dialog\n@param minSize the min size of the dialog","static":false,"name":"setMinimumSize","comment":"Sets the minimum size of the dialog","params":[{"type_long":"java.awt.Dimension","name":"minSize","comment":"the min size of the dialog","type_short":"Dimension"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns the preferred size of this component.\n@return the preferred size of this component.","static":false,"name":"getPreferredSize","comment":"Returns the preferred size of this component.","params":[],"throws":[],"return":{"type_long":"java.awt.Dimension","comment":"the preferred size of this component.","type_short":"Dimension"}},{"javadoc":"Sets the cursor on the root panel for the dialog component.\n@param cursor the cursor to use.","static":false,"name":"setCursor","comment":"Sets the cursor on the root panel for the dialog component.","params":[{"type_long":"java.awt.Cursor","name":"cursor","comment":"the cursor to use.","type_short":"Cursor"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Blocks the calling thread until the current task has completed; used\n by JUnit tests.","static":false,"name":"waitForCurrentTask","comment":"Blocks the calling thread until the current task has completed; used\n by JUnit tests.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns true if this dialog is running a task.\n@return true if this dialog is running a task.","static":false,"name":"isRunningTask","comment":"Returns true if this dialog is running a task.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if this dialog is running a task.","type_short":"boolean"}},{"javadoc":"Sets the text in the dialog's status line using the default color\n@param text the text to display in the status line","static":false,"name":"setStatusText","comment":"Sets the text in the dialog's status line using the default color","params":[{"type_long":"java.lang.String","name":"text","comment":"the text to display in the status line","type_short":"String"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Sets the text in the dialog's status line using the specified message type to control\n the color.\n@param message the message\n@param type the message type","static":false,"name":"setStatusText","comment":"Sets the text in the dialog's status line using the specified message type to control\n the color.","params":[{"type_long":"java.lang.String","name":"message","comment":"the message","type_short":"String"},{"type_long":"ghidra.util.MessageType","name":"type","comment":"the message type","type_short":"MessageType"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"setStatusText","comment":"","params":[{"type_long":"java.lang.String","name":"message","comment":"","type_short":"String"},{"type_long":"ghidra.util.MessageType","name":"type","comment":"","type_short":"MessageType"},{"type_long":"boolean","name":"alert","comment":"","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Will hide the progress panel if it was showing.\n@see #showTaskMonitorComponent(String, boolean, boolean)","static":false,"name":"hideTaskMonitorComponent","comment":"Will hide the progress panel if it was showing.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Clears the text from the dialog's status line.","static":false,"name":"clearStatusText","comment":"Clears the text from the dialog's status line.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"returns the current status in the dialogs status line=\n@return the status text","static":false,"name":"getStatusText","comment":"returns the current status in the dialogs status line=","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"the status text","type_short":"String"}},{"javadoc":"Shows the progress bar for this dialog.\n@param localTitle the name of the task\n@param hasProgress true if the progress bar should show progress; false to be indeterminate\n@param canCancel true if the task can be cancelled\n@return the {@link TaskMonitor} used by to communicate progress\n@see #hideTaskMonitorComponent()","static":false,"name":"showTaskMonitorComponent","comment":"Shows the progress bar for this dialog.","params":[{"type_long":"java.lang.String","name":"localTitle","comment":"the name of the task","type_short":"String"},{"type_long":"boolean","name":"hasProgress","comment":"true if the progress bar should show progress; false to be indeterminate","type_short":"boolean"},{"type_long":"boolean","name":"canCancel","comment":"true if the task can be cancelled","type_short":"boolean"}],"throws":[],"return":{"type_long":"ghidra.util.task.TaskMonitor","comment":"the TaskMonitor used by to communicate progress","type_short":"TaskMonitor"}},{"javadoc":"","static":false,"name":"close","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns true if this component should be displayed in a modal dialog\n@return true if this component should be displayed in a modal dialog","static":false,"name":"isModal","comment":"Returns true if this component should be displayed in a modal dialog","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if this component should be displayed in a modal dialog","type_short":"boolean"}},{"javadoc":"Sets the horizontal position of the status label.\n@param justification One of the following constants\n           defined in <code>SwingConstants<\/code>:\n           <code>LEFT<\/code>,\n           <code>CENTER<\/code> (the default for image-only labels),\n           <code>RIGHT<\/code>,","static":false,"name":"setStatusJustification","comment":"Sets the horizontal position of the status label.","params":[{"type_long":"int","name":"justification","comment":"One of the following constants\n           defined in SwingConstants:\n           LEFT,\n           CENTER (the default for image-only labels),\n           RIGHT,","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Notification that the task was canceled; the progress panel is\n removed.\n@param task task that was canceled","static":false,"name":"taskCancelled","comment":"Notification that the task was canceled; the progress panel is\n removed.","params":[{"type_long":"ghidra.util.task.Task","name":"task","comment":"task that was canceled","type_short":"Task"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Notification that the given task completed so that the progress\n panel can be removed.\n@param task task that completed","static":false,"name":"taskCompleted","comment":"Notification that the given task completed so that the progress\n panel can be removed.","params":[{"type_long":"ghidra.util.task.Task","name":"task","comment":"task that completed","type_short":"Task"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Sets the component that should be given focus when the dialog is activated.\n <p>\n Implementation Note:  If the given component is a JButton, then that component will be\n made the default button.\n@param focusComponent the component that should receive default focus.\n@see #setFocusComponent(Component)","static":false,"name":"setFocusComponent","comment":"Sets the component that should be given focus when the dialog is activated.\n \n Implementation Note:  If the given component is a JButton, then that component will be\n made the default button.","params":[{"type_long":"java.awt.Component","name":"focusComponent","comment":"the component that should receive default focus.","type_short":"Component"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns the component that will receive focus when the dialog is shown\n@return the component","static":false,"name":"getFocusComponent","comment":"Returns the component that will receive focus when the dialog is shown","params":[],"throws":[],"return":{"type_long":"java.awt.Component","comment":"the component","type_short":"Component"}},{"javadoc":"Set the help Location for this dialog.\n@param helpLocation the helpLocation for this dialog.","static":false,"name":"setHelpLocation","comment":"Set the help Location for this dialog.","params":[{"type_long":"ghidra.util.HelpLocation","name":"helpLocation","comment":"the helpLocation for this dialog.","type_short":"HelpLocation"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Sets the button to make \"Default\" when the dialog is shown.  If no default button is\n desired, then pass <tt>null<\/tt> as the <tt>button<\/tt> value.\n@param button the button to make default enabled.","static":false,"name":"setDefaultButton","comment":"Sets the button to make \"Default\" when the dialog is shown.  If no default button is\n desired, then pass null as the button value.","params":[{"type_long":"javax.swing.JButton","name":"button","comment":"the button to make default enabled.","type_short":"JButton"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns the default button for the dialog.\n@return the button","static":false,"name":"getDefaultButton","comment":"Returns the default button for the dialog.","params":[],"throws":[],"return":{"type_long":"javax.swing.JButton","comment":"the button","type_short":"JButton"}},{"javadoc":"Sets the title to be displayed in the dialogs title bar\n@param title the title","static":false,"name":"setTitle","comment":"Sets the title to be displayed in the dialogs title bar","params":[{"type_long":"java.lang.String","name":"title","comment":"the title","type_short":"String"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns the title for this component\n@return the title","static":false,"name":"getTitle","comment":"Returns the title for this component","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"the title","type_short":"String"}},{"javadoc":"Moves the dialog associated with this provider to the front.","static":false,"name":"toFront","comment":"Moves the dialog associated with this provider to the front.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"isVisible","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"isShowing","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Sets the initial location for the dialog\n@param x the x coordinate\n@param y the y coordinate","static":false,"name":"setInitialLocation","comment":"Sets the initial location for the dialog","params":[{"type_long":"int","name":"x","comment":"the x coordinate","type_short":"int"},{"type_long":"int","name":"y","comment":"the y coordinate","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns the initial location for the dialog or null if none was set\n@return the point","static":false,"name":"getIntialLocation","comment":"Returns the initial location for the dialog or null if none was set","params":[],"throws":[],"return":{"type_long":"java.awt.Point","comment":"the point","type_short":"Point"}},{"javadoc":"Sets the resizable property for the corresponding dialog.\n@param resizeable if false the user will not be able to resize the dialog.","static":false,"name":"setResizable","comment":"Sets the resizable property for the corresponding dialog.","params":[{"type_long":"boolean","name":"resizeable","comment":"if false the user will not be able to resize the dialog.","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"isResizeable","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"An optional extension point for subclasses to provider action context for the actions used by\n this provider.\n@param event The mouse event used (may be null) to generate a popup menu","static":false,"name":"getActionContext","comment":"An optional extension point for subclasses to provider action context for the actions used by\n this provider.","params":[{"type_long":"java.awt.event.MouseEvent","name":"event","comment":"The mouse event used (may be null) to generate a popup menu","type_short":"MouseEvent"}],"throws":[],"return":{"type_long":"docking.ActionContext","comment":"","type_short":"ActionContext"}},{"javadoc":"Add an action to this dialog.  Only actions with icons are added to the toolbar.\n@param action popup menu action","static":false,"name":"addAction","comment":"Add an action to this dialog.  Only actions with icons are added to the toolbar.","params":[{"type_long":"docking.action.DockingActionIf","name":"action","comment":"popup menu action","type_short":"DockingActionIf"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getActions","comment":"","params":[],"throws":[],"return":{"type_long":"java.util.Set<docking.action.DockingActionIf>","comment":"","type_short":"Set"}},{"javadoc":"","static":false,"name":"removeAction","comment":"","params":[{"type_long":"docking.action.DockingActionIf","name":"action","comment":"","type_short":"DockingActionIf"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Sets this dialog to remember its location from one invocation to the next. The default is to\n remember location.\n@param rememberLocation true to remember, false otherwise.","static":false,"name":"setRememberLocation","comment":"Sets this dialog to remember its location from one invocation to the next. The default is to\n remember location.","params":[{"type_long":"boolean","name":"rememberLocation","comment":"true to remember, false otherwise.","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns true if this dialog remembers its location from one invocation to the next.\n@return true if this dialog remembers its location from one invocation to the next.","static":false,"name":"getRememberLocation","comment":"Returns true if this dialog remembers its location from one invocation to the next.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if this dialog remembers its location from one invocation to the next.","type_short":"boolean"}},{"javadoc":"Sets this dialog to remember its size from one invocation to the next. The default is to\n remember size.\n@param rememberSize true to remember, false otherwise.","static":false,"name":"setRememberSize","comment":"Sets this dialog to remember its size from one invocation to the next. The default is to\n remember size.","params":[{"type_long":"boolean","name":"rememberSize","comment":"true to remember, false otherwise.","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns true if this dialog remembers its size from one invocation to the next.\n@return true if this dialog remembers its size from one invocation to the next.","static":false,"name":"getRemberSize","comment":"Returns true if this dialog remembers its size from one invocation to the next.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if this dialog remembers its size from one invocation to the next.","type_short":"boolean"}},{"javadoc":"Returns true if this dialog uses shared location and size information.\n@return true if this dialog uses shared location and size information.\n@see #setUseSharedLocation(boolean)","static":false,"name":"getUseSharedLocation","comment":"Returns true if this dialog uses shared location and size information.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if this dialog uses shared location and size information.","type_short":"boolean"}},{"javadoc":"Specifies whether or not this dialog component should use the same remembered location (and\n size) no matter which window this dialog is launched from.  The default is not to use\n shared location and size, which means that there is a remembered location and size for this\n dialog for each window that has launched it (i.e. the window is the parent of the dialog).\n@param useSharedLocation true to share locations","static":false,"name":"setUseSharedLocation","comment":"Specifies whether or not this dialog component should use the same remembered location (and\n size) no matter which window this dialog is launched from.  The default is not to use\n shared location and size, which means that there is a remembered location and size for this\n dialog for each window that has launched it (i.e. the window is the parent of the dialog).","params":[{"type_long":"boolean","name":"useSharedLocation","comment":"true to share locations","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns true if this dialog is intended to be shown and hidden relatively quickly.  This\n is used to determine if this dialog should be allowed to parent other components.   The\n default is false.\n@return true if this dialog is transient","static":false,"name":"isTransient","comment":"Returns true if this dialog is intended to be shown and hidden relatively quickly.  This\n is used to determine if this dialog should be allowed to parent other components.   The\n default is false.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if this dialog is transient","type_short":"boolean"}},{"javadoc":"Sets this dialog to be transient (see {@link #isTransient()}\n@param isTransient true for transient; false is the default","static":false,"name":"setTransient","comment":"Sets this dialog to be transient (see #isTransient()","params":[{"type_long":"boolean","name":"isTransient","comment":"true for transient; false is the default","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"toString","comment":"","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"","static":true,"name":"main","comment":"","params":[{"type_long":"java.lang.String[]","name":"args","comment":"","type_short":"java.lang.String[]"}],"throws":[{"type_long":"java.lang.Exception","comment":"","type_short":"Exception"}],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"DialogComponentProvider","comment":"Base class used for creating dialogs in Ghidra. Subclass this to create a dialog provider that has\n all the gui elements to appear in the dialog, then use tool.showDialog() to display your dialog.","fields":[]}
