{"implements":[],"javadoc":"General resource management class that provides a convenient\n way of accessing external resources used in Ghidra.\n <p>\n <a name=\"safe\"><\/a>\n There is a known problem with Java's {@link MediaTracker} that can cause deadlocks.  The various\n methods of this class that create {@link ImageIcon}s will do so by loading image bytes directly,\n as opposed to using the flawed constructor {@link ImageIcon#ImageIcon(Image)}.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"","static":false,"name":"<init>","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Finds a resource with a given name. This method returns null if no\n resource with this name is found. The rules for searching resources\n associated with a given class are implemented by the defining class\n loader of the class.\n@param filename \"partially\" qualified resource filename to get, e.g.,\n        \"images\/go-home.png\" would look for the file named 'home.gif' in\n        the 'images' subdirectory of the 'resources' package,\n        following the search rules defined by your CLASSPATH and\n        return an InputStream if found; null if it cannot load the resource.\n@return the URL","static":true,"name":"getResource","comment":"Finds a resource with a given name. This method returns null if no\n resource with this name is found. The rules for searching resources\n associated with a given class are implemented by the defining class\n loader of the class.","params":[{"type_long":"java.lang.String","name":"filename","comment":"\"partially\" qualified resource filename to get, e.g.,\n        \"images\/go-home.png\" would look for the file named 'home.gif' in\n        the 'images' subdirectory of the 'resources' package,\n        following the search rules defined by your CLASSPATH and\n        return an InputStream if found; null if it cannot load the resource.","type_short":"String"}],"throws":[],"return":{"type_long":"java.net.URL","comment":"the URL","type_short":"URL"}},{"javadoc":"Finds a resource with a given name. This method returns null if no resource\n with this name is found. The rules for searching resources associated with a\n given class are implemented by the defining class loader of the class.\n@param filename \"partially\" qualified resource filename to get, e.g., \"images\/home.gif\" \n        would look for the file named 'home.gif' in the 'images' subdirectory of \n        the 'resources' package, following the search rules defined by your \n        CLASSPATH and return an InputStream if found; null if it cannot load the resource.\n@return the input stream","static":true,"name":"getResourceAsStream","comment":"Finds a resource with a given name. This method returns null if no resource\n with this name is found. The rules for searching resources associated with a\n given class are implemented by the defining class loader of the class.","params":[{"type_long":"java.lang.String","name":"filename","comment":"\"partially\" qualified resource filename to get, e.g., \"images\/home.gif\" \n        would look for the file named 'home.gif' in the 'images' subdirectory of \n        the 'resources' package, following the search rules defined by your \n        CLASSPATH and return an InputStream if found; null if it cannot load the resource.","type_short":"String"}],"throws":[],"return":{"type_long":"java.io.InputStream","comment":"the input stream","type_short":"InputStream"}},{"javadoc":"Locates a File resource by the given name\n@param filename the filename\n@return the File for the given resource; null if there is no such file","static":true,"name":"getResourceFile","comment":"Locates a File resource by the given name","params":[{"type_long":"java.lang.String","name":"filename","comment":"the filename","type_short":"String"}],"throws":[],"return":{"type_long":"java.io.File","comment":"the File for the given resource; null if there is no such file","type_short":"File"}},{"javadoc":"Search the classpath for files in the &lt;classpath entry&gt;\/<tt>dirName<\/tt> \n location that have the given extension.  In <tt>null<\/tt> is passed for the \n extension, then all files found in the given dir names will be returned.  In this \n way, <tt>null<\/tt> is a wildcard.\n\n <P>This method differs from {@link #getResource(String)} in that this method finds \n multiple matches.\n@param dirName the name of the sub-directory under which to search\n@param extension the extension that matching files must possess\n@return set of URLs in the given directory that end with the given extension","static":true,"name":"getResources","comment":"Search the classpath for files in the classpath entry\/dirName \n location that have the given extension.  In null is passed for the \n extension, then all files found in the given dir names will be returned.  In this \n way, null is a wildcard.\n\n This method differs from #getResource(String) in that this method finds \n multiple matches.","params":[{"type_long":"java.lang.String","name":"dirName","comment":"the name of the sub-directory under which to search","type_short":"String"},{"type_long":"java.lang.String","name":"extension","comment":"the extension that matching files must possess","type_short":"String"}],"throws":[],"return":{"type_long":"java.util.Set<java.net.URL>","comment":"set of URLs in the given directory that end with the given extension","type_short":"Set"}},{"javadoc":"Search the classpath for files in the &lt;classpath entry&gt;\/<tt>dirName<\/tt> \n location that have the given extension.  In <tt>null<\/tt> is passed for the \n extension, then all files found in the given dir names will be returned.  In this \n way, <tt>null<\/tt> is a wildcard.\n\n <P>The names returned from this method are relative and are meant to be used in a \n later callback to this class for methods such as {@link #loadImage(String)} or\n {@link #getResource(String)}.\n@param dirName the name of the directory under which to search\n@param extension the extension that matching files must possess\n@return set of filenames in the given directory that end with the given extension","static":true,"name":"getResourceNames","comment":"Search the classpath for files in the classpath entry\/dirName \n location that have the given extension.  In null is passed for the \n extension, then all files found in the given dir names will be returned.  In this \n way, null is a wildcard.\n\n The names returned from this method are relative and are meant to be used in a \n later callback to this class for methods such as #loadImage(String) or\n #getResource(String).","params":[{"type_long":"java.lang.String","name":"dirName","comment":"the name of the directory under which to search","type_short":"String"},{"type_long":"java.lang.String","name":"extension","comment":"the extension that matching files must possess","type_short":"String"}],"throws":[],"return":{"type_long":"java.util.Set<java.lang.String>","comment":"set of filenames in the given directory that end with the given extension","type_short":"Set"}},{"javadoc":"Creates a scaled ImageIcon from the given icon.\n@param icon the icon to scale\n@param width the width of the new icon\n@param height the height of the new icon\n@param hints scaling hints (see {@link BufferedImage#getScaledInstance(int, int, int)}\n@return A new, scaled ImageIcon","static":true,"name":"getScaledIcon","comment":"Creates a scaled ImageIcon from the given icon.","params":[{"type_long":"javax.swing.Icon","name":"icon","comment":"the icon to scale","type_short":"Icon"},{"type_long":"int","name":"width","comment":"the width of the new icon","type_short":"int"},{"type_long":"int","name":"height","comment":"the height of the new icon","type_short":"int"},{"type_long":"int","name":"hints","comment":"scaling hints (see BufferedImage#getScaledInstance(int, int, int)","type_short":"int"}],"throws":[],"return":{"type_long":"javax.swing.ImageIcon","comment":"A new, scaled ImageIcon","type_short":"ImageIcon"}},{"javadoc":"Creates a scaled ImageIcon from the given icon with scaling of \n {@link Image#SCALE_AREA_AVERAGING}\n@param icon the icon to scale\n@param width the width of the new icon\n@param height the height of the new icon\n@return A new, scaled ImageIcon","static":true,"name":"getScaledIcon","comment":"Creates a scaled ImageIcon from the given icon with scaling of \n Image#SCALE_AREA_AVERAGING","params":[{"type_long":"javax.swing.Icon","name":"icon","comment":"the icon to scale","type_short":"Icon"},{"type_long":"int","name":"width","comment":"the width of the new icon","type_short":"int"},{"type_long":"int","name":"height","comment":"the height of the new icon","type_short":"int"}],"throws":[],"return":{"type_long":"javax.swing.ImageIcon","comment":"A new, scaled ImageIcon","type_short":"ImageIcon"}},{"javadoc":"This is really a package-level method.  From outside of this package you should instead\n be calling {@link ResourceManager#getScaledIcon(Icon, int, int)}.\n@param icon the icon to scale\n@param width the new width\n@param height the new height\n@return the new icon","static":true,"name":"createScaledIcon","comment":"This is really a package-level method.  From outside of this package you should instead\n be calling ResourceManager#getScaledIcon(Icon, int, int).","params":[{"type_long":"javax.swing.Icon","name":"icon","comment":"the icon to scale","type_short":"Icon"},{"type_long":"int","name":"width","comment":"the new width","type_short":"int"},{"type_long":"int","name":"height","comment":"the new height","type_short":"int"}],"throws":[],"return":{"type_long":"javax.swing.ImageIcon","comment":"the new icon","type_short":"ImageIcon"}},{"javadoc":"Creates a scaled image based upon the given image.\n@param image the image to scale\n@param width the new width\n@param height the new height\n@param hints {@link RenderingHints} used by {@link Graphics2D}\n@return a scaled version of the given image","static":true,"name":"createScaledImage","comment":"Creates a scaled image based upon the given image.","params":[{"type_long":"java.awt.Image","name":"image","comment":"the image to scale","type_short":"Image"},{"type_long":"int","name":"width","comment":"the new width","type_short":"int"},{"type_long":"int","name":"height","comment":"the new height","type_short":"int"},{"type_long":"int","name":"hints","comment":"RenderingHints used by Graphics2D","type_short":"int"}],"throws":[],"return":{"type_long":"java.awt.Image","comment":"a scaled version of the given image","type_short":"Image"}},{"javadoc":"This is really a package-level method.  From outside of this package you should instead\n be calling {@link ResourceManager#getScaledIcon(Icon, int, int, int)}.\n@param icon the icon to scale\n@param width the new width\n@param height the new height\n@param hints any hints to apply to the scaling operation\n@return the new icon","static":true,"name":"createScaledIcon","comment":"This is really a package-level method.  From outside of this package you should instead\n be calling ResourceManager#getScaledIcon(Icon, int, int, int).","params":[{"type_long":"javax.swing.Icon","name":"icon","comment":"the icon to scale","type_short":"Icon"},{"type_long":"int","name":"width","comment":"the new width","type_short":"int"},{"type_long":"int","name":"height","comment":"the new height","type_short":"int"},{"type_long":"int","name":"hints","comment":"any hints to apply to the scaling operation","type_short":"int"}],"throws":[],"return":{"type_long":"javax.swing.ImageIcon","comment":"the new icon","type_short":"ImageIcon"}},{"javadoc":"Get the disabled rendering of the given icon.\n@param icon The icon to disable.\n@return disabled icon","static":true,"name":"getDisabledIcon","comment":"Get the disabled rendering of the given icon.","params":[{"type_long":"javax.swing.Icon","name":"icon","comment":"The icon to disable.","type_short":"Icon"}],"throws":[],"return":{"type_long":"javax.swing.Icon","comment":"disabled icon","type_short":"Icon"}},{"javadoc":"Get the disabled rendering of the given imageIcon.\n@param icon The icon to disable.\n@return disabled icon","static":true,"name":"getDisabledIcon","comment":"Get the disabled rendering of the given imageIcon.","params":[{"type_long":"javax.swing.ImageIcon","name":"icon","comment":"The icon to disable.","type_short":"ImageIcon"}],"throws":[],"return":{"type_long":"javax.swing.Icon","comment":"disabled icon","type_short":"Icon"}},{"javadoc":"Returns a disabled icon while allowing the caller to control the brightness of the icon\n returned\n@param icon The icon to disable.\n@param brightnessPercent The level of brightness (0-100, where 100 is the brightest).\n@return a disabled version of the original icon.","static":true,"name":"getDisabledIcon","comment":"Returns a disabled icon while allowing the caller to control the brightness of the icon\n returned","params":[{"type_long":"javax.swing.ImageIcon","name":"icon","comment":"The icon to disable.","type_short":"ImageIcon"},{"type_long":"int","name":"brightnessPercent","comment":"The level of brightness (0-100, where 100 is the brightest).","type_short":"int"}],"throws":[],"return":{"type_long":"javax.swing.Icon","comment":"a disabled version of the original icon.","type_short":"Icon"}},{"javadoc":"Algorithm for filtering an image to make it appear disabled\n \n <P>Note: you should use one of the {@link #getDisabledIcon(Icon)} methods, as this is \n          an internal API method.\n@param icon the icon\n@param brightnessPercent the percentage of brightness, 0-100, with 100 being the \n        brightest possible value\n@return the new icon\n@see #getDisabledIcon(Icon)","static":true,"name":"createDisabledIcon","comment":"Algorithm for filtering an image to make it appear disabled\n \n Note: you should use one of the #getDisabledIcon(Icon) methods, as this is \n          an internal API method.","params":[{"type_long":"javax.swing.Icon","name":"icon","comment":"the icon","type_short":"Icon"},{"type_long":"int","name":"brightnessPercent","comment":"the percentage of brightness, 0-100, with 100 being the \n        brightest possible value","type_short":"int"}],"throws":[],"return":{"type_long":"javax.swing.ImageIcon","comment":"the new icon","type_short":"ImageIcon"}},{"javadoc":"Creates an image icon from the given image.  This method will create an <tt>ImageIcon<\/tt>\n the <a href=\"safe\">\"safe\"<\/a> way by avoiding the constructor \n {@link ImageIcon#ImageIcon(Image)}, which can\n trigger problems with Java's {@link MediaTracker}.\n@param imageName A textual description of the image; may be null\n@param image The image to use for creating an ImageIcon.\n@return the new icon","static":true,"name":"getImageIconFromImage","comment":"Creates an image icon from the given image.  This method will create an ImageIcon\n the \"safe\" way by avoiding the constructor \n ImageIcon#ImageIcon(Image), which can\n trigger problems with Java's MediaTracker.","params":[{"type_long":"java.lang.String","name":"imageName","comment":"A textual description of the image; may be null","type_short":"String"},{"type_long":"java.awt.Image","name":"image","comment":"The image to use for creating an ImageIcon.","type_short":"Image"}],"throws":[],"return":{"type_long":"javax.swing.ImageIcon","comment":"the new icon","type_short":"ImageIcon"}},{"javadoc":"Returns an {@link ImageIcon} for the given icon.  If the value is already an ImageIcon, then\n that object is returned; otherwise, an ImageIcon will be created the <a href=\"#safe\">safe<\/a>\n way.\n@param icon The icon to convert\n@return the new icon","static":true,"name":"getImageIcon","comment":"Returns an ImageIcon for the given icon.  If the value is already an ImageIcon, then\n that object is returned; otherwise, an ImageIcon will be created the safe\n way.","params":[{"type_long":"javax.swing.Icon","name":"icon","comment":"The icon to convert","type_short":"Icon"}],"throws":[],"return":{"type_long":"javax.swing.ImageIcon","comment":"the new icon","type_short":"ImageIcon"}},{"javadoc":"Get the name of this icon. If icon is an ImageIcon, its getDescription() is called to \n get the name\n@param icon the icon for which the name is desired\n@return the name","static":true,"name":"getIconName","comment":"Get the name of this icon. If icon is an ImageIcon, its getDescription() is called to \n get the name","params":[{"type_long":"javax.swing.Icon","name":"icon","comment":"the icon for which the name is desired","type_short":"Icon"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"the name","type_short":"String"}},{"javadoc":"Load the image using the specified bytes. The image icon will\n be cached using the image name. The bytes must have been\n read from an image file containing a supported image format,\n such as GIF, JPEG, or (as of 1.3) PNG.\n@param imageName the name of the image\n@param imageBytes the bytes of the image\n@return the image icon stored in the bytes","static":true,"name":"loadImage","comment":"Load the image using the specified bytes. The image icon will\n be cached using the image name. The bytes must have been\n read from an image file containing a supported image format,\n such as GIF, JPEG, or (as of 1.3) PNG.","params":[{"type_long":"java.lang.String","name":"imageName","comment":"the name of the image","type_short":"String"},{"type_long":"byte[]","name":"imageBytes","comment":"the bytes of the image","type_short":"byte[]"}],"throws":[],"return":{"type_long":"javax.swing.ImageIcon","comment":"the image icon stored in the bytes","type_short":"ImageIcon"}},{"javadoc":"Load the image specified by filename; returns null if problems occur trying to load the file\n@param filename name of file to load, e.g., \"images\/home.gif\"\n@return the image icon stored in the bytes","static":true,"name":"loadImage","comment":"Load the image specified by filename; returns null if problems occur trying to load the file","params":[{"type_long":"java.lang.String","name":"filename","comment":"name of file to load, e.g., \"images\/home.gif\"","type_short":"String"}],"throws":[],"return":{"type_long":"javax.swing.ImageIcon","comment":"the image icon stored in the bytes","type_short":"ImageIcon"}},{"javadoc":"A convenience method to force the image denoted by <code>filename<\/code> to be read \n from disk and to not use the cached version\n@param filename name of file to load, e.g., \"images\/home.gif\"\n@return the image icon stored in the bytes\n@see #loadImage(String)","static":true,"name":"reloadImage","comment":"A convenience method to force the image denoted by filename to be read \n from disk and to not use the cached version","params":[{"type_long":"java.lang.String","name":"filename","comment":"name of file to load, e.g., \"images\/home.gif\"","type_short":"String"}],"throws":[],"return":{"type_long":"javax.swing.ImageIcon","comment":"the image icon stored in the bytes","type_short":"ImageIcon"}},{"javadoc":"","static":true,"name":"getDefaultIcon","comment":"","params":[],"throws":[],"return":{"type_long":"javax.swing.ImageIcon","comment":"","type_short":"ImageIcon"}},{"javadoc":"","static":true,"name":"getToolImages","comment":"","params":[],"throws":[],"return":{"type_long":"java.util.Set<java.lang.String>","comment":"","type_short":"Set"}}],"name":"ResourceManager","comment":"General resource management class that provides a convenient\n way of accessing external resources used in Ghidra.\n \n \n There is a known problem with Java's MediaTracker that can cause deadlocks.  The various\n methods of this class that create ImageIcons will do so by loading image bytes directly,\n as opposed to using the flawed constructor ImageIcon#ImageIcon(Image).","fields":[]}
