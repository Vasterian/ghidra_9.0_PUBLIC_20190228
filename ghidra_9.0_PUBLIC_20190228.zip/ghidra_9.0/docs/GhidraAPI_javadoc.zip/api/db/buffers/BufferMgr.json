{"implements":[],"javadoc":"<code>BufferMgr<\/code> provides low-level buffer management and caching.\n Checkpointing and buffer versioning is supported along with an undo\/redo\n capability.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"Construct a new buffer manager with no underlying source file using the\n default buffer size, cache size and maximum undo count.\n@throws IOException if a cache file access error occurs","static":false,"name":"<init>","comment":"Construct a new buffer manager with no underlying source file using the\n default buffer size, cache size and maximum undo count.","params":[],"throws":[{"type_long":"java.io.IOException","comment":"if a cache file access error occurs","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Construct a new buffer manager with no underlying source file.\n@param requestedBufferSize requested buffer size.  Actual buffer size may\n vary.\n@param approxCacheSize approximate size of cache in Bytes.\n@param maxUndos maximum number of checkpoints retained for undo (Minimum=1).\n@throws IOException if a cache file access error occurs","static":false,"name":"<init>","comment":"Construct a new buffer manager with no underlying source file.","params":[{"type_long":"int","name":"requestedBufferSize","comment":"requested buffer size.  Actual buffer size may\n vary.","type_short":"int"},{"type_long":"long","name":"approxCacheSize","comment":"approximate size of cache in Bytes.","type_short":"long"},{"type_long":"int","name":"maxUndos","comment":"maximum number of checkpoints retained for undo (Minimum=1).","type_short":"int"}],"throws":[{"type_long":"java.io.IOException","comment":"if a cache file access error occurs","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Construct a buffer manager for a given source file using default\n cache size and maximum undo count.\n@param sourceFile buffer file\n@throws IOException if source or cache file access error occurs","static":false,"name":"<init>","comment":"Construct a buffer manager for a given source file using default\n cache size and maximum undo count.","params":[{"type_long":"db.buffers.BufferFile","name":"sourceFile","comment":"buffer file","type_short":"BufferFile"}],"throws":[{"type_long":"java.io.FileNotFoundException","comment":"","type_short":"FileNotFoundException"},{"type_long":"java.io.IOException","comment":"if source or cache file access error occurs","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Construct a buffer manager for a given source file using default\n cache size and maximum undo count.\n@param sourceFile buffer file\n@param approxCacheSize approximate size of cache in Bytes.\n@param maxUndos maximum number of checkpoints retained for undo (Minimum=1).\n@throws IOException if source or cache file access error occurs","static":false,"name":"<init>","comment":"Construct a buffer manager for a given source file using default\n cache size and maximum undo count.","params":[{"type_long":"db.buffers.BufferFile","name":"sourceFile","comment":"buffer file","type_short":"BufferFile"},{"type_long":"long","name":"approxCacheSize","comment":"approximate size of cache in Bytes.","type_short":"long"},{"type_long":"int","name":"maxUndos","comment":"maximum number of checkpoints retained for undo (Minimum=1).","type_short":"int"}],"throws":[{"type_long":"java.io.FileNotFoundException","comment":"","type_short":"FileNotFoundException"},{"type_long":"java.io.IOException","comment":"if source or cache file access error occurs","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Enable and start source buffer file pre-cache if appropriate.\n This may be forced for all use cases by setting the System property \n db.always.precache=true\n WARNING! EXPERIMENTAL !!!","static":false,"name":"enablePreCache","comment":"Enable and start source buffer file pre-cache if appropriate.\n This may be forced for all use cases by setting the System property \n db.always.precache=true\n WARNING! EXPERIMENTAL !!!","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Set the corrupt state flag for this buffer manager.  This will cause any snapshot\n attempt to fail and cause most public access methods to throw an IOException.\n The caller should log this action and the reason for it.","static":false,"name":"setCorruptedState","comment":"Set the corrupt state flag for this buffer manager.  This will cause any snapshot\n attempt to fail and cause most public access methods to throw an IOException.\n The caller should log this action and the reason for it.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Determine if BufferMgr has become corrupted (IOException has occurred).\n@return true if this BufferMgr is corrupt.","static":false,"name":"isCorrupted","comment":"Determine if BufferMgr has become corrupted (IOException has occurred).","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if this BufferMgr is corrupt.","type_short":"boolean"}},{"javadoc":"Get the current number of locked buffers.\n@return int","static":false,"name":"getLockCount","comment":"Get the current number of locked buffers.","params":[],"throws":[],"return":{"type_long":"int","comment":"int","type_short":"int"}},{"javadoc":"@return the size of each buffer in bytes.","static":false,"name":"getBufferSize","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"the size of each buffer in bytes.","type_short":"int"}},{"javadoc":"@return returns the source file","static":false,"name":"getSourceFile","comment":"","params":[],"throws":[],"return":{"type_long":"db.buffers.BufferFile","comment":"returns the source file","type_short":"BufferFile"}},{"javadoc":"Dispose of all buffer manager resources including any source\n buffer file.  Any existing recovery data will be discarded.\n This method should be called when this buffer manager instance\n is no longer needed.","static":false,"name":"dispose","comment":"Dispose of all buffer manager resources including any source\n buffer file.  Any existing recovery data will be discarded.\n This method should be called when this buffer manager instance\n is no longer needed.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Dispose of all buffer manager resources including any source\n buffer file.\n This method should be called when this buffer manager instance\n is no longer needed.\n@param keepRecoveryData","static":false,"name":"dispose","comment":"Dispose of all buffer manager resources including any source\n buffer file.\n This method should be called when this buffer manager instance\n is no longer needed.","params":[{"type_long":"boolean","name":"keepRecoveryData","comment":"","type_short":"boolean"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Set the maximum number of undoable checkpoints maintained by buffer manager.\n Existing redo checkpoints are cleared and the stack of undo checkpoints\n will be reduced if maxUndos is less than the current setting.\n@param maxUndos maximum number of undo checkpoints.  A negative\n value restores the default value.","static":false,"name":"setMaxUndos","comment":"Set the maximum number of undoable checkpoints maintained by buffer manager.\n Existing redo checkpoints are cleared and the stack of undo checkpoints\n will be reduced if maxUndos is less than the current setting.","params":[{"type_long":"int","name":"maxUndos","comment":"maximum number of undo checkpoints.  A negative\n value restores the default value.","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Clear all checkpoints and re-baseline buffers","static":false,"name":"clearCheckpoints","comment":"Clear all checkpoints and re-baseline buffers","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Get the maximum number of checkpoints retained.\n@return int","static":false,"name":"getMaxUndos","comment":"Get the maximum number of checkpoints retained.","params":[],"throws":[],"return":{"type_long":"int","comment":"int","type_short":"int"}},{"javadoc":"Get the specified buffer.\n When done working with the buffer, the method releaseBuffer\n must be used to return it to the buffer manager.  Buffers\n should not be held for long periods.\n@param id buffer id\n@return buffer object, or null if buffer not found\n@throws IOException if source or cache file access error occurs","static":false,"name":"getBuffer","comment":"Get the specified buffer.\n When done working with the buffer, the method releaseBuffer\n must be used to return it to the buffer manager.  Buffers\n should not be held for long periods.","params":[{"type_long":"int","name":"id","comment":"buffer id","type_short":"int"}],"throws":[{"type_long":"java.io.IOException","comment":"if source or cache file access error occurs","type_short":"IOException"}],"return":{"type_long":"db.buffers.DataBuffer","comment":"buffer object, or null if buffer not found","type_short":"DataBuffer"}},{"javadoc":"Get a new or recycled buffer.\n New buffer is always returned with update enabled.\n When done working with the buffer, the method releaseBuffer\n must be used to return it to the buffer manager.  Buffers\n should not be held for long periods.\n@return buffer object, or null if buffer not found\n@throws IOException if a cache file access error occurs","static":false,"name":"createBuffer","comment":"Get a new or recycled buffer.\n New buffer is always returned with update enabled.\n When done working with the buffer, the method releaseBuffer\n must be used to return it to the buffer manager.  Buffers\n should not be held for long periods.","params":[],"throws":[{"type_long":"java.io.IOException","comment":"if a cache file access error occurs","type_short":"IOException"}],"return":{"type_long":"db.buffers.DataBuffer","comment":"buffer object, or null if buffer not found","type_short":"DataBuffer"}},{"javadoc":"Return buffer.\n After invoking this method, the buffer object should not\n be used and all references should be dropped.","static":false,"name":"releaseBuffer","comment":"Return buffer.\n After invoking this method, the buffer object should not\n be used and all references should be dropped.","params":[{"type_long":"db.buffers.DataBuffer","name":"buf","comment":"","type_short":"DataBuffer"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Delete buffer.\n DataBuffer is added to the free list for reuse.\n@param id buffer id\n@throws IOException if source or cache file access error occurs","static":false,"name":"deleteBuffer","comment":"Delete buffer.\n DataBuffer is added to the free list for reuse.","params":[{"type_long":"int","name":"id","comment":"buffer id","type_short":"int"}],"throws":[{"type_long":"java.io.IOException","comment":"if source or cache file access error occurs","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"@return true if no buffers have been updated since last checkpoint.","static":false,"name":"atCheckpoint","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if no buffers have been updated since last checkpoint.","type_short":"boolean"}},{"javadoc":"Completes a transaction by closing the current checkpoint.  All\n modified buffers since the previous invocation of this method\n will be contained within \"transaction\".\n The redo stack will be cleared.\n@return true if checkpoint successful, or false if buffers are read-only","static":false,"name":"checkpoint","comment":"Completes a transaction by closing the current checkpoint.  All\n modified buffers since the previous invocation of this method\n will be contained within \"transaction\".\n The redo stack will be cleared.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if checkpoint successful, or false if buffers are read-only","type_short":"boolean"}},{"javadoc":"Returns true if unsaved \"buffer\" changes exist.\n If no changes have been made, or all changes have been\n \"undone\", false will be returned.  Parameter changes\n are no considered.","static":false,"name":"isChanged","comment":"Returns true if unsaved \"buffer\" changes exist.\n If no changes have been made, or all changes have been\n \"undone\", false will be returned.  Parameter changes\n are no considered.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Indicates whether checkpoint versions are available for undo.\n@return true if undo is available","static":false,"name":"hasUndoCheckpoints","comment":"Indicates whether checkpoint versions are available for undo.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if undo is available","type_short":"boolean"}},{"javadoc":"Indicates whether checkpoint versions are available for redo.\n@return true if redo is available","static":false,"name":"hasRedoCheckpoints","comment":"Indicates whether checkpoint versions are available for redo.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if redo is available","type_short":"boolean"}},{"javadoc":"Returns number of undo-able transactions","static":false,"name":"getAvailableUndoCount","comment":"Returns number of undo-able transactions","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"Returns the number of redo-able transactions","static":false,"name":"getAvailableRedoCount","comment":"Returns the number of redo-able transactions","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"Backup to previous checkpoint.","static":false,"name":"undo","comment":"Backup to previous checkpoint.","params":[{"type_long":"boolean","name":"redoable","comment":"","type_short":"boolean"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Redo next checkpoint.","static":false,"name":"redo","comment":"Redo next checkpoint.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Returns true if save operation can be performed.","static":false,"name":"canSave","comment":"Returns true if save operation can be performed.","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Returns true if buffers have been modified since opening or since\n last snapshot.","static":false,"name":"modifiedSinceSnapshot","comment":"Returns true if buffers have been modified since opening or since\n last snapshot.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Generate recovery snapshot of unsaved data.\n@param changeSet an optional database-backed change set which reflects changes\n made since the last version.\n@param monitor task monitor\n@returns true if snapshot successful, false if","static":false,"name":"takeRecoverySnapshot","comment":"Generate recovery snapshot of unsaved data.","params":[{"type_long":"db.DBChangeSet","name":"changeSet","comment":"an optional database-backed change set which reflects changes\n made since the last version.","type_short":"DBChangeSet"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"task monitor","type_short":"TaskMonitor"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"},{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Returns the recovery changeSet data file for reading or null if one is not available.\n The caller must dispose of the returned file before peforming generating any new\n recovery snapshots.\n@throws IOException","static":false,"name":"getRecoveryChangeSetFile","comment":"Returns the recovery changeSet data file for reading or null if one is not available.\n The caller must dispose of the returned file before peforming generating any new\n recovery snapshots.","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"db.buffers.LocalBufferFile","comment":"","type_short":"LocalBufferFile"}},{"javadoc":"Immediately following instantiation of this BufferMgr, discard any pre-existing\n recovery snapshots.","static":false,"name":"clearRecoveryFiles","comment":"Immediately following instantiation of this BufferMgr, discard any pre-existing\n recovery snapshots.","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Immediately following instatiation of this BufferMgr, attempt a unsaved data recovery.\n If successful, the method getRecoveryChangeSetFile should be invoked to obtain\/open the\n changeSet data file which must be used by the application to recover the changeSet.\n If recovery is cancelled, this buffer manager must be disposed.\n since the underlying state will be corrupt.\n@param monitor task monitor","static":false,"name":"recover","comment":"Immediately following instatiation of this BufferMgr, attempt a unsaved data recovery.\n If successful, the method getRecoveryChangeSetFile should be invoked to obtain\/open the\n changeSet data file which must be used by the application to recover the changeSet.\n If recovery is cancelled, this buffer manager must be disposed.\n since the underlying state will be corrupt.","params":[{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"task monitor","type_short":"TaskMonitor"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"},{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Determine if unsaved changes can be recovered for the current BufferFile\n associated with the specified bfMgr.\n@param bfMgr buffer file manager\n@return true if a recover is possible","static":true,"name":"canRecover","comment":"Determine if unsaved changes can be recovered for the current BufferFile\n associated with the specified bfMgr.","params":[{"type_long":"db.buffers.BufferFileManager","name":"bfMgr","comment":"buffer file manager","type_short":"BufferFileManager"}],"throws":[],"return":{"type_long":"boolean","comment":"true if a recover is possible","type_short":"boolean"}},{"javadoc":"Save the current set of buffers to a new version of the source buffer file.\n If the buffer manager was not instantiated with a source file an\n IllegalStateException will be thrown.\n@param comment if version history is maintained, this comment will be\n associated with the new version.\n@param changeSet an optional database-backed change set which reflects changes\n made since the last version.\n@param monitor a cancellable task monitor.  This method will establish the\n maximum progress count.\n@throws CancelledException if the task monitor cancelled the operation.\n@throws IOException if source, cache or destination file access error occurs","static":false,"name":"save","comment":"Save the current set of buffers to a new version of the source buffer file.\n If the buffer manager was not instantiated with a source file an\n IllegalStateException will be thrown.","params":[{"type_long":"java.lang.String","name":"comment","comment":"if version history is maintained, this comment will be\n associated with the new version.","type_short":"String"},{"type_long":"db.DBChangeSet","name":"changeSet","comment":"an optional database-backed change set which reflects changes\n made since the last version.","type_short":"DBChangeSet"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"a cancellable task monitor.  This method will establish the\n maximum progress count.","type_short":"TaskMonitor"}],"throws":[{"type_long":"java.io.IOException","comment":"if source, cache or destination file access error occurs","type_short":"IOException"},{"type_long":"ghidra.util.exception.CancelledException","comment":"if the task monitor cancelled the operation.","type_short":"CancelledException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Save the current set of buffers to a new buffer file.\n@param outFile an empty buffer file open for writing\n@param associateWithNewFile if true the outFile will be associated with this BufferMgr as the\n current source file, if false no change will be made to this BufferMgr's state and the outFile\n will be written and set as read-only.  The caller is responsible for disposing the outFile if\n this parameter is false.\n@param monitor a cancelable task monitor.  This method will establish the\n maximum progress count.\n@throws CancelledException if the task monitor canceled the operation.\n@throws IOException if source, cache or destination file access error occurs","static":false,"name":"saveAs","comment":"Save the current set of buffers to a new buffer file.","params":[{"type_long":"db.buffers.BufferFile","name":"outFile","comment":"an empty buffer file open for writing","type_short":"BufferFile"},{"type_long":"boolean","name":"associateWithNewFile","comment":"if true the outFile will be associated with this BufferMgr as the\n current source file, if false no change will be made to this BufferMgr's state and the outFile\n will be written and set as read-only.  The caller is responsible for disposing the outFile if\n this parameter is false.","type_short":"boolean"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"a cancelable task monitor.  This method will establish the\n maximum progress count.","type_short":"TaskMonitor"}],"throws":[{"type_long":"java.io.IOException","comment":"if source, cache or destination file access error occurs","type_short":"IOException"},{"type_long":"ghidra.util.exception.CancelledException","comment":"if the task monitor canceled the operation.","type_short":"CancelledException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getCacheHits","comment":"","params":[],"throws":[],"return":{"type_long":"long","comment":"","type_short":"long"}},{"javadoc":"","static":false,"name":"getCacheMisses","comment":"","params":[],"throws":[],"return":{"type_long":"long","comment":"","type_short":"long"}},{"javadoc":"","static":false,"name":"getLowBufferCount","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"resetCacheStatistics","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getStatusInfo","comment":"","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"","static":false,"name":"getAllocatedBufferCount","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"getFreeBufferCount","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":true,"name":"cleanupOldCacheFiles","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"BufferMgr","comment":"BufferMgr provides low-level buffer management and caching.\n Checkpointing and buffer versioning is supported along with an undo\/redo\n capability.","fields":[{"type_long":"java.lang.String","javadoc":"","static":true,"name":"ALWAYS_PRECACHE_PROPERTY","comment":"","type_short":"String","constant_value":"\"db.always.precache\""},{"type_long":"int","javadoc":"","static":true,"name":"DEFAULT_BUFFER_SIZE","comment":"","type_short":"int","constant_value":"16384"},{"type_long":"int","javadoc":"","static":true,"name":"DEFAULT_CHECKPOINT_COUNT","comment":"","type_short":"int","constant_value":"10"},{"type_long":"int","javadoc":"","static":true,"name":"DEFAULT_CACHE_SIZE","comment":"","type_short":"int","constant_value":"4194304"}]}
