{"implements":["db.buffers.ManagedBufferFile"],"javadoc":"<code>LocalManagedBufferFile<\/code> implements a BufferFile as block-oriented\n random-access file which utilizes a <code>BufferFileManager<\/code> to \n identify and facilitate versioning of buffer files.  This type of\n buffer file supports both save-as and save operations.  The file\n format used is identical to a LocalBufferFile, although additional\n support is provided for associated files which facilitate versioning\n (e.g., ChangeMapFile, VersionFile, and changed data files).","static":false,"extends":"db.buffers.LocalBufferFile","methods":[{"javadoc":"Open the initial version of a block file for writing.\n@param bufferSize user buffer size\n@param bfManager buffer file version manager\n@param checkinId the checkinId for creating a versioned buffer file.\n@throws IOException if an IO error occurs or the incorrect magicNumber\n was read from the file.","static":false,"name":"<init>","comment":"Open the initial version of a block file for writing.","params":[{"type_long":"int","name":"bufferSize","comment":"user buffer size","type_short":"int"},{"type_long":"db.buffers.BufferFileManager","name":"bfManager","comment":"buffer file version manager","type_short":"BufferFileManager"},{"type_long":"long","name":"checkinId","comment":"the checkinId for creating a versioned buffer file.","type_short":"long"}],"throws":[{"type_long":"java.io.IOException","comment":"if an IO error occurs or the incorrect magicNumber\n was read from the file.","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Open the current version of an existing block file as read-only.\n@param bfManager buffer file version manager\n@param versionUpdateEnabled if true Save support is enabled (pre-save starts automatically).\n@param minChangeDataVer indicates the oldest change data buffer file to be\n included.  A -1 indicates only the last change data buffer file is applicable.\n@param checkinId the checkinId for versioned buffer files which are opened for update.\n@throws IOException if an IO error occurs or the incorrect magicNumber\n was read from the file.","static":false,"name":"<init>","comment":"Open the current version of an existing block file as read-only.","params":[{"type_long":"db.buffers.BufferFileManager","name":"bfManager","comment":"buffer file version manager","type_short":"BufferFileManager"},{"type_long":"boolean","name":"versionUpdateEnabled","comment":"if true Save support is enabled (pre-save starts automatically).","type_short":"boolean"},{"type_long":"int","name":"minChangeDataVer","comment":"indicates the oldest change data buffer file to be\n included.  A -1 indicates only the last change data buffer file is applicable.","type_short":"int"},{"type_long":"long","name":"checkinId","comment":"the checkinId for versioned buffer files which are opened for update.","type_short":"long"}],"throws":[{"type_long":"java.io.IOException","comment":"if an IO error occurs or the incorrect magicNumber\n was read from the file.","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Open an older version of an existing buffer file as read-only and NOT UPDATEABLE (bfMgr remains null).\n Version files must exist for all versions starting with the requested version.\n These version files will be used in conjunction with the current buffer file\n to emulate an older version buffer file.\n@param bfManager buffer file version manager\n@param version version of file to be opened\n@param minChangeDataVer indicates the oldest change data buffer file to be\n included.  A -1 indicates only the last change data buffer file is applicable.\n@throws IOException if an IO error occurs or a problem with the version\n reconstruction.","static":false,"name":"<init>","comment":"Open an older version of an existing buffer file as read-only and NOT UPDATEABLE (bfMgr remains null).\n Version files must exist for all versions starting with the requested version.\n These version files will be used in conjunction with the current buffer file\n to emulate an older version buffer file.","params":[{"type_long":"db.buffers.BufferFileManager","name":"bfManager","comment":"buffer file version manager","type_short":"BufferFileManager"},{"type_long":"int","name":"version","comment":"version of file to be opened","type_short":"int"},{"type_long":"int","name":"minChangeDataVer","comment":"indicates the oldest change data buffer file to be\n included.  A -1 indicates only the last change data buffer file is applicable.","type_short":"int"}],"throws":[{"type_long":"java.io.IOException","comment":"if an IO error occurs or a problem with the version\n reconstruction.","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getNextChangeDataFile","comment":"","params":[{"type_long":"boolean","name":"getFirst","comment":"","type_short":"boolean"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"db.buffers.BufferFile","comment":"","type_short":"BufferFile"}},{"javadoc":"","static":false,"name":"getCheckinID","comment":"","params":[],"throws":[],"return":{"type_long":"long","comment":"","type_short":"long"}},{"javadoc":"","static":false,"name":"setVersionComment","comment":"","params":[{"type_long":"java.lang.String","name":"comment","comment":"","type_short":"String"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"get","comment":"","params":[{"type_long":"db.buffers.DataBuffer","name":"buf","comment":"","type_short":"DataBuffer"},{"type_long":"int","name":"index","comment":"","type_short":"int"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"db.buffers.DataBuffer","comment":"","type_short":"DataBuffer"}},{"javadoc":"","static":false,"name":"put","comment":"","params":[{"type_long":"db.buffers.DataBuffer","name":"buf","comment":"","type_short":"DataBuffer"},{"type_long":"int","name":"index","comment":"","type_short":"int"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"setReadOnly","comment":"","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"close","comment":"","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"delete","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"getForwardModMapData","comment":"","params":[{"type_long":"int","name":"oldVersion","comment":"","type_short":"int"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"byte[]","comment":"","type_short":"byte[]"}},{"javadoc":"","static":false,"name":"getSaveChangeDataFile","comment":"","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"db.buffers.BufferFile","comment":"","type_short":"BufferFile"}},{"javadoc":"Create a new buffer file version (used for checkin)\n@param srcFile must be a revision of destFile since change data from\n srcFile will control the actual modifications made to destFile.\n@param destFile must be an versioned file representing an earlier version\n of srcFile.\n@param fileComment\n@param monitor\n@throws CancelledException\n@throws IOException","static":false,"name":"createNewVersion","comment":"Create a new buffer file version (used for checkin)","params":[{"type_long":"db.buffers.ManagedBufferFile","name":"destFile","comment":"must be an versioned file representing an earlier version\n of srcFile.","type_short":"ManagedBufferFile"},{"type_long":"java.lang.String","name":"fileComment","comment":"","type_short":"String"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"},{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getSaveFile","comment":"","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"db.buffers.ManagedBufferFile","comment":"","type_short":"ManagedBufferFile"}},{"javadoc":"Returns a Save file if available.  Returns null if\n a save can not be performed.  This method may block for an extended\n period of time if the pre-save process has not already completed.\n This method does not accept a monitor since a remote TaskMonitor does\n not yet exist.\n@param monitor optional monitor for canceling pre-save (may be null)\n@throws IOException if an I\/O error occurs\n@throws CancelledException if monitor specified and pre-save cancelled","static":false,"name":"getSaveFile","comment":"Returns a Save file if available.  Returns null if\n a save can not be performed.  This method may block for an extended\n period of time if the pre-save process has not already completed.\n This method does not accept a monitor since a remote TaskMonitor does\n not yet exist.","params":[{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"optional monitor for canceling pre-save (may be null)","type_short":"TaskMonitor"}],"throws":[{"type_long":"java.io.IOException","comment":"if an I\/O error occurs","type_short":"IOException"},{"type_long":"ghidra.util.exception.CancelledException","comment":"if monitor specified and pre-save cancelled","type_short":"CancelledException"}],"return":{"type_long":"db.buffers.LocalManagedBufferFile","comment":"","type_short":"LocalManagedBufferFile"}},{"javadoc":"","static":false,"name":"saveCompleted","comment":"","params":[{"type_long":"boolean","name":"commit","comment":"","type_short":"boolean"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"canSave","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Obtain a direct stream to write blocks to this buffer file\n@param blockCount number of blocks to be transferred\n@return output block stream\n@throws IOException","static":false,"name":"getOutputBlockStream","comment":"Obtain a direct stream to write blocks to this buffer file","params":[{"type_long":"int","name":"blockCount","comment":"number of blocks to be transferred","type_short":"int"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"db.buffers.OutputBlockStream","comment":"output block stream","type_short":"OutputBlockStream"}},{"javadoc":"Obtain a direct stream to read all blocks of this buffer file\n@return input block stream\n@throws IOException","static":false,"name":"getInputBlockStream","comment":"Obtain a direct stream to read all blocks of this buffer file","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"db.buffers.InputBlockStream","comment":"input block stream","type_short":"InputBlockStream"}},{"javadoc":"Obtain a direct stream to read modified blocks of this buffer file \n based upon the specified changeMap\n@return input block stream\n@throws IOException","static":false,"name":"getInputBlockStream","comment":"Obtain a direct stream to read modified blocks of this buffer file \n based upon the specified changeMap","params":[{"type_long":"byte[]","name":"changeMapData","comment":"","type_short":"byte[]"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"db.buffers.InputBlockStream","comment":"input block stream","type_short":"InputBlockStream"}},{"javadoc":"Create a new version of this file by updating it from a versionedBufferFile.  \n This file must be open as read-only with versionUpdateEnabled and have been derived \n from an oldVersion of the versionedBufferFile (i.e., was based on a check-out of oldVersion).\n The save-file corresponding to this file is updated using those buffers\n which have been modified or added in the specified versionedBufferFile \n since olderVersion.  When complete, this file should be closed\n as soon as possible.\n@param versionedBufferFile versioned buffer file\n@param oldVersion older version of versionedBufferFile from which this buffer file originated.\n@param monitor progress monitor\n@throws IOException if an I\/O error occurs\n@throws CancelledException if monitor cancels operation","static":false,"name":"updateFrom","comment":"Create a new version of this file by updating it from a versionedBufferFile.  \n This file must be open as read-only with versionUpdateEnabled and have been derived \n from an oldVersion of the versionedBufferFile (i.e., was based on a check-out of oldVersion).\n The save-file corresponding to this file is updated using those buffers\n which have been modified or added in the specified versionedBufferFile \n since olderVersion.  When complete, this file should be closed\n as soon as possible.","params":[{"type_long":"db.buffers.ManagedBufferFile","name":"versionedBufferFile","comment":"versioned buffer file","type_short":"ManagedBufferFile"},{"type_long":"int","name":"oldVersion","comment":"older version of versionedBufferFile from which this buffer file originated.","type_short":"int"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"progress monitor","type_short":"TaskMonitor"}],"throws":[{"type_long":"java.io.IOException","comment":"if an I\/O error occurs","type_short":"IOException"},{"type_long":"ghidra.util.exception.CancelledException","comment":"if monitor cancels operation","type_short":"CancelledException"}],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"LocalManagedBufferFile","comment":"LocalManagedBufferFile implements a BufferFile as block-oriented\n random-access file which utilizes a BufferFileManager to \n identify and facilitate versioning of buffer files.  This type of\n buffer file supports both save-as and save operations.  The file\n format used is identical to a LocalBufferFile, although additional\n support is provided for associated files which facilitate versioning\n (e.g., ChangeMapFile, VersionFile, and changed data files).","fields":[]}
