{"implements":["db.buffers.BufferFile"],"javadoc":"<code>LocalBufferFile<\/code> implements a BufferFile as block-oriented\n random-access file.  This type of buffer file supports save-as but does\n not support the save operation.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"Create a new buffer file for writing.\n If the file does not exist and create is true, a new buffer file will\n be created.\n The file will be saved when closed.\n@param file buffer file\n@param bufferSize user buffer size\n@throws DuplicateFileException if file already exists\n@throws IOException if an I\/O error occurs during file creation","static":false,"name":"<init>","comment":"Create a new buffer file for writing.\n If the file does not exist and create is true, a new buffer file will\n be created.\n The file will be saved when closed.","params":[{"type_long":"java.io.File","name":"file","comment":"buffer file","type_short":"File"},{"type_long":"int","name":"bufferSize","comment":"user buffer size","type_short":"int"}],"throws":[{"type_long":"java.io.IOException","comment":"if an I\/O error occurs during file creation","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Open an existing block file.\n@param file block file\n@param readOnly if true the file will be opened read-only\n@throws IOException if an IO error occurs or the incorrect magicNumber\n was read from the file.","static":false,"name":"<init>","comment":"Open an existing block file.","params":[{"type_long":"java.io.File","name":"file","comment":"block file","type_short":"File"},{"type_long":"boolean","name":"readOnly","comment":"if true the file will be opened read-only","type_short":"boolean"}],"throws":[{"type_long":"java.io.IOException","comment":"if an IO error occurs or the incorrect magicNumber\n was read from the file.","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Modify an existing buffer file.\n WARNING! Use with extreme caution since this modifies\n the original file and could destroy data if used\n improperly.\n@param file\n@param bufferIndex\n@param buf\n@throws IOException","static":true,"name":"poke","comment":"Modify an existing buffer file.\n WARNING! Use with extreme caution since this modifies\n the original file and could destroy data if used\n improperly.","params":[{"type_long":"java.io.File","name":"file","comment":"","type_short":"File"},{"type_long":"int","name":"bufferIndex","comment":"","type_short":"int"},{"type_long":"db.buffers.DataBuffer","name":"buf","comment":"","type_short":"DataBuffer"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Read a buffer from an existing buffer file.\n@param file\n@param bufferIndex\n@return \n@throws IOException","static":true,"name":"peek","comment":"Read a buffer from an existing buffer file.","params":[{"type_long":"java.io.File","name":"file","comment":"","type_short":"File"},{"type_long":"int","name":"bufferIndex","comment":"","type_short":"int"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"db.buffers.DataBuffer","comment":"","type_short":"DataBuffer"}},{"javadoc":"Returns the physical file associated with this BufferFile.","static":false,"name":"getFile","comment":"Returns the physical file associated with this BufferFile.","params":[],"throws":[],"return":{"type_long":"java.io.File","comment":"","type_short":"File"}},{"javadoc":"","static":false,"name":"isReadOnly","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"getParameter","comment":"","params":[{"type_long":"java.lang.String","name":"name","comment":"","type_short":"String"}],"throws":[{"type_long":"java.util.NoSuchElementException","comment":"","type_short":"NoSuchElementException"}],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"setParameter","comment":"","params":[{"type_long":"java.lang.String","name":"name","comment":"","type_short":"String"},{"type_long":"int","name":"value","comment":"","type_short":"int"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"clearParameters","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getParameterNames","comment":"","params":[],"throws":[],"return":{"type_long":"java.lang.String[]","comment":"","type_short":"java.lang.String[]"}},{"javadoc":"","static":false,"name":"getFreeIndexes","comment":"","params":[],"throws":[],"return":{"type_long":"int[]","comment":"","type_short":"int[]"}},{"javadoc":"","static":false,"name":"setFreeIndexes","comment":"","params":[{"type_long":"int[]","name":"indexes","comment":"","type_short":"int[]"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Generate a DataBuffer instance which corresponds to the specified block\n based upon LocalBufferFile block usage.\n@param block the buffer file block to be converted\n@return DataBuffer instance or null if head block.  If empty block\n DataBuffer will have null data","static":true,"name":"getDataBuffer","comment":"Generate a DataBuffer instance which corresponds to the specified block\n based upon LocalBufferFile block usage.","params":[{"type_long":"db.buffers.BufferFileBlock","name":"block","comment":"the buffer file block to be converted","type_short":"BufferFileBlock"}],"throws":[],"return":{"type_long":"db.buffers.DataBuffer","comment":"DataBuffer instance or null if head block.  If empty block\n DataBuffer will have null data","type_short":"DataBuffer"}},{"javadoc":"Generate a BufferFileBlock instance which corresponds to the specified DataBuffer\n based upon LocalBufferFile block usage.  This should generally not be used for writing\n empty blocks since they will not be properly linked which is normally handled during \n header flush which is performed by BufferFile close on files being written.\n@param buf the data buffer to be converted\n@param bufferSize data buffer size used for integrity check and generating empty buffer\n@return BufferFileBlock instance.","static":true,"name":"getBufferFileBlock","comment":"Generate a BufferFileBlock instance which corresponds to the specified DataBuffer\n based upon LocalBufferFile block usage.  This should generally not be used for writing\n empty blocks since they will not be properly linked which is normally handled during \n header flush which is performed by BufferFile close on files being written.","params":[{"type_long":"db.buffers.DataBuffer","name":"buf","comment":"the data buffer to be converted","type_short":"DataBuffer"},{"type_long":"int","name":"bufferSize","comment":"data buffer size used for integrity check and generating empty buffer","type_short":"int"}],"throws":[],"return":{"type_long":"db.buffers.BufferFileBlock","comment":"BufferFileBlock instance.","type_short":"BufferFileBlock"}},{"javadoc":"","static":false,"name":"get","comment":"","params":[{"type_long":"db.buffers.DataBuffer","name":"buf","comment":"","type_short":"DataBuffer"},{"type_long":"int","name":"index","comment":"","type_short":"int"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"db.buffers.DataBuffer","comment":"","type_short":"DataBuffer"}},{"javadoc":"","static":false,"name":"put","comment":"","params":[{"type_long":"db.buffers.DataBuffer","name":"buf","comment":"","type_short":"DataBuffer"},{"type_long":"int","name":"index","comment":"","type_short":"int"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"getBufferSize","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"getIndexCount","comment":"","params":[],"throws":[],"return":{"type_long":"int","comment":"","type_short":"int"}},{"javadoc":"","static":false,"name":"dispose","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"setReadOnly","comment":"","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"close","comment":"","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"delete","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Clone this buffer file to the specified file.  The file must not \n already exist.  If the operation is cancelled or an error occurs\n the file is not created.\n@param destinationFile destination file\n@param monitor progress monitor\n@throws IOException if IO error occurs.\n@throws CancelledException if the monitor cancels the operation.","static":false,"name":"clone","comment":"Clone this buffer file to the specified file.  The file must not \n already exist.  If the operation is cancelled or an error occurs\n the file is not created.","params":[{"type_long":"java.io.File","name":"destinationFile","comment":"destination file","type_short":"File"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"progress monitor","type_short":"TaskMonitor"}],"throws":[{"type_long":"java.io.IOException","comment":"if IO error occurs.","type_short":"IOException"},{"type_long":"ghidra.util.exception.CancelledException","comment":"if the monitor cancels the operation.","type_short":"CancelledException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"toString","comment":"","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}},{"javadoc":"Obtain a direct stream to read all blocks of this buffer file\n@return input block stream\n@throws IOException","static":false,"name":"getInputBlockStream","comment":"Obtain a direct stream to read all blocks of this buffer file","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"db.buffers.InputBlockStream","comment":"input block stream","type_short":"InputBlockStream"}},{"javadoc":"Obtain a direct stream to write blocks to this buffer file\n@param blockCount number of blocks to be transferred\n@return output block stream\n@throws IOException","static":false,"name":"getOutputBlockStream","comment":"Obtain a direct stream to write blocks to this buffer file","params":[{"type_long":"int","name":"blockCount","comment":"number of blocks to be transferred","type_short":"int"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"db.buffers.OutputBlockStream","comment":"output block stream","type_short":"OutputBlockStream"}},{"javadoc":"Copy the complete content of a specfied srcFile into a destFile\n excluding file ID.  Both files remain open.\n@param srcFile open buffer file\n@param destFile empty buffer file which is open for writing.\n@param changeMap optional change map which indicates those buffers which must be copied.\n Any buffer index outside the range of the change map will also be copied.\n@param monitor progress monitor\n@throws IOException if IO error occurs.\n@throws CancelledException if the monitor cancels the operation.","static":true,"name":"copyFile","comment":"Copy the complete content of a specfied srcFile into a destFile\n excluding file ID.  Both files remain open.","params":[{"type_long":"db.buffers.BufferFile","name":"srcFile","comment":"open buffer file","type_short":"BufferFile"},{"type_long":"db.buffers.BufferFile","name":"destFile","comment":"empty buffer file which is open for writing.","type_short":"BufferFile"},{"type_long":"db.buffers.ChangeMap","name":"changeMap","comment":"optional change map which indicates those buffers which must be copied.\n Any buffer index outside the range of the change map will also be copied.","type_short":"ChangeMap"},{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"progress monitor","type_short":"TaskMonitor"}],"throws":[{"type_long":"java.io.IOException","comment":"if IO error occurs.","type_short":"IOException"},{"type_long":"ghidra.util.exception.CancelledException","comment":"if the monitor cancels the operation.","type_short":"CancelledException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Attempt to remove all pre-save files.\n Those still open by an existing process should \n not be removed by the operating system.\n@param dir data directory containing presave files\n@param beforeNow if not 0, file mod time must be less than the specified time","static":true,"name":"cleanupOldPreSaveFiles","comment":"Attempt to remove all pre-save files.\n Those still open by an existing process should \n not be removed by the operating system.","params":[{"type_long":"java.io.File","name":"dir","comment":"data directory containing presave files","type_short":"File"},{"type_long":"long","name":"beforeNow","comment":"if not 0, file mod time must be less than the specified time","type_short":"long"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"LocalBufferFile","comment":"LocalBufferFile implements a BufferFile as block-oriented\n random-access file.  This type of buffer file supports save-as but does\n not support the save operation.","fields":[{"type_long":"java.lang.String","javadoc":"","static":true,"name":"BUFFER_FILE_EXTENSION","comment":"","type_short":"String","constant_value":"\".gbf\""},{"type_long":"java.lang.String","javadoc":"","static":true,"name":"PRESAVE_FILE_EXT","comment":"","type_short":"String","constant_value":"\".ps\""},{"type_long":"java.lang.String","javadoc":"","static":true,"name":"PRESAVE_FILE_PREFIX","comment":"","type_short":"String","constant_value":"\"tmp\""},{"type_long":"java.lang.String","javadoc":"","static":true,"name":"TEMP_FILE_EXT","comment":"","type_short":"String","constant_value":"\".tmp\""}]}
