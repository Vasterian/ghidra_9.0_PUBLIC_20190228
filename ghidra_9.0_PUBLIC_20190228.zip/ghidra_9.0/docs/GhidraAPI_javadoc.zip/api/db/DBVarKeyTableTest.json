{"implements":[],"javadoc":"","static":false,"extends":"generic.test.AbstractGenericTest","methods":[{"javadoc":"","static":false,"name":"<init>","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"setUp","comment":"","params":[],"throws":[{"type_long":"java.lang.Exception","comment":"","type_short":"Exception"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"tearDown","comment":"","params":[],"throws":[{"type_long":"java.lang.Exception","comment":"","type_short":"Exception"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Test normal record storage within a leaf node.\n Chained-buffers will not be utilized.\n@throws IOException","static":false,"name":"testInsertSmallVarKeyRecord","comment":"Test normal record storage within a leaf node.\n Chained-buffers will not be utilized.","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Test normal record storage within a leaf node.\n Use empty value for variable length fields.\n Chained-buffers will not be utilized.\n@throws IOException","static":false,"name":"testInsertVarKeyRecordWithEmptyField","comment":"Test normal record storage within a leaf node.\n Use empty value for variable length fields.\n Chained-buffers will not be utilized.","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Test normal record storage within a leaf node.\n Use NULL value for variable length fields.\n Chained-buffers will not be utilized.\n@throws IOException","static":false,"name":"testInsertVarKeyRecordWithNullField","comment":"Test normal record storage within a leaf node.\n Use NULL value for variable length fields.\n Chained-buffers will not be utilized.","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Test the use of chained-buffers for record storage.\n Chained-buffers will not utilize an index buffer.\n@throws IOException","static":false,"name":"testInsertSingleChainedBufferVarKeyRecord","comment":"Test the use of chained-buffers for record storage.\n Chained-buffers will not utilize an index buffer.","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Test the use of chained-buffers for record storage.\n Chained-buffers will be forced to utilize 1 buffer for storing indexes.\n@throws IOException","static":false,"name":"testInsertMultChainedBuffersVarKeyRecord","comment":"Test the use of chained-buffers for record storage.\n Chained-buffers will be forced to utilize 1 buffer for storing indexes.","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Test the use of chained-buffers for record storage.\n Chained-buffers will be forced to utilize 3 buffers for storing indexes.\n@throws IOException","static":false,"name":"testInsertVeryLargeChainedBuffersVarKeyRecord","comment":"Test the use of chained-buffers for record storage.\n Chained-buffers will be forced to utilize 3 buffers for storing indexes.","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Test normal record storage within a leaf node.\n Chained-buffers will not be utilized.\n@throws IOException","static":false,"name":"testGetSmallVarKeyRecord","comment":"Test normal record storage within a leaf node.\n Chained-buffers will not be utilized.","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Test the use of chained-buffers for record storage.\n Chained-buffers will not utilize an index buffer.\n@throws IOException","static":false,"name":"testGetSingleChainedBufferVarKeyRecord","comment":"Test the use of chained-buffers for record storage.\n Chained-buffers will not utilize an index buffer.","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Test the use of chained-buffers for record storage.\n Chained-buffers will be forced to utilize 1 buffer for storing indexes.\n@throws IOException","static":false,"name":"testGetMultChainedBuffersVarKeyRecord","comment":"Test the use of chained-buffers for record storage.\n Chained-buffers will be forced to utilize 1 buffer for storing indexes.","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Test the use of chained-buffers for record storage.\n Chained-buffers will be forced to utilize 3 buffers for storing indexes.\n@throws IOException","static":false,"name":"testGetVeryLargeChainedBuffersVarKeyRecord","comment":"Test the use of chained-buffers for record storage.\n Chained-buffers will be forced to utilize 3 buffers for storing indexes.","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Test normal record storage within a leaf node.\n Chained-buffers will not be utilized.\n@throws IOException","static":false,"name":"testGetStoredSmallVarKeyRecord","comment":"Test normal record storage within a leaf node.\n Chained-buffers will not be utilized.","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Test the use of chained-buffers for record storage.\n Chained-buffers will not utilize an index buffer.\n@throws IOException","static":false,"name":"testGetStoredSingleChainedBufferVarKeyRecord","comment":"Test the use of chained-buffers for record storage.\n Chained-buffers will not utilize an index buffer.","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Test the use of chained-buffers for record storage.\n Chained-buffers will be forced to utilize 1 buffer for storing indexes.\n@throws IOException","static":false,"name":"testGetStoredMultChainedBuffersVarKeyRecord","comment":"Test the use of chained-buffers for record storage.\n Chained-buffers will be forced to utilize 1 buffer for storing indexes.","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Test the use of chained-buffers for record storage.\n Chained-buffers will be forced to utilize 3 buffers for storing indexes.\n@throws IOException","static":false,"name":"testGetStoredVeryLargeChainedBuffersVarKeyRecord","comment":"Test the use of chained-buffers for record storage.\n Chained-buffers will be forced to utilize 3 buffers for storing indexes.","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"testGetMissingVarKeyRecord","comment":"","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"testStoredGetMissingVarKeyRecord","comment":"","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"testRandomVarKeyRecordIterator","comment":"","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"testForwardVarKeyRecordIterator","comment":"","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"testBackwardVarKeyRecordIterator","comment":"","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"testStoredVarKeyRandomRecordIterator","comment":"","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"testStoredForwardVarKeyRecordIterator","comment":"","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"testStoredBackwardVarKeyRecordIterator","comment":"","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"testBigRandomVarKeyRecordIterator","comment":"","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"testBigForwardVarKeyRecordIterator","comment":"","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"testBigBackwardVarKeyRecordIterator","comment":"","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"testBigStoredRandomVarKeyRecordIterator","comment":"","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"testBigStoredForwardVarKeyRecordIterator","comment":"","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"testBigStoredBackwardVarKeyRecordIterator","comment":"","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"testRandomVarKeyIterator","comment":"","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"testForwardVarKeyIterator","comment":"","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"testForwardSkippingVarKeyIterator","comment":"","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"testForwardDeleteIterator","comment":"","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"testReverseDeleteIterator","comment":"","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"testGetVarKeyRecordAfter","comment":"","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"testGetVarKeyRecordAtOrAfter","comment":"","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"testGetVarKeyRecordAtOrBefore","comment":"","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"testDeleteVarKeyRecord","comment":"","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"testForwardDeleteVarKeyRecord","comment":"","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"testReverseDeleteVarKeyRecord","comment":"","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"testDeleteAllVarKeyRecords","comment":"","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"testDeleteVarKeyRangeRecords","comment":"","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"testDeleteVarKeyRangeAllRecords","comment":"","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"testUpdateVarKeyRecord","comment":"","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"","static":false,"name":"testUpdateBigVarKeyRecord","comment":"","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"DBVarKeyTableTest","comment":"","fields":[]}
