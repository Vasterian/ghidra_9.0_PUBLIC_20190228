{"implements":[],"javadoc":"Table implementation class.\n NOTE: Most public methods are synchronized on the associated DBHandle instance\n to prevent concurrent modification by multiple threads.","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"Determine if this table uses long keys.\n@return true if this table utilizes long keys.  If false, the table uses \n a Field type key.","static":false,"name":"useLongKeys","comment":"Determine if this table uses long keys.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if this table utilizes long keys.  If false, the table uses \n a Field type key.","type_short":"boolean"}},{"javadoc":"Get table statistics.\n@return list of diagnostic statistics data for this table and related index tables.","static":false,"name":"getAllStatistics","comment":"Get table statistics.","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"db.TableStatistics[]","comment":"list of diagnostic statistics data for this table and related index tables.","type_short":"db.TableStatistics[]"}},{"javadoc":"Compile table statitics.\n@return table statistics data\n@throws IOException thrown if an IO error occurs","static":false,"name":"getStatistics","comment":"Compile table statitics.","params":[],"throws":[{"type_long":"java.io.IOException","comment":"thrown if an IO error occurs","type_short":"IOException"}],"return":{"type_long":"db.TableStatistics","comment":"table statistics data","type_short":"TableStatistics"}},{"javadoc":"Rebuild table and associated indexes to ensure consistent state.\n@param monitor\n@throws IOException if unable to rebuild\n@throws CancelledException","static":false,"name":"rebuild","comment":"Rebuild table and associated indexes to ensure consistent state.","params":[{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"java.io.IOException","comment":"if unable to rebuild","type_short":"IOException"},{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Check the consistency of this table and its associated index tables.\n@return true if consistency check passed, else false\n@throws IOException\n@throws CancelledException","static":false,"name":"isConsistent","comment":"Check the consistency of this table and its associated index tables.","params":[{"type_long":"ghidra.util.task.TaskMonitor","name":"monitor","comment":"","type_short":"TaskMonitor"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"},{"type_long":"ghidra.util.exception.CancelledException","comment":"","type_short":"CancelledException"}],"return":{"type_long":"boolean","comment":"true if consistency check passed, else false","type_short":"boolean"}},{"javadoc":"Delete all records within this table.","static":false,"name":"deleteAll","comment":"Delete all records within this table.","params":[],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Get the list of columns which are indexed\n@return list of indexed columns","static":false,"name":"getIndexedColumns","comment":"Get the list of columns which are indexed","params":[],"throws":[],"return":{"type_long":"int[]","comment":"list of indexed columns","type_short":"int[]"}},{"javadoc":"Get this tables schema.\n@return table schema","static":false,"name":"getSchema","comment":"Get this tables schema.","params":[],"throws":[],"return":{"type_long":"db.Schema","comment":"table schema","type_short":"Schema"}},{"javadoc":"Get table name\n@return table name","static":false,"name":"getName","comment":"Get table name","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"table name","type_short":"String"}},{"javadoc":"Change the name of this table\n@param name\n@throws DuplicateNameException","static":false,"name":"setName","comment":"Change the name of this table","params":[{"type_long":"java.lang.String","name":"name","comment":"","type_short":"String"}],"throws":[{"type_long":"ghidra.util.exception.DuplicateNameException","comment":"","type_short":"DuplicateNameException"}],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"Get record count\n@return record count","static":false,"name":"getRecordCount","comment":"Get record count","params":[],"throws":[],"return":{"type_long":"int","comment":"record count","type_short":"int"}},{"javadoc":"Get the maximum record key which has been assigned within this table.\n This method is only valid for those tables which employ a long key.\n@return maximum record key.","static":false,"name":"getMaxKey","comment":"Get the maximum record key which has been assigned within this table.\n This method is only valid for those tables which employ a long key.","params":[],"throws":[],"return":{"type_long":"long","comment":"maximum record key.","type_short":"long"}},{"javadoc":"Get the next available key.\n This method is only valid for those tables which employ a long key.\n@return next available key.","static":false,"name":"getKey","comment":"Get the next available key.\n This method is only valid for those tables which employ a long key.","params":[],"throws":[],"return":{"type_long":"long","comment":"next available key.","type_short":"long"}},{"javadoc":"Determine if this table contains a record with the specified key.\n@param key record key.\n@return true if record exists with key, else false.\n@throws IOException","static":false,"name":"hasRecord","comment":"Determine if this table contains a record with the specified key.","params":[{"type_long":"long","name":"key","comment":"record key.","type_short":"long"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"boolean","comment":"true if record exists with key, else false.","type_short":"boolean"}},{"javadoc":"Determine if this table contains a record with the specified key.\n@param key record key.\n@return true if record exists with key, else false.\n@throws IOException throw if an IO Error occurs","static":false,"name":"hasRecord","comment":"Determine if this table contains a record with the specified key.","params":[{"type_long":"db.Field","name":"key","comment":"record key.","type_short":"Field"}],"throws":[{"type_long":"java.io.IOException","comment":"throw if an IO Error occurs","type_short":"IOException"}],"return":{"type_long":"boolean","comment":"true if record exists with key, else false.","type_short":"boolean"}},{"javadoc":"Get the record identified by the specified key value.\n@param key unique record key.\n@return Record the record identified by key, or null if record was not\n found.\n@throws IOException throw if an IO Error occurs","static":false,"name":"getRecord","comment":"Get the record identified by the specified key value.","params":[{"type_long":"long","name":"key","comment":"unique record key.","type_short":"long"}],"throws":[{"type_long":"java.io.IOException","comment":"throw if an IO Error occurs","type_short":"IOException"}],"return":{"type_long":"db.Record","comment":"Record the record identified by key, or null if record was not\n found.","type_short":"Record"}},{"javadoc":"Get the record identified by the specified key value.\n@param key unique record key.\n@return Record the record identified by key, or null if record was not\n found.\n@throws IOException throw if an IO Error occurs","static":false,"name":"getRecord","comment":"Get the record identified by the specified key value.","params":[{"type_long":"db.Field","name":"key","comment":"unique record key.","type_short":"Field"}],"throws":[{"type_long":"java.io.IOException","comment":"throw if an IO Error occurs","type_short":"IOException"}],"return":{"type_long":"db.Record","comment":"Record the record identified by key, or null if record was not\n found.","type_short":"Record"}},{"javadoc":"Get the first record which has a key value less than the \n specified key.\n@param key unique key which may or may not exist within the table.\n@return the first record which has a key value less than the \n specified key, or null if no record was found.\n@throws IOException throw if an IO Error occurs","static":false,"name":"getRecordBefore","comment":"Get the first record which has a key value less than the \n specified key.","params":[{"type_long":"long","name":"key","comment":"unique key which may or may not exist within the table.","type_short":"long"}],"throws":[{"type_long":"java.io.IOException","comment":"throw if an IO Error occurs","type_short":"IOException"}],"return":{"type_long":"db.Record","comment":"the first record which has a key value less than the \n specified key, or null if no record was found.","type_short":"Record"}},{"javadoc":"Get the first record which has a key value less than the \n specified key.\n@param key unique key which may or may not exist within the table.\n@return the first record which has a key value less than the \n specified key, or null if no record was found.\n@throws IOException throw if an IO Error occurs","static":false,"name":"getRecordBefore","comment":"Get the first record which has a key value less than the \n specified key.","params":[{"type_long":"db.Field","name":"key","comment":"unique key which may or may not exist within the table.","type_short":"Field"}],"throws":[{"type_long":"java.io.IOException","comment":"throw if an IO Error occurs","type_short":"IOException"}],"return":{"type_long":"db.Record","comment":"the first record which has a key value less than the \n specified key, or null if no record was found.","type_short":"Record"}},{"javadoc":"Get the first record which has a key value greater than the \n specified key.\n@param key unique key which may or may not exist within the table.\n@return the first record which has a key value greater than the \n specified key, or null if no record was found.\n@throws IOException throw if an IO Error occurs","static":false,"name":"getRecordAfter","comment":"Get the first record which has a key value greater than the \n specified key.","params":[{"type_long":"long","name":"key","comment":"unique key which may or may not exist within the table.","type_short":"long"}],"throws":[{"type_long":"java.io.IOException","comment":"throw if an IO Error occurs","type_short":"IOException"}],"return":{"type_long":"db.Record","comment":"the first record which has a key value greater than the \n specified key, or null if no record was found.","type_short":"Record"}},{"javadoc":"Get the first record which has a key value greater than the \n specified key.\n@param key unique key which may or may not exist within the table.\n@return the first record which has a key value greater than the \n specified key, or null if no record was found.\n@throws IOException throw if an IO Error occurs","static":false,"name":"getRecordAfter","comment":"Get the first record which has a key value greater than the \n specified key.","params":[{"type_long":"db.Field","name":"key","comment":"unique key which may or may not exist within the table.","type_short":"Field"}],"throws":[{"type_long":"java.io.IOException","comment":"throw if an IO Error occurs","type_short":"IOException"}],"return":{"type_long":"db.Record","comment":"the first record which has a key value greater than the \n specified key, or null if no record was found.","type_short":"Record"}},{"javadoc":"Get the first record which has a key value less than or equal to the \n specified key.\n@param key unique key which may or may not exist within the table.\n@return the first record which has a key value less than or equal to the \n specified key, or null if no record was found.\n@throws IOException throw if an IO Error occurs","static":false,"name":"getRecordAtOrBefore","comment":"Get the first record which has a key value less than or equal to the \n specified key.","params":[{"type_long":"long","name":"key","comment":"unique key which may or may not exist within the table.","type_short":"long"}],"throws":[{"type_long":"java.io.IOException","comment":"throw if an IO Error occurs","type_short":"IOException"}],"return":{"type_long":"db.Record","comment":"the first record which has a key value less than or equal to the \n specified key, or null if no record was found.","type_short":"Record"}},{"javadoc":"Get the first record which has a key value less than or equal to the \n specified key.\n@param key unique key which may or may not exist within the table.\n@return the first record which has a key value less than or equal to the \n specified key, or null if no record was found.\n@throws IOException throw if an IO Error occurs","static":false,"name":"getRecordAtOrBefore","comment":"Get the first record which has a key value less than or equal to the \n specified key.","params":[{"type_long":"db.Field","name":"key","comment":"unique key which may or may not exist within the table.","type_short":"Field"}],"throws":[{"type_long":"java.io.IOException","comment":"throw if an IO Error occurs","type_short":"IOException"}],"return":{"type_long":"db.Record","comment":"the first record which has a key value less than or equal to the \n specified key, or null if no record was found.","type_short":"Record"}},{"javadoc":"Get the first record which has a key value greater than or equal to the \n specified key.\n@param key unique key which may or may not exist within the table.\n@return the first record which has a key value greater than or equal to the \n specified key, or null if no record was found.\n@throws IOException throw if an IO Error occurs","static":false,"name":"getRecordAtOrAfter","comment":"Get the first record which has a key value greater than or equal to the \n specified key.","params":[{"type_long":"long","name":"key","comment":"unique key which may or may not exist within the table.","type_short":"long"}],"throws":[{"type_long":"java.io.IOException","comment":"throw if an IO Error occurs","type_short":"IOException"}],"return":{"type_long":"db.Record","comment":"the first record which has a key value greater than or equal to the \n specified key, or null if no record was found.","type_short":"Record"}},{"javadoc":"Get the first record which has a key value greater than or equal to the \n specified key.\n@param key unique key which may or may not exist within the table.\n@return the first record which has a key value greater than or equal to the \n specified key, or null if no record was found.\n@throws IOException throw if an IO Error occurs","static":false,"name":"getRecordAtOrAfter","comment":"Get the first record which has a key value greater than or equal to the \n specified key.","params":[{"type_long":"db.Field","name":"key","comment":"unique key which may or may not exist within the table.","type_short":"Field"}],"throws":[{"type_long":"java.io.IOException","comment":"throw if an IO Error occurs","type_short":"IOException"}],"return":{"type_long":"db.Record","comment":"the first record which has a key value greater than or equal to the \n specified key, or null if no record was found.","type_short":"Record"}},{"javadoc":"Put the specified record into the stored BTree.\n@param record the record to be stored.\n@throws IOException throw if an IO Error occurs","static":false,"name":"putRecord","comment":"Put the specified record into the stored BTree.","params":[{"type_long":"db.Record","name":"record","comment":"the record to be stored.","type_short":"Record"}],"throws":[{"type_long":"java.io.IOException","comment":"throw if an IO Error occurs","type_short":"IOException"}],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Delete a record identified by the specified key value.\n@param key unique record key.\n@return true if record was deleted successfully.\n@throws IOException throw if an IO Error occurs","static":false,"name":"deleteRecord","comment":"Delete a record identified by the specified key value.","params":[{"type_long":"long","name":"key","comment":"unique record key.","type_short":"long"}],"throws":[{"type_long":"java.io.IOException","comment":"throw if an IO Error occurs","type_short":"IOException"}],"return":{"type_long":"boolean","comment":"true if record was deleted successfully.","type_short":"boolean"}},{"javadoc":"Delete a record identified by the specified key value.\n@param key unique record key.\n@return true if record was deleted successfully.\n@throws IOException throw if an IO Error occurs","static":false,"name":"deleteRecord","comment":"Delete a record identified by the specified key value.","params":[{"type_long":"db.Field","name":"key","comment":"unique record key.","type_short":"Field"}],"throws":[{"type_long":"java.io.IOException","comment":"throw if an IO Error occurs","type_short":"IOException"}],"return":{"type_long":"boolean","comment":"true if record was deleted successfully.","type_short":"boolean"}},{"javadoc":"Delete all records whose keys fall within the specified range, inclusive.\n@param startKey minimum key value\n@param endKey maximum key value\n@return true if one or more records were deleted.\n@throws IOException thrown if an IO error occurs","static":false,"name":"deleteRecords","comment":"Delete all records whose keys fall within the specified range, inclusive.","params":[{"type_long":"long","name":"startKey","comment":"minimum key value","type_short":"long"},{"type_long":"long","name":"endKey","comment":"maximum key value","type_short":"long"}],"throws":[{"type_long":"java.io.IOException","comment":"thrown if an IO error occurs","type_short":"IOException"}],"return":{"type_long":"boolean","comment":"true if one or more records were deleted.","type_short":"boolean"}},{"javadoc":"Delete all records whose keys fall within the specified range, inclusive.\n@param startKey minimum key value\n@param endKey maximum key value\n@return true if one or more records were deleted.\n@throws IOException thrown if an IO error occurs","static":false,"name":"deleteRecords","comment":"Delete all records whose keys fall within the specified range, inclusive.","params":[{"type_long":"db.Field","name":"startKey","comment":"minimum key value","type_short":"Field"},{"type_long":"db.Field","name":"endKey","comment":"maximum key value","type_short":"Field"}],"throws":[{"type_long":"java.io.IOException","comment":"thrown if an IO error occurs","type_short":"IOException"}],"return":{"type_long":"boolean","comment":"true if one or more records were deleted.","type_short":"boolean"}},{"javadoc":"Find the primary keys corresponding to those records which contain the\n specified field value in the specified record column.  The table must\n have been created with a secondary index on the specified column index.\n@param field the field value\n@param columnIndex the record schema column which should be searched.\n@return list of primary keys\n@throws IOException if a secondary index does not exist for the specified\n column, or the wrong field type was specified, or an I\/O error occurs.","static":false,"name":"findRecords","comment":"Find the primary keys corresponding to those records which contain the\n specified field value in the specified record column.  The table must\n have been created with a secondary index on the specified column index.","params":[{"type_long":"db.Field","name":"field","comment":"the field value","type_short":"Field"},{"type_long":"int","name":"columnIndex","comment":"the record schema column which should be searched.","type_short":"int"}],"throws":[{"type_long":"java.io.IOException","comment":"if a secondary index does not exist for the specified\n column, or the wrong field type was specified, or an I\/O error occurs.","type_short":"IOException"}],"return":{"type_long":"long[]","comment":"list of primary keys","type_short":"long[]"}},{"javadoc":"Get the number of records which contain the\n specified field value in the specified record column.  The table must\n have been created with a secondary index on the specified column index.\n@param field the field value\n@param columnIndex the record schema column which should be searched.\n@return number of records which match the specified field value.\n@throws IOException if a secondary index does not exist for the specified\n column, or the wrong field type was specified, or an I\/O error occurs.","static":false,"name":"getMatchingRecordCount","comment":"Get the number of records which contain the\n specified field value in the specified record column.  The table must\n have been created with a secondary index on the specified column index.","params":[{"type_long":"db.Field","name":"field","comment":"the field value","type_short":"Field"},{"type_long":"int","name":"columnIndex","comment":"the record schema column which should be searched.","type_short":"int"}],"throws":[{"type_long":"java.io.IOException","comment":"if a secondary index does not exist for the specified\n column, or the wrong field type was specified, or an I\/O error occurs.","type_short":"IOException"}],"return":{"type_long":"int","comment":"number of records which match the specified field value.","type_short":"int"}},{"javadoc":"Determine if a record exists with the specified value within the specified\n column.  The table must have been created with a secondary index on the \n specified column index.\n@param field the field value\n@param columnIndex the record schema column which should be searched.\n@return true if one or more records exis with the specified value.\n@throws IOException","static":false,"name":"hasRecord","comment":"Determine if a record exists with the specified value within the specified\n column.  The table must have been created with a secondary index on the \n specified column index.","params":[{"type_long":"db.Field","name":"field","comment":"the field value","type_short":"Field"},{"type_long":"int","name":"columnIndex","comment":"the record schema column which should be searched.","type_short":"int"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"boolean","comment":"true if one or more records exis with the specified value.","type_short":"boolean"}},{"javadoc":"Iterate over all the unique index field values.  Index values are\n returned in an ascending sorted order with the initial iterator position\n set to the minimum index value.\n@param columnIndex identifies an indexed column.\n@return index field iterator.\n@throws IOException","static":false,"name":"indexFieldIterator","comment":"Iterate over all the unique index field values.  Index values are\n returned in an ascending sorted order with the initial iterator position\n set to the minimum index value.","params":[{"type_long":"int","name":"columnIndex","comment":"identifies an indexed column.","type_short":"int"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"db.DBFieldIterator","comment":"index field iterator.","type_short":"DBFieldIterator"}},{"javadoc":"Iterate over all the unique index field values within the specified range identified\n by minField and maxField.  Index values are returned in an ascending sorted order.\n@param minField minimum index column value, if null absolute minimum is used\n@param maxField maximum index column value, if null absolute maximum is used\n@param atStart if true initial position is before minField, else position\n is after endField\n@param columnIndex identifies an indexed column.\n@return index field iterator.\n@throws IOException","static":false,"name":"indexFieldIterator","comment":"Iterate over all the unique index field values within the specified range identified\n by minField and maxField.  Index values are returned in an ascending sorted order.","params":[{"type_long":"db.Field","name":"minField","comment":"minimum index column value, if null absolute minimum is used","type_short":"Field"},{"type_long":"db.Field","name":"maxField","comment":"maximum index column value, if null absolute maximum is used","type_short":"Field"},{"type_long":"boolean","name":"atMin","comment":"","type_short":"boolean"},{"type_long":"int","name":"columnIndex","comment":"identifies an indexed column.","type_short":"int"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"db.DBFieldIterator","comment":"index field iterator.","type_short":"DBFieldIterator"}},{"javadoc":"Iterate over all the unique index field values within the specified range identified\n by minField and maxField.  Index values are returned in an ascending sorted order with the \n initial iterator position corresponding to the startField.\n@param minField minimum index column value, if null absolute minimum is used\n@param maxField maximum index column value, if null absolute maximum is used\n@param startField index column value corresponding to initial position of iterator\n@param before if true initial position is before startField value, else position\n is after startField value\n@param columnIndex identifies an indexed column.\n@return index field iterator.\n@throws IOException","static":false,"name":"indexFieldIterator","comment":"Iterate over all the unique index field values within the specified range identified\n by minField and maxField.  Index values are returned in an ascending sorted order with the \n initial iterator position corresponding to the startField.","params":[{"type_long":"db.Field","name":"minField","comment":"minimum index column value, if null absolute minimum is used","type_short":"Field"},{"type_long":"db.Field","name":"maxField","comment":"maximum index column value, if null absolute maximum is used","type_short":"Field"},{"type_long":"db.Field","name":"startField","comment":"index column value corresponding to initial position of iterator","type_short":"Field"},{"type_long":"boolean","name":"before","comment":"if true initial position is before startField value, else position\n is after startField value","type_short":"boolean"},{"type_long":"int","name":"columnIndex","comment":"identifies an indexed column.","type_short":"int"}],"throws":[{"type_long":"java.io.IOException","comment":"","type_short":"IOException"}],"return":{"type_long":"db.DBFieldIterator","comment":"index field iterator.","type_short":"DBFieldIterator"}},{"javadoc":"Iterate over the records using a secondary index.  Sorting occurs on the\n specified schema column.  This table must have been constructed with a secondary\n index on the specified column.\n@param columnIndex schema column to sort on.\n@return RecordIterator record iterator.\n@throws IOException if a secondary index does not exist for the specified\n column or an I\/O error occurs.","static":false,"name":"indexIterator","comment":"Iterate over the records using a secondary index.  Sorting occurs on the\n specified schema column.  This table must have been constructed with a secondary\n index on the specified column.","params":[{"type_long":"int","name":"columnIndex","comment":"schema column to sort on.","type_short":"int"}],"throws":[{"type_long":"java.io.IOException","comment":"if a secondary index does not exist for the specified\n column or an I\/O error occurs.","type_short":"IOException"}],"return":{"type_long":"db.RecordIterator","comment":"RecordIterator record iterator.","type_short":"RecordIterator"}},{"javadoc":"Iterate over a range of records using a secondary index.  Sorting occurs on the\n specified schema column. The iterator is initially positioned before the startValue.\n This table must have been constructed with a secondary index on the specified column.\n@param columnIndex schema column to sort on.\n@param startValue the starting and minimum value of the secondary index field.\n@param endValue the ending and maximum value of the secondary index field.\n@param primaryKey the primary key associated with the startField.\n@param atStart if true, position the iterator before the start value. \n Otherwise, position the iterator after the end value.\n@return RecordIterator record iterator.\n@throws IOException if a secondary index does not exist for the specified\n column, or the wrong field type was specified, or an I\/O error occurs.","static":false,"name":"indexIterator","comment":"Iterate over a range of records using a secondary index.  Sorting occurs on the\n specified schema column. The iterator is initially positioned before the startValue.\n This table must have been constructed with a secondary index on the specified column.","params":[{"type_long":"int","name":"columnIndex","comment":"schema column to sort on.","type_short":"int"},{"type_long":"db.Field","name":"startValue","comment":"the starting and minimum value of the secondary index field.","type_short":"Field"},{"type_long":"db.Field","name":"endValue","comment":"the ending and maximum value of the secondary index field.","type_short":"Field"},{"type_long":"boolean","name":"atStart","comment":"if true, position the iterator before the start value. \n Otherwise, position the iterator after the end value.","type_short":"boolean"}],"throws":[{"type_long":"java.io.IOException","comment":"if a secondary index does not exist for the specified\n column, or the wrong field type was specified, or an I\/O error occurs.","type_short":"IOException"}],"return":{"type_long":"db.RecordIterator","comment":"RecordIterator record iterator.","type_short":"RecordIterator"}},{"javadoc":"Iterate over the records using a secondary index.  Sorting occurs on the\n specified schema column.  The iterator's initial position immediately follows \n the specified startValue. If this value does not exist, the initial position corresponds\n to where it would exist.\n This table must have been constructed with a secondary index on the specified column.\n@param columnIndex schema column to sort on.\n@param startValue the starting value of the secondary index field.\n@return RecordIterator record iterator.\n@throws IOException if a secondary index does not exist for the specified\n column, or the wrong field type was specified, or an I\/O error occurs.","static":false,"name":"indexIteratorAfter","comment":"Iterate over the records using a secondary index.  Sorting occurs on the\n specified schema column.  The iterator's initial position immediately follows \n the specified startValue. If this value does not exist, the initial position corresponds\n to where it would exist.\n This table must have been constructed with a secondary index on the specified column.","params":[{"type_long":"int","name":"columnIndex","comment":"schema column to sort on.","type_short":"int"},{"type_long":"db.Field","name":"startValue","comment":"the starting value of the secondary index field.","type_short":"Field"}],"throws":[{"type_long":"java.io.IOException","comment":"if a secondary index does not exist for the specified\n column, or the wrong field type was specified, or an I\/O error occurs.","type_short":"IOException"}],"return":{"type_long":"db.RecordIterator","comment":"RecordIterator record iterator.","type_short":"RecordIterator"}},{"javadoc":"Iterate over the records using a secondary index.  Sorting occurs on the\n specified schema column.  The iterator's initial position immediately precedes \n the specified startValue. If this value does not exist, the initial position corresponds\n to where it would exist.\n This table must have been constructed with a secondary index on the specified column.\n@param columnIndex schema column to sort on.\n@param startValue the starting value of the secondary index field.\n@return RecordIterator record iterator.\n@throws IOException if a secondary index does not exist for the specified\n column, or the wrong field type was specified, or an I\/O error occurs.","static":false,"name":"indexIteratorBefore","comment":"Iterate over the records using a secondary index.  Sorting occurs on the\n specified schema column.  The iterator's initial position immediately precedes \n the specified startValue. If this value does not exist, the initial position corresponds\n to where it would exist.\n This table must have been constructed with a secondary index on the specified column.","params":[{"type_long":"int","name":"columnIndex","comment":"schema column to sort on.","type_short":"int"},{"type_long":"db.Field","name":"startValue","comment":"the starting value of the secondary index field.","type_short":"Field"}],"throws":[{"type_long":"java.io.IOException","comment":"if a secondary index does not exist for the specified\n column, or the wrong field type was specified, or an I\/O error occurs.","type_short":"IOException"}],"return":{"type_long":"db.RecordIterator","comment":"RecordIterator record iterator.","type_short":"RecordIterator"}},{"javadoc":"Iterate over the records using a secondary index.  Sorting occurs on the\n specified schema column.  The iterator's initial position immediately follows \n the specified startValue and primaryKey. If no such entry exists, the initial position \n corresponds to where it would exist.\n <p>\n This table must have been constructed with a secondary index on the specified column.\n@param columnIndex schema column to sort on.\n@param startValue the starting value of the secondary index field.\n@param primaryKey the primary key associated with the startField.\n@return RecordIterator record iterator.\n@throws IOException if a secondary index does not exist for the specified\n column, or the wrong field type was specified, or an I\/O error occurs.","static":false,"name":"indexIteratorAfter","comment":"Iterate over the records using a secondary index.  Sorting occurs on the\n specified schema column.  The iterator's initial position immediately follows \n the specified startValue and primaryKey. If no such entry exists, the initial position \n corresponds to where it would exist.\n \n This table must have been constructed with a secondary index on the specified column.","params":[{"type_long":"int","name":"columnIndex","comment":"schema column to sort on.","type_short":"int"},{"type_long":"db.Field","name":"startValue","comment":"the starting value of the secondary index field.","type_short":"Field"},{"type_long":"long","name":"primaryKey","comment":"the primary key associated with the startField.","type_short":"long"}],"throws":[{"type_long":"java.io.IOException","comment":"if a secondary index does not exist for the specified\n column, or the wrong field type was specified, or an I\/O error occurs.","type_short":"IOException"}],"return":{"type_long":"db.RecordIterator","comment":"RecordIterator record iterator.","type_short":"RecordIterator"}},{"javadoc":"Iterate over the records using a secondary index.  Sorting occurs on the\n specified schema column.  The iterator's initial position immediately precedes \n the specified startValue and primaryKey. If no such entry exists, the initial position \n corresponds to where it would exist.\n <p>\n This table must have been constructed with a secondary index on the specified column.\n@param columnIndex schema column to sort on.\n@param startValue the starting value of the secondary index field.\n@param primaryKey the primary key associated with the startField.\n@return RecordIterator record iterator.\n@throws IOException if a secondary index does not exist for the specified\n column, or the wrong field type was specified, or an I\/O error occurs.","static":false,"name":"indexIteratorBefore","comment":"Iterate over the records using a secondary index.  Sorting occurs on the\n specified schema column.  The iterator's initial position immediately precedes \n the specified startValue and primaryKey. If no such entry exists, the initial position \n corresponds to where it would exist.\n \n This table must have been constructed with a secondary index on the specified column.","params":[{"type_long":"int","name":"columnIndex","comment":"schema column to sort on.","type_short":"int"},{"type_long":"db.Field","name":"startValue","comment":"the starting value of the secondary index field.","type_short":"Field"},{"type_long":"long","name":"primaryKey","comment":"the primary key associated with the startField.","type_short":"long"}],"throws":[{"type_long":"java.io.IOException","comment":"if a secondary index does not exist for the specified\n column, or the wrong field type was specified, or an I\/O error occurs.","type_short":"IOException"}],"return":{"type_long":"db.RecordIterator","comment":"RecordIterator record iterator.","type_short":"RecordIterator"}},{"javadoc":"Iterate over all primary keys sorted based upon the associated index key.\n@param columnIndex schema column to sort on.\n@return primary key iterator\n@throws IOException thrown if IO error occurs","static":false,"name":"indexKeyIterator","comment":"Iterate over all primary keys sorted based upon the associated index key.","params":[{"type_long":"int","name":"columnIndex","comment":"schema column to sort on.","type_short":"int"}],"throws":[{"type_long":"java.io.IOException","comment":"thrown if IO error occurs","type_short":"IOException"}],"return":{"type_long":"db.DBLongIterator","comment":"primary key iterator","type_short":"DBLongIterator"}},{"javadoc":"Iterate over all primary keys sorted based upon the associated index key.\n The iterator is initially positioned before the first index buffer whose index key \n is greater than or equal to the specified startField value.\n@param columnIndex schema column to sort on\n@param startField index column value which determines initial position of iterator\n@return primary key iterator\n@throws IOException thrown if IO error occurs","static":false,"name":"indexKeyIteratorBefore","comment":"Iterate over all primary keys sorted based upon the associated index key.\n The iterator is initially positioned before the first index buffer whose index key \n is greater than or equal to the specified startField value.","params":[{"type_long":"int","name":"columnIndex","comment":"schema column to sort on","type_short":"int"},{"type_long":"db.Field","name":"startField","comment":"index column value which determines initial position of iterator","type_short":"Field"}],"throws":[{"type_long":"java.io.IOException","comment":"thrown if IO error occurs","type_short":"IOException"}],"return":{"type_long":"db.DBLongIterator","comment":"primary key iterator","type_short":"DBLongIterator"}},{"javadoc":"Iterate over all primary keys sorted based upon the associated index key.\n The iterator is initially positioned after the index buffer whose index key \n is equal to the specified startField value or immediately before the first \n index buffer whose index key is greater than the specified startField value.\n@param columnIndex schema column to sort on\n@param startField index column value which determines initial position of iterator\n@return primary key iterator\n@throws IOException thrown if IO error occurs","static":false,"name":"indexKeyIteratorAfter","comment":"Iterate over all primary keys sorted based upon the associated index key.\n The iterator is initially positioned after the index buffer whose index key \n is equal to the specified startField value or immediately before the first \n index buffer whose index key is greater than the specified startField value.","params":[{"type_long":"int","name":"columnIndex","comment":"schema column to sort on","type_short":"int"},{"type_long":"db.Field","name":"startField","comment":"index column value which determines initial position of iterator","type_short":"Field"}],"throws":[{"type_long":"java.io.IOException","comment":"thrown if IO error occurs","type_short":"IOException"}],"return":{"type_long":"db.DBLongIterator","comment":"primary key iterator","type_short":"DBLongIterator"}},{"javadoc":"Iterate over all primary keys sorted based upon the associated index key.\n The iterator is initially positioned before the primaryKey within the index buffer \n whose index key is equal to the specified startField value or immediately before the first \n index buffer whose index key is greater than the specified startField value.\n@param columnIndex schema column to sort on\n@param startField index column value which determines initial position of iterator\n@param primaryKey initial position within index buffer if index key matches startField value.\n@return primary key iterator\n@throws IOException thrown if IO error occurs","static":false,"name":"indexKeyIteratorBefore","comment":"Iterate over all primary keys sorted based upon the associated index key.\n The iterator is initially positioned before the primaryKey within the index buffer \n whose index key is equal to the specified startField value or immediately before the first \n index buffer whose index key is greater than the specified startField value.","params":[{"type_long":"int","name":"columnIndex","comment":"schema column to sort on","type_short":"int"},{"type_long":"db.Field","name":"startField","comment":"index column value which determines initial position of iterator","type_short":"Field"},{"type_long":"long","name":"primaryKey","comment":"initial position within index buffer if index key matches startField value.","type_short":"long"}],"throws":[{"type_long":"java.io.IOException","comment":"thrown if IO error occurs","type_short":"IOException"}],"return":{"type_long":"db.DBLongIterator","comment":"primary key iterator","type_short":"DBLongIterator"}},{"javadoc":"Iterate over all primary keys sorted based upon the associated index key.\n The iterator is initially positioned after the primaryKey within the index buffer \n whose index key is equal to the specified startField value or immediately before the first \n index buffer whose index key is greater than the specified startField value.\n@param columnIndex schema column to sort on\n@param startField index column value which determines initial position of iterator\n@param primaryKey initial position within index buffer if index key matches startField value.\n@return primary key iterator\n@throws IOException thrown if IO error occurs","static":false,"name":"indexKeyIteratorAfter","comment":"Iterate over all primary keys sorted based upon the associated index key.\n The iterator is initially positioned after the primaryKey within the index buffer \n whose index key is equal to the specified startField value or immediately before the first \n index buffer whose index key is greater than the specified startField value.","params":[{"type_long":"int","name":"columnIndex","comment":"schema column to sort on","type_short":"int"},{"type_long":"db.Field","name":"startField","comment":"index column value which determines initial position of iterator","type_short":"Field"},{"type_long":"long","name":"primaryKey","comment":"initial position within index buffer if index key matches startField value.","type_short":"long"}],"throws":[{"type_long":"java.io.IOException","comment":"thrown if IO error occurs","type_short":"IOException"}],"return":{"type_long":"db.DBLongIterator","comment":"primary key iterator","type_short":"DBLongIterator"}},{"javadoc":"Iterate over all primary keys sorted based upon the associated index key.\n The iterator is limited to range of index keys of minField through maxField, inclusive.\n If atMin is true, the iterator is initially positioned before the first index \n buffer whose index key is greater than or equal to the specified minField value. \n If atMin is false, the iterator is initially positioned after the first index \n buffer whose index key is less than or equal to the specified maxField value.\n@param columnIndex schema column to sort on\n@param minField minimum index column value\n@param maxField maximum index column value\n@param atMin if true, position iterator before minField value, \n Otherwise, position iterator after maxField value.\n@return primary key iterator\n@throws IOException thrown if IO error occurs","static":false,"name":"indexKeyIterator","comment":"Iterate over all primary keys sorted based upon the associated index key.\n The iterator is limited to range of index keys of minField through maxField, inclusive.\n If atMin is true, the iterator is initially positioned before the first index \n buffer whose index key is greater than or equal to the specified minField value. \n If atMin is false, the iterator is initially positioned after the first index \n buffer whose index key is less than or equal to the specified maxField value.","params":[{"type_long":"int","name":"columnIndex","comment":"schema column to sort on","type_short":"int"},{"type_long":"db.Field","name":"minField","comment":"minimum index column value","type_short":"Field"},{"type_long":"db.Field","name":"maxField","comment":"maximum index column value","type_short":"Field"},{"type_long":"boolean","name":"atMin","comment":"if true, position iterator before minField value, \n Otherwise, position iterator after maxField value.","type_short":"boolean"}],"throws":[{"type_long":"java.io.IOException","comment":"thrown if IO error occurs","type_short":"IOException"}],"return":{"type_long":"db.DBLongIterator","comment":"primary key iterator","type_short":"DBLongIterator"}},{"javadoc":"Iterate over all primary keys sorted based upon the associated index key.\n The iterator is limited to range of index keys of minField through maxField, inclusive.\n The iterator is initially positioned before or after the specified startField index value.\n@param columnIndex schema column to sort on\n@param minField minimum index column value\n@param maxField maximum index column value\n@param startField starting indexed value position\n@param before if true positioned before startField value, else positioned after maxField\n@return primary key iterator\n@throws IOException thrown if IO error occurs","static":false,"name":"indexKeyIterator","comment":"Iterate over all primary keys sorted based upon the associated index key.\n The iterator is limited to range of index keys of minField through maxField, inclusive.\n The iterator is initially positioned before or after the specified startField index value.","params":[{"type_long":"int","name":"columnIndex","comment":"schema column to sort on","type_short":"int"},{"type_long":"db.LongField","name":"minField","comment":"minimum index column value","type_short":"LongField"},{"type_long":"db.LongField","name":"maxField","comment":"maximum index column value","type_short":"LongField"},{"type_long":"db.LongField","name":"startField","comment":"starting indexed value position","type_short":"LongField"},{"type_long":"boolean","name":"before","comment":"if true positioned before startField value, else positioned after maxField","type_short":"boolean"}],"throws":[{"type_long":"java.io.IOException","comment":"thrown if IO error occurs","type_short":"IOException"}],"return":{"type_long":"db.DBLongIterator","comment":"primary key iterator","type_short":"DBLongIterator"}},{"javadoc":"Iterate over the records in ascending sorted order.  Sorting occurs on the primary key value.\n@return record iterator\n@throws IOException if an I\/O error occurs.","static":false,"name":"iterator","comment":"Iterate over the records in ascending sorted order.  Sorting occurs on the primary key value.","params":[],"throws":[{"type_long":"java.io.IOException","comment":"if an I\/O error occurs.","type_short":"IOException"}],"return":{"type_long":"db.RecordIterator","comment":"record iterator","type_short":"RecordIterator"}},{"javadoc":"Iterate over the records in ascending sorted order.  Sorting occurs on the primary key value\n starting at the specified startKey.\n@param startKey the first primary key.\n@return record iterator\n@throws IOException if an I\/O error occurs.","static":false,"name":"iterator","comment":"Iterate over the records in ascending sorted order.  Sorting occurs on the primary key value\n starting at the specified startKey.","params":[{"type_long":"long","name":"startKey","comment":"the first primary key.","type_short":"long"}],"throws":[{"type_long":"java.io.IOException","comment":"if an I\/O error occurs.","type_short":"IOException"}],"return":{"type_long":"db.RecordIterator","comment":"record iterator","type_short":"RecordIterator"}},{"javadoc":"Iterate over the records in ascending sorted order.  Sorting occurs on the primary key value\n starting at the specified startKey.\n@param minKey the minimum primary key.\n@param endKey the maximum primary key.\n@param startKey the initial iterator position.\n@return record iterator\n@throws IOException if an I\/O error occurs.\n@throws IllegalArgumentException if long keys are not in use or startKey \n is less than minKey or greater than maxKey.","static":false,"name":"iterator","comment":"Iterate over the records in ascending sorted order.  Sorting occurs on the primary key value\n starting at the specified startKey.","params":[{"type_long":"long","name":"minKey","comment":"the minimum primary key.","type_short":"long"},{"type_long":"long","name":"maxKey","comment":"","type_short":"long"},{"type_long":"long","name":"startKey","comment":"the initial iterator position.","type_short":"long"}],"throws":[{"type_long":"java.io.IOException","comment":"if an I\/O error occurs.","type_short":"IOException"}],"return":{"type_long":"db.RecordIterator","comment":"record iterator","type_short":"RecordIterator"}},{"javadoc":"Iterate over the records in ascending sorted order.  Sorting occurs on the primary key value\n starting at the specified startKey.\n@param startKey the first primary key.\n@return record iterator\n@throws IOException if an I\/O error occurs.","static":false,"name":"iterator","comment":"Iterate over the records in ascending sorted order.  Sorting occurs on the primary key value\n starting at the specified startKey.","params":[{"type_long":"db.Field","name":"startKey","comment":"the first primary key.","type_short":"Field"}],"throws":[{"type_long":"java.io.IOException","comment":"if an I\/O error occurs.","type_short":"IOException"}],"return":{"type_long":"db.RecordIterator","comment":"record iterator","type_short":"RecordIterator"}},{"javadoc":"Iterate over the records in ascending sorted order.  Sorting occurs on the primary key value\n starting at the specified startKey.\n@param minKey the minimum primary key, may be null.\n@param endKey the maximum primary key, may be null.\n@param startKey the initial iterator position, if null minKey is also start.\n@return record iterator\n@throws IOException if an I\/O error occurs.","static":false,"name":"iterator","comment":"Iterate over the records in ascending sorted order.  Sorting occurs on the primary key value\n starting at the specified startKey.","params":[{"type_long":"db.Field","name":"minKey","comment":"the minimum primary key, may be null.","type_short":"Field"},{"type_long":"db.Field","name":"maxKey","comment":"","type_short":"Field"},{"type_long":"db.Field","name":"startKey","comment":"the initial iterator position, if null minKey is also start.","type_short":"Field"}],"throws":[{"type_long":"java.io.IOException","comment":"if an I\/O error occurs.","type_short":"IOException"}],"return":{"type_long":"db.RecordIterator","comment":"record iterator","type_short":"RecordIterator"}},{"javadoc":"Iterate over all long primary keys in ascending sorted order.\n@return long key iterator\n@throws IOException if an I\/O error occurs.","static":false,"name":"longKeyIterator","comment":"Iterate over all long primary keys in ascending sorted order.","params":[],"throws":[{"type_long":"java.io.IOException","comment":"if an I\/O error occurs.","type_short":"IOException"}],"return":{"type_long":"db.DBLongIterator","comment":"long key iterator","type_short":"DBLongIterator"}},{"javadoc":"Iterate over the long primary keys in ascending sorted order\n starting at the specified startKey.\n@param startKey the first primary key.\n@return long key iterator\n@throws IOException if an I\/O error occurs.","static":false,"name":"longKeyIterator","comment":"Iterate over the long primary keys in ascending sorted order\n starting at the specified startKey.","params":[{"type_long":"long","name":"startKey","comment":"the first primary key.","type_short":"long"}],"throws":[{"type_long":"java.io.IOException","comment":"if an I\/O error occurs.","type_short":"IOException"}],"return":{"type_long":"db.DBLongIterator","comment":"long key iterator","type_short":"DBLongIterator"}},{"javadoc":"Iterate over the long primary keys in ascending sorted order\n starting at the specified startKey.\n@param minKey the minimum primary key.\n@param endKey the maximum primary key.\n@param startKey the initial iterator position.\n@return long key iterator\n@throws IOException if an I\/O error occurs.","static":false,"name":"longKeyIterator","comment":"Iterate over the long primary keys in ascending sorted order\n starting at the specified startKey.","params":[{"type_long":"long","name":"minKey","comment":"the minimum primary key.","type_short":"long"},{"type_long":"long","name":"maxKey","comment":"","type_short":"long"},{"type_long":"long","name":"startKey","comment":"the initial iterator position.","type_short":"long"}],"throws":[{"type_long":"java.io.IOException","comment":"if an I\/O error occurs.","type_short":"IOException"}],"return":{"type_long":"db.DBLongIterator","comment":"long key iterator","type_short":"DBLongIterator"}},{"javadoc":"Iterate over all primary keys in ascending sorted order.\n@param startKey the first primary key, may be null.\n@return Field type key iterator\n@throws IOException if an I\/O error occurs.","static":false,"name":"fieldKeyIterator","comment":"Iterate over all primary keys in ascending sorted order.","params":[],"throws":[{"type_long":"java.io.IOException","comment":"if an I\/O error occurs.","type_short":"IOException"}],"return":{"type_long":"db.DBFieldIterator","comment":"Field type key iterator","type_short":"DBFieldIterator"}},{"javadoc":"Iterate over the primary keys in ascending sorted order\n starting at the specified startKey.  If startKey is null, the\n starting position will be before the minimum key.\n@param startKey the first primary key, may be null.\n@return Field type key iterator\n@throws IOException if an I\/O error occurs.","static":false,"name":"fieldKeyIterator","comment":"Iterate over the primary keys in ascending sorted order\n starting at the specified startKey.  If startKey is null, the\n starting position will be before the minimum key.","params":[{"type_long":"db.Field","name":"startKey","comment":"the first primary key, may be null.","type_short":"Field"}],"throws":[{"type_long":"java.io.IOException","comment":"if an I\/O error occurs.","type_short":"IOException"}],"return":{"type_long":"db.DBFieldIterator","comment":"Field type key iterator","type_short":"DBFieldIterator"}},{"javadoc":"Iterate over the records in ascending sorted order\n starting at the specified startKey.  If startKey is null, the\n starting position will be set to minKey.\n@param minKey the minimum primary key, may be null.\n@param endKey the maximum primary key, may be null.\n@param startKey the initial iterator position, if null minKey is also start.\n@return Field type key iterator\n@throws IOException if an I\/O error occurs.","static":false,"name":"fieldKeyIterator","comment":"Iterate over the records in ascending sorted order\n starting at the specified startKey.  If startKey is null, the\n starting position will be set to minKey.","params":[{"type_long":"db.Field","name":"minKey","comment":"the minimum primary key, may be null.","type_short":"Field"},{"type_long":"db.Field","name":"maxKey","comment":"","type_short":"Field"},{"type_long":"db.Field","name":"startKey","comment":"the initial iterator position, if null minKey is also start.","type_short":"Field"}],"throws":[{"type_long":"java.io.IOException","comment":"if an I\/O error occurs.","type_short":"IOException"}],"return":{"type_long":"db.DBFieldIterator","comment":"Field type key iterator","type_short":"DBFieldIterator"}},{"javadoc":"@return ","static":false,"name":"isInvalid","comment":"","params":[],"throws":[],"return":{"type_long":"boolean","comment":"","type_short":"boolean"}},{"javadoc":"","static":false,"name":"toString","comment":"","params":[],"throws":[],"return":{"type_long":"java.lang.String","comment":"","type_short":"String"}}],"name":"Table","comment":"Table implementation class.\n NOTE: Most public methods are synchronized on the associated DBHandle instance\n to prevent concurrent modification by multiple threads.","fields":[]}
