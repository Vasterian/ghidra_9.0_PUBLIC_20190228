{"implements":[],"javadoc":"A collection of window related utility methods","static":false,"extends":"java.lang.Object","methods":[{"javadoc":"","static":false,"name":"<init>","comment":"","params":[],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns the title for the given window\n@param w the window\n@return the title","static":true,"name":"getTitle","comment":"Returns the title for the given window","params":[{"type_long":"java.awt.Window","name":"w","comment":"the window","type_short":"Window"}],"throws":[],"return":{"type_long":"java.lang.String","comment":"the title","type_short":"String"}},{"javadoc":"Returns the window parent of c.  If c is a window, then c is returned.\n\n <P>Warning: this differs from {@link SwingUtilities#windowForComponent(Component)} in\n that the latter method will not return the given component if it is a window.\n@param c the component\n@return the window","static":true,"name":"windowForComponent","comment":"Returns the window parent of c.  If c is a window, then c is returned.\n\n Warning: this differs from SwingUtilities#windowForComponent(Component) in\n that the latter method will not return the given component if it is a window.","params":[{"type_long":"java.awt.Component","name":"c","comment":"the component","type_short":"Component"}],"throws":[],"return":{"type_long":"java.awt.Window","comment":"the window","type_short":"Window"}},{"javadoc":"Returns the a rectangle representing the entire screen bounds.","static":true,"name":"getScreenBounds","comment":"Returns the a rectangle representing the entire screen bounds.","params":[],"throws":[],"return":{"type_long":"java.awt.Rectangle","comment":"","type_short":"Rectangle"}},{"javadoc":"Computes the point such that a rectangle with the given size would be centered on the\n screen.\n@param d the size of the rectangle to center.\n@return the point at which the if the given rectangle were drawn with its upper left\n corner at that point, it would be centered on the screen.","static":true,"name":"centerOnScreen","comment":"Computes the point such that a rectangle with the given size would be centered on the\n screen.","params":[{"type_long":"java.awt.Dimension","name":"d","comment":"the size of the rectangle to center.","type_short":"Dimension"}],"throws":[],"return":{"type_long":"java.awt.Point","comment":"the point at which the if the given rectangle were drawn with its upper left\n corner at that point, it would be centered on the screen.","type_short":"Point"}},{"javadoc":"Creates a point that is centered over the given <tt>parent<\/tt> component, based upon\n the size of the given <tt>child<\/tt>.\n@param parent The component over which to center the child.\n@param child The component which will be centered over the parent\n@return a point that is centered over the given <tt>parent<\/tt> component, based upon\n the size of the given <tt>child<\/tt>.","static":true,"name":"centerOnComponent","comment":"Creates a point that is centered over the given parent component, based upon\n the size of the given child.","params":[{"type_long":"java.awt.Component","name":"parent","comment":"The component over which to center the child.","type_short":"Component"},{"type_long":"java.awt.Component","name":"child","comment":"The component which will be centered over the parent","type_short":"Component"}],"throws":[],"return":{"type_long":"java.awt.Point","comment":"a point that is centered over the given parent component, based upon\n the size of the given child.","type_short":"Point"}},{"javadoc":"Makes sure the window is within visible bounds of the screen.\n@param window the window to move onscreen as necessary.","static":true,"name":"ensureWindowOnScreen","comment":"Makes sure the window is within visible bounds of the screen.","params":[{"type_long":"java.awt.Window","name":"window","comment":"the window to move onscreen as necessary.","type_short":"Window"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Updates the given dimension as necessary to fit it on the screen.\n@param size the size that may get updated","static":true,"name":"ensureSizeFitsScreen","comment":"Updates the given dimension as necessary to fit it on the screen.","params":[{"type_long":"java.awt.Dimension","name":"size","comment":"the size that may get updated","type_short":"Dimension"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}},{"javadoc":"Returns an point which has been adjusted to take into account of the\n desktop bounds, taskbar and multi-monitor configuration.\n <p>\n This adjustment may be cancelled by invoking the application with\n -Djavax.swing.adjustPopupLocationToFit=false\n@param bounds the bounds that must fit onscreen","static":true,"name":"adjustBoundsToFitScreen","comment":"Returns an point which has been adjusted to take into account of the\n desktop bounds, taskbar and multi-monitor configuration.\n \n This adjustment may be cancelled by invoking the application with\n -Djavax.swing.adjustPopupLocationToFit=false","params":[{"type_long":"java.awt.Rectangle","name":"bounds","comment":"the bounds that must fit onscreen","type_short":"Rectangle"}],"throws":[],"return":{"type_long":"java.awt.Point","comment":"","type_short":"Point"}},{"javadoc":"Returns true if there are one or more modal dialogs displayed in the current JVM.\n@return true if there are one or more modal dialogs displayed in the current JVM.","static":true,"name":"areModalDialogsVisible","comment":"Returns true if there are one or more modal dialogs displayed in the current JVM.","params":[],"throws":[],"return":{"type_long":"boolean","comment":"true if there are one or more modal dialogs displayed in the current JVM.","type_short":"boolean"}},{"javadoc":"","static":true,"name":"findModalestDialog","comment":"","params":[],"throws":[],"return":{"type_long":"java.awt.Dialog","comment":"","type_short":"Dialog"}},{"javadoc":"Returns a list of all <code>parent<\/code>'s descendant modal dialogs.\n@param parent the parent for which to find modal dialogs\n@return a list of all <code>parent<\/code>'s descendant modal dialogs.","static":true,"name":"getOpenModalDialogsFor","comment":"Returns a list of all parent's descendant modal dialogs.","params":[{"type_long":"java.awt.Frame","name":"parent","comment":"the parent for which to find modal dialogs","type_short":"Frame"}],"throws":[],"return":{"type_long":"java.util.List<java.awt.Dialog>","comment":"a list of all parent's descendant modal dialogs.","type_short":"List"}},{"javadoc":"Attempts to locate the topmost modal dialog and then bring that dialog to the front of\n the window hierarchy.","static":true,"name":"bringModalestDialogToFront","comment":"Attempts to locate the topmost modal dialog and then bring that dialog to the front of\n the window hierarchy.","params":[{"type_long":"java.awt.Window","name":"activeWindow","comment":"","type_short":"Window"}],"throws":[],"return":{"type_long":"void","comment":"","type_short":"void"}}],"name":"WindowUtilities","comment":"A collection of window related utility methods","fields":[]}
